NAME

aptitude
&minus; high&minus;level interface to the package
manager

SYNOPSIS

aptitude
[options>...] {autoclean | clean |
forget&minus;new | keep&minus;all | update}

aptitude
[options>...] {full&minus;upgrade |
safe&minus;upgrade} [packages>...]

aptitude
[options>...] {build&minus;dep |
build&minus;depends | changelog | download |
forbid&minus;version | hold | install | markauto | purge |
reinstall | remove | show | unhold | unmarkauto | versions}
packages>... 

aptitude
extract&minus;cache&minus;subset
output&minus;directory>
packages>... 

aptitude
[options>...] search
patterns>... 

aptitude
[options>...] {add&minus;user&minus;tag |
remove&minus;user&minus;tag} tag>
packages>... 

aptitude
[options>...] {why | why&minus;not}
[patterns>...] package>

aptitude
[&minus;S fname>]
[&minus;&minus;autoclean&minus;on&minus;startup |
&minus;&minus;clean&minus;on&minus;startup | &minus;i |
&minus;u] 

aptitude help

DESCRIPTION

aptitude
is a text&minus;based interface to the Debian GNU/Linux
package system.

It allows the
user to view the list of packages and to perform package
management tasks such as installing, upgrading, and removing
packages. Actions may be performed from a visual interface
or from the command&minus;line.

COMMAND-LINE ACTIONS

The first
argument which does not begin with a hyphen
(&ldquo;&minus;&rdquo;) is considered to be an action
that the program should perform. If an action is not
specified on the command&minus;line, aptitude will
start up in visual mode.

The following
actions are available:

install

Install one or more packages.
The packages should be listed after the
&ldquo;install&rdquo; command; if a package name contains a
tilde character (&ldquo;~&rdquo;) or a question mark
(&ldquo;?&rdquo;), it will be treated as a search
pattern and every package matching the pattern will be
installed (see the section &ldquo;Search Patterns&rdquo; in
the aptitude reference manual).

To select a
particular version of the package, append
&ldquo;=version>&rdquo; to the package
name: for instance, &ldquo;aptitude install
apt=0.3.1&rdquo;. Similarly, to select a package from a
particular archive, append
&ldquo;/archive>&rdquo; to the package
name: for instance, &ldquo;aptitude install
apt/experimental&rdquo;.

Not every
package listed on the command line has to be installed; you
can tell aptitude to do something different with a
package by appending an &ldquo;override specifier&rdquo; to
the name of the package. For example, aptitude remove
wesnoth+ will install wesnoth, not remove it. The
following override specifiers are available:

package>+

Install
package>.

package>+M

Install package>
and immediately mark it as automatically installed (note
that if nothing depends on package>, this will
cause it to be immediately removed).

package>&minus;

Remove
package>.

package>_

Purge package>:
remove it and all its associated configuration and data
files.

package>=

Place package> on
hold: cancel any active installation, upgrade, or removal,
and prevent this package from being automatically upgraded
in the future.

package>:

Keep package> at
its current version: cancel any installation, removal, or
upgrade. Unlike &ldquo;hold&rdquo; (above) this does not
prevent automatic upgrades in the future.

package>&M

Mark package> as
having been automatically installed.

package>&m

Mark package> as
having been manually installed.

As a special
case, &ldquo;install&rdquo; with no arguments will
act on any stored/pending actions.

Note

Once you enter Y at the final confirmation prompt,
the &ldquo;install&rdquo; command will modify
aptitude's stored information about what actions to
perform. Therefore, if you issue (e.g.) the command
&ldquo;aptitude install foo bar&rdquo; and then abort
the installation once aptitude has started
downloading and installing packages, you will need to run
&ldquo;aptitude remove foo bar&rdquo; to cancel that
order.

remove,
purge, hold, unhold, keep,
reinstall

These commands are the
same as &ldquo;install&rdquo;, but apply the named
action to all packages given on the command line for which
it is not overridden. The difference between hold and
keep is that hold will cause a package to be
ignored by future safe&minus;upgrade or
full&minus;upgrade commands, while keep merely
cancels any scheduled actions on the package. unhold
will allow a package to be upgraded by future
safe&minus;upgrade or full&minus;upgrade
commands, without otherwise altering its state.

For
instance, &ldquo;aptitude remove '~ndeity'&rdquo;
will remove all packages whose name contains
&ldquo;deity&rdquo;.

markauto,
unmarkauto

Mark packages as
automatically installed or manually installed, respectively.
Packages are specified in exactly the same way as for the
&ldquo;install&rdquo; command. For instance,
&ldquo;aptitude markauto '~slibs'&rdquo; will mark
all packages in the &ldquo;libs&rdquo; section as
having been automatically installed.

For more
information on automatically installed packages, see the
section &ldquo;Managing Automatically Installed
Packages&rdquo; in the aptitude reference
manual.

build&minus;depends,
build&minus;dep

Satisfy the
build&minus;dependencies of a package. Each package name may
be a source package, in which case the build dependencies of
that source package are installed; otherwise, binary
packages are found in the same way as for the
&ldquo;install&rdquo; command, and the
build&minus;dependencies of the source packages that build
those binary packages are satisfied.

If the
command&minus;line parameter
&minus;&minus;arch&minus;only is present, only
architecture&minus;dependent build dependencies (i.e., not
Build&minus;Depends&minus;Indep or
Build&minus;Conflicts&minus;Indep) will be
obeyed.

forbid&minus;version

Forbid a package from
being upgraded to a particular version. This will prevent
aptitude from automatically upgrading to this version, but
will allow automatic upgrades to future versions. By
default, aptitude will select the version to which the
package would normally be upgraded; you may override this
selection by appending
&ldquo;=version>&rdquo; to the package
name: for instance, &ldquo;aptitude forbid&minus;version
vim=1.2.3.broken&minus;4&rdquo;.

This
command is useful for avoiding broken versions of packages
without having to set and clear manual holds. If you decide
you really want the forbidden version after all, the
&ldquo;install&rdquo; command will remove the
ban.

update

Updates the list of
available packages from the apt sources (this is equivalent
to &ldquo;apt&minus;get update&rdquo;)

safe&minus;upgrade

Upgrades installed
packages to their most recent version. Installed packages
will not be removed unless they are unused (see the section
&ldquo;Managing Automatically Installed Packages&rdquo; in
the aptitude reference manual). Packages which are
not currently installed may be installed to resolve
dependencies unless the
&minus;&minus;no&minus;new&minus;installs
command&minus;line option is supplied.

If no
package>s are listed on the command line,
aptitude will attempt to upgrade every package that
can be upgraded. Otherwise, aptitude will attempt to
upgrade only the packages which it is instructed to upgrade.
The package>s can be extended with suffixes in
the same manner as arguments to aptitude install, so
you can also give additional instructions to aptitude
here; for instance, aptitude safe&minus;upgrade bash
dash&minus; will attempt to upgrade the bash package and
remove the dash package.

It is
sometimes necessary to remove one package in order to
upgrade another; this command is not able to upgrade
packages in such situations. Use the
full&minus;upgrade command to upgrade as many
packages as possible.

full&minus;upgrade

Upgrades installed
packages to their most recent version, removing or
installing packages as necessary. This command is less
conservative than safe&minus;upgrade and thus more
likely to perform unwanted actions. However, it is capable
of upgrading packages that safe&minus;upgrade cannot
upgrade.

If no
package>s are listed on the command line,
aptitude will attempt to upgrade every package that
can be upgraded. Otherwise, aptitude will attempt to
upgrade only the packages which it is instructed to upgrade.
The package>s can be extended with suffixes in
the same manner as arguments to aptitude install, so
you can also give additional instructions to aptitude
here; for instance, aptitude full&minus;upgrade bash
dash&minus; will attempt to upgrade the bash package and
remove the dash package.

Note

This command was originally named dist&minus;upgrade
for historical reasons, and aptitude still recognizes
dist&minus;upgrade as a synonym for
full&minus;upgrade.

keep&minus;all

Cancels all scheduled
actions on all packages; any packages whose sticky state
indicates an installation, removal, or upgrade will have
this sticky state cleared.

forget&minus;new

Forgets all internal
information about what packages are &ldquo;new&rdquo;
(equivalent to pressing &ldquo;f&rdquo; when in visual
mode).

search

Searches for packages
matching one of the patterns supplied on the command line.
All packages which match any of the given patterns will be
displayed; for instance, &ldquo;aptitude search '~N'
edit&rdquo; will list all &ldquo;new&rdquo; packages and
all packages whose name contains &ldquo;edit&rdquo;. For
more information on search patterns, see the section
&ldquo;Search Patterns&rdquo; in the aptitude
reference manual.

Note

In the example above, &ldquo;aptitude search '~N'
edit&rdquo; has two arguments after search and
thus is searching for two patterns:
&ldquo;~N&rdquo; and &ldquo;edit&rdquo;. As
described in the search pattern reference, a single
pattern composed of two sub&minus;patterns separated by a
space (such as &ldquo;~N edit&rdquo;) matches only if
both patterns match. Thus, the command
&ldquo;aptitude search '~N edit'&rdquo; will only
show &ldquo;new&rdquo; packages whose name contains
&ldquo;edit&rdquo;.

Unless you pass the
&minus;F option, the output of aptitude search
will look something like this:

i apt
&minus; Advanced front&minus;end for dpkg 
pi apt&minus;build &minus; frontend to apt to build,
optimize and in 
cp apt&minus;file &minus; APT package searching utility
&minus;&minus; command&minus; 
ihA raptor&minus;utils &minus; Raptor RDF Parser
utilities

Each
search result is listed on a separate line. The first
character of each line indicates the current state of the
package: the most common states are p, meaning that
no trace of the package exists on the system, c,
meaning that the package was deleted but its configuration
files remain on the system, i, meaning that the
package is installed, and v, meaning that the package
is virtual. The second character indicates the stored action
(if any; otherwise a blank space is displayed) to be
performed on the package, with the most common actions being
i, meaning that the package will be installed,
d, meaning that the package will be deleted, and
p, meaning that the package and its configuration
files will be removed. If the third character is A,
the package was automatically installed.

For a
complete list of the possible state and action flags, see
the section &ldquo;Accessing Package Information&rdquo; in
the aptitude reference guide. To customize the output
of search, see the command&minus;line options
&minus;F and
&minus;&minus;sort.

show

Displays
detailed information about one or more packages, listed
following the search command. If a package name contains a
tilde character (&ldquo;~&rdquo;) or a question mark
(&ldquo;?&rdquo;), it will be treated as a search
pattern and all matching packages will be displayed (see the
section &ldquo;Search Patterns&rdquo; in the aptitude
reference manual).

If
the verbosity level is 1 or greater (i.e., at least one
&minus;v is present on the command&minus;line),
information about all versions of the package is displayed.
Otherwise, information about the &ldquo;candidate
version&rdquo; (the version that &ldquo;aptitude
install&rdquo; would download) is
displayed.

You
can display information about a different version of the
package by appending =version> to the
package name; you can display the version from a particular
archive or release by appending
/archive> or
/release> to the package name: for
instance, /unstable or /sid. If either of
these is present, then only the version you request will be
displayed, regardless of the verbosity
level.

If
the verbosity level is 1 or greater, the package's
architecture, compressed size, filename, and md5sum fields
will be displayed. If the verbosity level is 2 or greater,
the select version or versions will be displayed once for
each archive in which they are found.

versions

Displays the
versions of the packages listed on the
command&minus;line.

$
aptitude versions wesnoth 
p 1:1.4.5&minus;1 100 
p 1:1.6.5&minus;1 unstable 500 
p 1:1.7.14&minus;1 experimental 1

Each
version is listed on a separate line. The leftmost three
characters indicate the current state, planned state (if
any), and whether the package was automatically installed;
for more information on their meanings, see the
documentation of aptitude search. To the right of the
version number you can find the releases from which the
version is available, and the pin priority of the
version.

If
a package name contains a tilde character
(&ldquo;~&rdquo;) or a question mark
(&ldquo;?&rdquo;), it will be treated as a search
pattern and all matching versions will be displayed
(see the section &ldquo;Search Patterns&rdquo; in the
aptitude reference manual). This means that, for
instance, aptitude versions '~i' will display all the
versions that are currently installed on the system and
nothing else, not even other versions of the same
packages.

$
aptitude versions '~nexim4&minus;daemon&minus;light' 
Package exim4&minus;daemon&minus;light: 
i 4.71&minus;3 100 
p 4.71&minus;4 unstable 500

Package
exim4&minus;daemon&minus;light&minus;dbg: 
p 4.71&minus;4 unstable 500

If
the input is a search pattern, or if more than one package's
versions are to be displayed, aptitude will
automatically group the output by package, as shown above.
You can disable this via
&minus;&minus;group&minus;by=none, in which case
aptitude will display a single list of all the
versions that were found and automatically include the
package name in each output line:

$
aptitude versions &minus;&minus;group&minus;by=none
'~nexim4&minus;daemon&minus;light' 
i exim4&minus;daemon&minus;light 4.71&minus;3 100 
p exim4&minus;daemon&minus;light 4.71&minus;4 unstable 500

p exim4&minus;daemon&minus;light&minus;dbg 4.71&minus;4
unstable 500

To
disable the package name, pass
&minus;&minus;show&minus;package&minus;names=never:

$
aptitude versions
&minus;&minus;show&minus;package&minus;names=never
&minus;&minus;group&minus;by=none
'~nexim4&minus;daemon&minus;light' 
i 4.71&minus;3 100 
p 4.71&minus;4 unstable 500 
p 4.71&minus;4 unstable 500

In
addition to the above options, the information printed for
each version can be controlled by the command&minus;line
option &minus;F. The order in which versions are
displayed can be controlled by the command&minus;line option
&minus;&minus;sort. To prevent aptitude from
formatting the output into columns, use
&minus;&minus;disable&minus;columns.

add&minus;user&minus;tag,
remove&minus;user&minus;tag

Adds a user tag
to or removes a user tag from the selected group of
packages. If a package name contains a tilde
(&ldquo;~&rdquo;) or question mark
(&ldquo;?&rdquo;), it is treated as a search pattern
and the tag is added to or removed from all the packages
that match the pattern (see the section &ldquo;Search
Patterns&rdquo; in the aptitude reference
manual).

User
tags are arbitrary strings associated with a package. They
can be used with the
?user&minus;tag(tag>) search
term, which will select all the packages that have a user
tag matching tag>.

why,
why&minus;not

Explains the
reason that a particular package should or cannot be
installed on the system.

This
command searches for packages that require or conflict with
the given package. It displays a sequence of dependencies
leading to the target package, along with a note indicating
the installed state of each package in the dependency
chain:

$
aptitude why kdepim 
i nautilus&minus;data Recommends nautilus 
i A nautilus Recommends desktop&minus;base (>= 0.2) 
i A desktop&minus;base Suggests gnome | kde | xfce4 | wmaker

p kde Depends kdepim (>= 4:3.4.3)

The
command why finds a dependency chain that installs
the package named on the command line, as above. Note that
the dependency that aptitude produced in this case is only a
suggestion. This is because no package currently installed
on this computer depends on or recommends the kdepim
package; if a stronger dependency were available, aptitude
would have displayed it.

In
contrast, why&minus;not finds a dependency chain
leading to a conflict with the target
package:

$
aptitude why&minus;not textopo 
i ocaml&minus;core Depends ocamlweb 
i A ocamlweb Depends tetex&minus;extra |
texlive&minus;latex&minus;extra 
i A texlive&minus;latex&minus;extra Conflicts
textopo

If
one or more pattern>s are present, then
aptitude will begin its search at these patterns; that is,
the first package in the chain it prints will be a package
matching the pattern in question. The patterns are
considered to be package names unless they contain a tilde
character (&ldquo;~&rdquo;) or a question mark
(&ldquo;?&rdquo;), in which case they are treated as
search patterns (see the section &ldquo;Search
Patterns&rdquo; in the aptitude reference
manual).

If
no patterns are present, then aptitude will search
for dependency chains beginning at manually installed
packages. This effectively shows the packages that have
caused or would cause a given package to be
installed.

Note

aptitude why does not perform full dependency
resolution; it only displays direct relationships between
packages. For instance, if A requires B, C requires D, and B
and C conflict, &ldquo;aptitude why&minus;not
D&rdquo; will not produce the answer &ldquo;A depends on
B, B conflicts with C, and D depends on
C&rdquo;.

By default
aptitude outputs only the &ldquo;most installed, strongest,
tightest, shortest&rdquo; dependency chain. That is, it
looks for a chain that only contains packages which are
installed or will be installed; it looks for the strongest
possible dependencies under that restriction; it looks for
chains that avoid ORed dependencies and Provides; and it
looks for the shortest dependency chain meeting those
criteria. These rules are progressively weakened until a
match is found.

If
the verbosity level is 1 or more, then all the
explanations aptitude can find will be displayed, in inverse
order of relevance. If the verbosity level is 2 or more, a
truly excessive amount of debugging information will be
printed to standard output.

This
command returns 0 if successful, 1 if no explanation could
be constructed, and &minus;1 if an error
occured.

clean

Removes all
previously downloaded .deb files from the package
cache directory (usually
/var/cache/apt/archives).

autoclean

Removes any
cached packages which can no longer be downloaded. This
allows you to prevent a cache from growing out of control
over time without completely emptying
it.

changelog

Downloads
and displays the Debian changelog for each of the given
source or binary packages.

By
default, the changelog for the version which would be
installed with &ldquo;aptitude install&rdquo; is
downloaded. You can select a particular version of a package
by appending =version> to the package
name; you can select the version from a particular archive
or release by appending /archive> or
/release> to the package name (for
instance, /unstable or
/sid).

download

Downloads
the .deb file for the given package to the current
directory. If a package name contains a tilde character
(&ldquo;~&rdquo;) or a question mark
(&ldquo;?&rdquo;), it will be treated as a search
pattern and all the matching packages will be downloaded
(see the section &ldquo;Search Patterns&rdquo; in the
aptitude reference
manual).

By
default, the version which would be installed with
&ldquo;aptitude install&rdquo; is downloaded. You can
select a particular version of a package by appending
=version> to the package name; you can
select the version from a particular archive or release by
appending /archive> or
/release> to the package name (for
instance: /unstable or
/sid).

extract&minus;cache&minus;subset

Copy the
apt configuration directory (/etc/apt) and a subset
of the package database to the specified directory. If no
packages are listed, the entire package database is copied;
otherwise only the entries corresponding to the named
packages are copied. Each package name may be a search
pattern, and all the packages matching that pattern will be
selected (see the section &ldquo;Search Patterns&rdquo; in
the aptitude reference manual). Any existing package
database files in the output directory will be
overwritten.

Dependencies
in binary package stanzas will be rewritten to remove
references to packages not in the selected
set.

help

Displays a
brief summary of the available commands and
options.

OPTIONS

The
following options may be used to modify the behavior of the
actions described above. Note that while all options will be
accepted for all commands, some options don't apply to
particular commands and will be ignored by those
commands.

&minus;&minus;add&minus;user&minus;tag
tag>

For
full&minus;upgrade, safe&minus;upgrade,
forbid&minus;version, hold, install,
keep&minus;all, markauto, unmarkauto,
purge, reinstall, remove,
unhold, and unmarkauto: add the user tag
tag> to all packages that are installed,
removed, or upgraded by this command as if with the
add&minus;user&minus;tag
command.

&minus;&minus;add&minus;user&minus;tag&minus;to
tag>,pattern>

For
full&minus;upgrade, safe&minus;upgrade
forbid&minus;version, hold, install,
keep&minus;all, markauto, unmarkauto,
purge, reinstall, remove,
unhold, and unmarkauto: add the user tag
tag> to all packages that match
pattern> as if with the
add&minus;user&minus;tag command. The pattern is a
search pattern as described in the section &ldquo;Search
Patterns&rdquo; in the aptitude reference
manual.

For
instance, aptitude safe&minus;upgrade
&minus;&minus;add&minus;user&minus;tag&minus;to
"new&minus;installs,?action(install)" will add
the tag new&minus;installs to all the packages
installed by the safe&minus;upgrade
command.

&minus;&minus;allow&minus;new&minus;upgrades

When the
safe resolver is being used (i.e.,
&minus;&minus;safe&minus;resolver was passed or
Aptitude::Always&minus;Use&minus;Safe&minus;Resolver
is set to true), allow the dependency resolver to
install upgrades for packages regardless of the value of
Aptitude::Safe&minus;Resolver::No&minus;New&minus;Upgrades.

&minus;&minus;allow&minus;new&minus;installs

Allow the
safe&minus;upgrade command to install new packages;
when the safe resolver is being used (i.e.,
&minus;&minus;safe&minus;resolver was passed or
Aptitude::Always&minus;Use&minus;Safe&minus;Resolver
is set to true), allow the dependency resolver to
install new packages. This option takes effect regardless of
the value of
Aptitude::Safe&minus;Resolver::No&minus;New&minus;Installs.

&minus;&minus;allow&minus;untrusted

Install
packages from untrusted sources without prompting. You
should only use this if you know what you are doing, as it
could easily compromise your system's
security.

&minus;&minus;disable&minus;columns

This option
causes aptitude search and aptitude version to
output their results without any special formatting. In
particular: normally aptitude will add whitespace or
truncate search results in an attempt to fit its results
into vertical &ldquo;columns&rdquo;. With this flag, each
line will be formed by replacing any format escapes in the
format string with the correponding text; column widths will
be ignored.

For
instance, the first few lines of output from
&ldquo;aptitude search &minus;F '%p %V'
&minus;&minus;disable&minus;columns
libedataserver&rdquo; might
be:

disksearch
1.2.1&minus;3 
hp&minus;search&minus;mac 0.1.3 
libbsearch&minus;ruby 1.5&minus;5 
libbsearch&minus;ruby1.8 1.5&minus;5 
libclass&minus;dbi&minus;abstractsearch&minus;perl
0.07&minus;2 
libdbix&minus;fulltextsearch&minus;perl
0.73&minus;10

As
in the above example,
&minus;&minus;disable&minus;columns is often useful
in combination with a custom display format set using the
command&minus;line option
&minus;F.

This
corresponds to the configuration option
Aptitude::CmdLine::Disable&minus;Columns.

&minus;D,
&minus;&minus;show&minus;deps

For
commands that will install or remove packages
(install, full&minus;upgrade, etc), show brief
explanations of automatic installations and
removals.

This
corresponds to the configuration option
Aptitude::CmdLine::Show&minus;Deps.

&minus;d,
&minus;&minus;download&minus;only

Download
packages to the package cache as necessary, but do not
install or remove anything. By default, the package cache is
stored in
/var/cache/apt/archives.

This
corresponds to the configuration option
Aptitude::CmdLine::Download&minus;Only.

&minus;F
format>,
&minus;&minus;display&minus;format
format>

Specify the
format which should be used to display output from the
search and version commands. For instance,
passing &ldquo;%p %V %v&rdquo; for
format> will display a package's name,
followed by its currently installed version and its
available version (see the section &ldquo;Customizing how
packages are displayed&rdquo; in the aptitude
reference manual for more
information).

The
command&minus;line option
&minus;&minus;disable&minus;columns is often useful
in combination with
&minus;F.

For
search, this corresponds to the configuration option
Aptitude::CmdLine::Package&minus;Display&minus;Format;
for versions, this corresponds to the configuration
option
Aptitude::CmdLine::Version&minus;Display&minus;Format.

&minus;f

Try hard to
fix the dependencies of broken packages, even if it means
ignoring the actions requested on the command
line.

This
corresponds to the configuration item
Aptitude::CmdLine::Fix&minus;Broken.

&minus;&minus;full&minus;resolver

When
package dependency problems are encountered, use the default
&ldquo;full&rdquo; resolver to solve them. Unlike the
&ldquo;safe&rdquo; resolver activated by
&minus;&minus;safe&minus;resolver, the full resolver
will happily remove packages to fulfill dependencies. It can
resolve more situations than the safe algorithm, but its
solutions are more likely to be
undesirable.

This
option can be used to force the use of the full resolver
even when
Aptitude::Always&minus;Use&minus;Safe&minus;Resolver
is true. The safe&minus;upgrade command never uses
the full resolver and does not accept the
&minus;&minus;full&minus;resolver
option.

&minus;&minus;group&minus;by
grouping&minus;mode>

Control how
the versions command groups its output. The following
values are recognized:

&bull;
archive to group packages by the archive they occur
in (&ldquo;stable&rdquo;,
&ldquo;unstable&rdquo;, etc). If a package occurs in
several archives, it will be displayed in each of
them.

&bull;
auto to group versions by their package unless there
is exactly one argument and it is not a search
pattern.

&bull;
none to display all the versions in a single list
without any grouping.

&bull;
package to group versions by their
package.

&bull;
source&minus;package to group versions by their
source package.

&bull;
source&minus;version to group versions by their
source package and source
version.

This
corresponds to the configuration option
Aptitude::CmdLine::Versions&minus;Group&minus;By.

&minus;h,
&minus;&minus;help

Display a
brief help message. Identical to the help
action.

&minus;&minus;log&minus;file=file>

If
file> is a nonempty string, log messages will
be written to it, except that if file> is
&ldquo;&minus;&rdquo;, the messages will be written
to standard output instead. If this option appears multiple
times, the last occurrence is the one that will take
effect.

This
does not affect the log of installations that aptitude has
performed (/var/log/aptitude); the log messages written
using this configuration include internal program events,
errors, and debugging messages. See the command&minus;line
option &minus;&minus;log&minus;level to get more
control over what gets logged.

This
corresponds to the configuration option
Aptitude::Logging::File.

&minus;&minus;log&minus;level=level>,
&minus;&minus;log&minus;level=category>:level>

&minus;&minus;log&minus;level=level>
causes aptitude to only log messages whose level is
level> or higher. For instance, setting the
log level to error will cause only messages at the
log levels error and fatal to be displayed;
all others will be hidden. Valid log levels (in descending
order) are off, fatal, error,
warn, info, debug, and trace.
The default log level is
warn.

&minus;&minus;log&minus;level=category>:level>
causes messages in category> to only be logged
if their level is level> or
higher.

&minus;&minus;log&minus;level
may appear multiple times on the command line; the most
specific setting is the one that takes effect, so if you
pass
&minus;&minus;log&minus;level=aptitude.resolver:fatal
and
&minus;&minus;log&minus;level=aptitude.resolver.hints.match:trace,
then messages in aptitude.resolver.hints.parse will
only be printed if their level is fatal, but all
messages in aptitude.resolver.hints.match will be
printed. If you set the level of the same category two or
more times, the last setting is the one that will take
effect.

This
does not affect the log of installations that aptitude has
performed (/var/log/aptitude); the log messages written
using this configuration include internal program events,
errors, and debugging messages. See the command&minus;line
option &minus;&minus;log&minus;file to change where
log messages go.

This
corresponds to the configuration group
Aptitude::Logging::Levels.

&minus;&minus;log&minus;resolver

Set some
standard log levels related to the resolver, to produce
logging output suitable for processing with automated tools.
This is equivalent to the command&minus;line options
&minus;&minus;log&minus;level=aptitude.resolver.search:trace
&minus;&minus;log&minus;level=aptitude.resolver.search.tiers:info.

&minus;&minus;no&minus;new&minus;installs

Prevent
safe&minus;upgrade from installing any new packages;
when the safe resolver is being used (i.e.,
&minus;&minus;safe&minus;resolver was passed or
Aptitude::Always&minus;Use&minus;Safe&minus;Resolver
is set to true), forbid the dependency resolver from
installing new packages. This option takes effect regardless
of the value of
Aptitude::Safe&minus;Resolver::No&minus;New&minus;Installs.

This
mimics the historical behavior of apt&minus;get
upgrade.

This
corresponds to the configuration option
Aptitude::CmdLine::Safe&minus;Upgrade::No&minus;New&minus;Installs.

&minus;&minus;no&minus;new&minus;upgrades

When the
safe resolver is being used (i.e.,
&minus;&minus;safe&minus;resolver was passed or
Aptitude::Always&minus;Use&minus;Safe&minus;Resolver
is set to true), allow the dependency resolver to
install new packages regardless of the value of
Aptitude::Safe&minus;Resolver::No&minus;New&minus;Installs.

&minus;&minus;no&minus;show&minus;resolver&minus;actions

Do not
display the actions performed by the &ldquo;safe&rdquo;
resolver, overriding any configuration option or earlier
&minus;&minus;show&minus;resolver&minus;actions.

&minus;O
order>, &minus;&minus;sort
order>

Specify the
order in which output from the search and
versions commands should be displayed. For instance,
passing &ldquo;installsize&rdquo; for
order> will list packages in order according
to their size when installed (see the section
&ldquo;Customizing how packages are sorted&rdquo; in the
aptitude reference manual for more
information).

The
default sort order is
name,version.

&minus;o
key>=value>

Set a
configuration file option directly; for instance, use
&minus;o Aptitude::Log=/tmp/my&minus;log to log
aptitude's actions to /tmp/my&minus;log. For more
information on configuration file options, see the section
&ldquo;Configuration file reference&rdquo; in the
aptitude reference
manual.

&minus;P,
&minus;&minus;prompt

Always
display a prompt before downloading, installing or removing
packages, even when no actions other than those explicitly
requested will be performed.

This
corresponds to the configuration option
Aptitude::CmdLine::Always&minus;Prompt.

&minus;&minus;purge&minus;unused

If
Aptitude::Delete&minus;Unused is set to
&ldquo;true&rdquo; (its default), then in addition to
removing each package that is no longer required by any
installed package, aptitude will also purge them,
removing their configuration files and perhaps other
important data. For more information about which packages
are considered to be &ldquo;unused&rdquo;, see the section
&ldquo;Managing Automatically Installed Packages&rdquo; in
the aptitude reference manual. THIS OPTION CAN
CAUSE DATA LOSS! DO NOT USE IT UNLESS YOU KNOW WHAT YOU ARE
DOING!

This
corresponds to the configuration option
Aptitude::Purge&minus;Unused.

&minus;q[=n>],
&minus;&minus;quiet[=n>]

Suppress
all incremental progress indicators, thus making the output
loggable. This may be supplied multiple times to make the
program quieter, but unlike apt&minus;get,
aptitude does not enable &minus;y when
&minus;q is supplied more than
once.

The
optional =n> may be used to directly
set the amount of quietness (for instance, to override a
setting in /etc/apt/apt.conf); it causes the program to
behave as if &minus;q had been passed exactly
n> times.

&minus;R,
&minus;&minus;without&minus;recommends

Do
not treat recommendations as dependencies when
installing new packages (this overrides settings in
/etc/apt/apt.conf and ~/.aptitude/config). Packages
previously installed due to recommendations will not be
removed.

This
corresponds to the pair of configuration options
Apt::Install&minus;Recommends and
Apt::AutoRemove::InstallRecommends.

&minus;r,
&minus;&minus;with&minus;recommends

Treat
recommendations as dependencies when installing new packages
(this overrides settings in /etc/apt/apt.conf and
~/.aptitude/config).

This
corresponds to the configuration option
Apt::Install&minus;Recommends

&minus;&minus;remove&minus;user&minus;tag
tag>

For
full&minus;upgrade, safe&minus;upgrade
forbid&minus;version, hold, install,
keep&minus;all, markauto, unmarkauto,
purge, reinstall, remove,
unhold, and unmarkauto: remove the user tag
tag> from all packages that are installed,
removed, or upgraded by this command as if with the
add&minus;user&minus;tag
command.

&minus;&minus;remove&minus;user&minus;tag&minus;from
tag>,pattern>

For
full&minus;upgrade, safe&minus;upgrade
forbid&minus;version, hold, install,
keep&minus;all, markauto, unmarkauto,
purge, reinstall, remove,
unhold, and unmarkauto: remove the user tag
tag> from all packages that match
pattern> as if with the
remove&minus;user&minus;tag command. The pattern is a
search pattern as described in the section &ldquo;Search
Patterns&rdquo; in the aptitude reference
manual.

For
instance, aptitude safe&minus;upgrade
&minus;&minus;remove&minus;user&minus;tag&minus;from
"not&minus;upgraded,?action(upgrade)" will
remove the not&minus;upgraded tag from all packages
that the safe&minus;upgrade command is able to
upgrade.

&minus;s,
&minus;&minus;simulate

In
command&minus;line mode, print the actions that would
normally be performed, but don't actually perform them. This
does not require root privileges. In the visual interface,
always open the cache in read&minus;only mode regardless of
whether you are root.

This
corresponds to the configuration option
Aptitude::Simulate.

&minus;&minus;safe&minus;resolver

When
package dependency problems are encountered, use a
&ldquo;safe&rdquo; algorithm to solve them. This resolver
attempts to preserve as many of your choices as possible; it
will never remove a package or install a version of a
package other than the package's default candidate version.
It is the same algorithm used in safe&minus;upgrade;
indeed, aptitude &minus;&minus;safe&minus;resolver
full&minus;upgrade is equivalent to aptitude
safe&minus;upgrade. Because safe&minus;upgrade
always uses the safe resolver, it does not accept the
&minus;&minus;safe&minus;resolver
flag.

This
option is equivalent to setting the configuration variable
Aptitude::Always&minus;Use&minus;Safe&minus;Resolver
to true.

&minus;&minus;schedule&minus;only

For
commands that modify package states, schedule operations to
be performed in the future, but don't perform them. You can
execute scheduled actions by running aptitude install
with no arguments. This is equivalent to making the
corresponding selections in visual mode, then exiting the
program normally.

For
instance, aptitude &minus;&minus;schedule&minus;only
install evolution will schedule the evolution
package for later installation.

&minus;&minus;show&minus;package&minus;names
when>

Controls
when the versions command shows package names. The
following settings are allowed:

&bull;
always: display package names every time that
aptitude versions runs.

&bull;
auto: display package names when aptitude
versions runs if the output is not grouped by package,
and either there is a pattern&minus;matching argument or
there is more than one argument.

&bull;
never: never display package names in the output of
aptitude versions.

This
option corresponds to the configuration item
Aptitude::CmdLine::Versions&minus;Show&minus;Package&minus;Names.

&minus;&minus;show&minus;resolver&minus;actions

Display the
actions performed by the &ldquo;safe&rdquo;
resolver.

&minus;&minus;show&minus;summary[=MODE>]

Changes the
behavior of &ldquo;aptitude why&rdquo; to summarize
each dependency chain that it outputs, rather than
displaying it in long form. If this option is present and
MODE> is not
&ldquo;no&minus;summary&rdquo;, chains that contain
Suggests dependencies will not be displayed: combine
&minus;&minus;show&minus;summary with &minus;v
to see a summary of all the reasons for the target package
to be installed.

MODE>
can be any one of the following:

1.
no&minus;summary: don't show a summary (the default
behavior if &minus;&minus;show&minus;summary is not
present).

2.
first&minus;package: display the first package in
each chain. This is the default value of MODE>
if it is not present.

3.
first&minus;package&minus;and&minus;type: display the
first package in each chain, along with the strength of the
weakest dependency in the chain.

4.
all&minus;packages: briefly display each chain of
dependencies leading to the target
package.

5.
all&minus;packages&minus;with&minus;dep&minus;versions:
briefly display each chain of dependencies leading to the
target package, including the target version of each
dependency.

This
option corresponds to the configuration item
Aptitude::CmdLine::Show&minus;Summary; if
&minus;&minus;show&minus;summary is present on the
command&minus;line, it will override
Aptitude::CmdLine::Show&minus;Summary.

Example 10. Usage
of
&minus;&minus;show&minus;summary

&minus;&minus;show&minus;summary
used with &minus;v to display all the reasons a
package is installed:

$
aptitude &minus;v &minus;&minus;show&minus;summary why
foomatic&minus;db 
Packages requiring foomatic&minus;db: 
cupsys&minus;driver&minus;gutenprint 
foomatic&minus;db&minus;engine 
foomatic&minus;db&minus;gutenprint 
foomatic&minus;db&minus;hpijs 
foomatic&minus;filters&minus;ppds 
foomatic&minus;gui 
kde 
printconf 
wine

$
aptitude &minus;v
&minus;&minus;show&minus;summary=first&minus;package&minus;and&minus;type
why foomatic&minus;db 
Packages requiring foomatic&minus;db: 
[Depends] cupsys&minus;driver&minus;gutenprint 
[Depends] foomatic&minus;db&minus;engine 
[Depends] foomatic&minus;db&minus;gutenprint 
[Depends] foomatic&minus;db&minus;hpijs 
[Depends] foomatic&minus;filters&minus;ppds 
[Depends] foomatic&minus;gui 
[Depends] kde 
[Depends] printconf 
[Depends] wine

$
aptitude &minus;v
&minus;&minus;show&minus;summary=all&minus;packages why
foomatic&minus;db 
Packages requiring foomatic&minus;db: 
cupsys&minus;driver&minus;gutenprint D:
cups&minus;driver&minus;gutenprint D: cups R:
foomatic&minus;filters R: foomatic&minus;db&minus;engine D:
foomatic&minus;db 
foomatic&minus;filters&minus;ppds D: foomatic&minus;filters
R: foomatic&minus;db&minus;engine D: foomatic&minus;db 
kde D: kdeadmin R:
system&minus;config&minus;printer&minus;kde D:
system&minus;config&minus;printer R:
hal&minus;cups&minus;utils D: cups R: foomatic&minus;filters
R: foomatic&minus;db&minus;engine D: foomatic&minus;db 
wine D: libwine&minus;print D: cups&minus;bsd R: cups R:
foomatic&minus;filters R: foomatic&minus;db&minus;engine D:
foomatic&minus;db 
foomatic&minus;db&minus;engine D: foomatic&minus;db 
foomatic&minus;db&minus;gutenprint D: foomatic&minus;db 
foomatic&minus;db&minus;hpijs D: foomatic&minus;db 
foomatic&minus;gui D: python&minus;foomatic D:
foomatic&minus;db&minus;engine D: foomatic&minus;db 
printconf D: foomatic&minus;db

$
aptitude &minus;v
&minus;&minus;show&minus;summary=all&minus;packages&minus;with&minus;dep&minus;versions
why foomatic&minus;db 
Packages requiring foomatic&minus;db: 
cupsys&minus;driver&minus;gutenprint D:
cups&minus;driver&minus;gutenprint (>= 5.0.2&minus;4) D:
cups (>= 1.3.0) R: foomatic&minus;filters (>= 4.0) R:
foomatic&minus;db&minus;engine (>= 4.0) D:
foomatic&minus;db (>= 20090301) 
foomatic&minus;filters&minus;ppds D: foomatic&minus;filters
R: foomatic&minus;db&minus;engine (>= 4.0) D:
foomatic&minus;db (>= 20090301) 
kde D: kdeadmin (>= 4:3.5.5) R:
system&minus;config&minus;printer&minus;kde (>=
4:4.2.2&minus;1) D: system&minus;config&minus;printer (>=
1.0.0) R: hal&minus;cups&minus;utils D: cups R:
foomatic&minus;filters (>= 4.0) R:
foomatic&minus;db&minus;engine (>= 4.0) D:
foomatic&minus;db (>= 20090301) 
wine D: libwine&minus;print (= 1.1.15&minus;1) D:
cups&minus;bsd R: cups R: foomatic&minus;filters (>= 4.0)
R: foomatic&minus;db&minus;engine (>= 4.0) D:
foomatic&minus;db (>= 20090301) 
foomatic&minus;db&minus;engine D: foomatic&minus;db 
foomatic&minus;db&minus;gutenprint D: foomatic&minus;db 
foomatic&minus;db&minus;hpijs D: foomatic&minus;db 
foomatic&minus;gui D: python&minus;foomatic (>= 0.7.9.2)
D: foomatic&minus;db&minus;engine D: foomatic&minus;db
(>= 20090301) 
printconf D: foomatic&minus;db

&minus;&minus;show&minus;summary
used to list a chain on one
line:

$
aptitude &minus;&minus;show&minus;summary=all&minus;packages
why aptitude&minus;gtk libglib2.0&minus;data 
Packages requiring libglib2.0&minus;data: 
aptitude&minus;gtk D: libglib2.0&minus;0 R:
libglib2.0&minus;data

&minus;t
release>,
&minus;&minus;target&minus;release
release>

Set the
release from which packages should be installed. For
instance, &ldquo;aptitude &minus;t experimental
...&rdquo; will install packages from the experimental
distribution unless you specify otherwise. For the
command&minus;line actions &ldquo;changelog&rdquo;,
&ldquo;download&rdquo;, and &ldquo;show&rdquo;, this is
equivalent to appending /release> to
each package named on the command&minus;line; for other
commands, this will affect the default candidate version of
packages according to the rules described in
apt_preferences(5).

This
corresponds to the configuration item
APT::Default&minus;Release.

&minus;V,
&minus;&minus;show&minus;versions

Show which
versions of packages will be
installed.

This
corresponds to the configuration option
Aptitude::CmdLine::Show&minus;Versions.

&minus;v,
&minus;&minus;verbose

Causes some
commands (for instance, show) to display extra
information. This may be supplied multiple times to get more
and more information.

This
corresponds to the configuration option
Aptitude::CmdLine::Verbose.

&minus;&minus;version

Display the
version of aptitude and some information about how it
was compiled.

When
executing the command safe&minus;upgrade or when the
option &minus;&minus;safe&minus;resolver is present,
aptitude will display a summary of the actions
performed by the resolver before printing the installation
preview. This is equivalent to the configuration options
Aptitude::CmdLine::Safe&minus;Upgrade::Show&minus;Resolver&minus;Actions
and
Aptitude::Safe&minus;Resolver::Show&minus;Resolver&minus;Actions.

&minus;&minus;visual&minus;preview

When
installing or removing packages from the command line,
instead of displaying the usual prompt, start up the visual
interface and display its preview
screen.

&minus;W,
&minus;&minus;show&minus;why

In the
preview displayed before packages are installed or removed,
show which manually installed package requires each
automatically installed package. For
instance:

$
aptitude &minus;&minus;show&minus;why install mediawiki 
... 
The following NEW packages will be installed: 
libapache2&minus;mod&minus;php5{a} (for mediawiki) mediawiki
php5{a} (for mediawiki) 
php5&minus;cli{a} (for mediawiki) php5&minus;common{a} (for
mediawiki) 
php5&minus;mysql{a} (for
mediawiki)

When
combined with &minus;v or a non&minus;zero value for
Aptitude::CmdLine::Verbose, this displays the entire
chain of dependencies that lead each package to be
installed. For instance:

$
aptitude &minus;v &minus;&minus;show&minus;why install
libdb4.2&minus;dev 
The following NEW packages will be installed: 
libdb4.2{a} (libdb4.2&minus;dev D: libdb4.2)
libdb4.2&minus;dev 
The following packages will be REMOVED: 
libdb4.4&minus;dev{a} (libdb4.2&minus;dev C: libdb&minus;dev
P

This
option will also describe why packages are being removed, as
shown above. In this example, libdb4.2&minus;dev conflicts
with libdb&minus;dev, which is provided by
libdb&minus;dev.

This
argument corresponds to the configuration option
Aptitude::CmdLine::Show&minus;Why and displays the
same information that is computed by aptitude why and
aptitude why&minus;not.

&minus;w
width>, &minus;&minus;width
width>

Specify the
display width which should be used for output from the
search command (by default, the terminal width is
used).

This
corresponds to the configuration option
Aptitude::CmdLine::Package&minus;Display&minus;Width

&minus;y,
&minus;&minus;assume&minus;yes

When a
yes/no prompt would be presented, assume that the user
entered &ldquo;yes&rdquo;. In particular, suppresses the
prompt that appears when installing, upgrading, or removing
packages. Prompts for &ldquo;dangerous&rdquo; actions, such
as removing essential packages, will still be displayed.
This option overrides
&minus;P.

This
corresponds to the configuration option
Aptitude::CmdLine::Assume&minus;Yes.

&minus;Z

Show how
much disk space will be used or freed by the individual
packages being installed, upgraded, or
removed.

This
corresponds to the configuration option
Aptitude::CmdLine::Show&minus;Size&minus;Changes.

The
following options apply to the visual mode of the program,
but are primarily for internal use; you generally won't need
to use them yourself.

&minus;&minus;autoclean&minus;on&minus;startup

Deletes old
downloaded files when the program starts (equivalent to
starting the program and immediately selecting Actions
&rarr; Clean obsolete files). You cannot use this option and
&ldquo;&minus;&minus;autoclean&minus;on&minus;startup&rdquo;,
&ldquo;&minus;i&rdquo;, or
&ldquo;&minus;u&rdquo; at the same
time.

&minus;&minus;clean&minus;on&minus;startup

Cleans the
package cache when the program starts (equivalent to
starting the program and immediately selecting Actions
&rarr; Clean package cache). You cannot use this option and
&ldquo;&minus;&minus;autoclean&minus;on&minus;startup&rdquo;,
&ldquo;&minus;i&rdquo;, or
&ldquo;&minus;u&rdquo; at the same
time.

&minus;i

Displays a
download preview when the program starts (equivalent to
starting the program and immediately pressing
&ldquo;g&rdquo;). You cannot use this option and
&ldquo;&minus;&minus;autoclean&minus;on&minus;startup&rdquo;,
&ldquo;&minus;&minus;clean&minus;on&minus;startup&rdquo;,
or &ldquo;&minus;u&rdquo; at the same
time.

&minus;S
fname>

Loads the
extended state information from fname> instead
of the standard state file.

&minus;u

Begins
updating the package lists as soon as the program starts.
You cannot use this option and
&ldquo;&minus;&minus;autoclean&minus;on&minus;startup&rdquo;,
&ldquo;&minus;&minus;clean&minus;on&minus;startup&rdquo;,
or &ldquo;&minus;i&rdquo; at the same
time.

ENVIRONMENT

HOME

If
$HOME/.aptitude exists, aptitude will store its
configuration file in $HOME/.aptitude/config. Otherwise, it
will look up the current user's home directory using
getpwuid(2) and place its configuration file
there.

PAGER

If this
environment variable is set, aptitude will use it to
display changelogs when &ldquo;aptitude
changelog&rdquo; is invoked. If not set, it defaults to
more.

TMP

If
TMPDIR is unset, aptitude will store its
temporary files in TMP if that variable is set.
Otherwise, it will store them in
/tmp.

TMPDIR

aptitude
will store its temporary files in the directory indicated by
this environment variable. If TMPDIR is not set, then
TMP will be used; if TMP is also unset, then
aptitude will use /tmp.

FILES

/var/lib/aptitude/pkgstates

The file in
which stored package states and some package flags are
stored.

/etc/apt/apt.conf,
/etc/apt/apt.conf.d/*,
~/.aptitude/config

The
configuration files for aptitude. ~/.aptitude/config
overrides /etc/apt/apt.conf. See apt.conf(5) for
documentation of the format and contents of these
files.

SEE ALSO

apt-get(8),
apt(8),
/usr/share/doc/aptitude/html/lang>/index.html
from the package
aptitude&minus;doc&minus;lang>

AUTHOR

Daniel
Burrows
dburrows [AT] debian.org>

Author.

COPYRIGHT

Copyright
2004&minus;2010 Daniel Burrows.

This
manual page is free software; you can redistribute it and/or
modify it under the terms of the GNU General Public License
as published by the Free Software Foundation; either version
2 of the License, or (at your option) any later
version.

This
manual page is distributed in the hope that it will be
useful, but WITHOUT ANY WARRANTY; without even the implied
warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR
PURPOSE. See the GNU General Public License for more
details.

You
should have received a copy of the GNU General Public
License along with this program; if not, write to the Free
Software Foundation, Inc., 51 Franklin Street, Fifth Floor,
Boston, MA 02110&minus;1301 USA.