PROLOG

This manual
page is part of the POSIX Programmer&rsquo;s Manual. The
Linux implementation of this interface may differ (consult
the corresponding Linux manual page for details of Linux
behavior), or the interface may not be implemented on
Linux.

NAME

posix_spawn_file_actions_adddup2
&mdash; add dup2 action to spawn file actions object
(ADVANCED REALTIME)

SYNOPSIS

#include

int
posix_spawn_file_actions_adddup2(posix_spawn_file_actions_t

*file_actions, int fildes, int
newfildes);

DESCRIPTION

The
posix_spawn_file_actions_adddup2() function shall add
a dup2() action to the object referenced by
file_actions that shall cause the file descriptor
fildes to be duplicated as newfildes (as if
dup2(fildes, newfildes) had been
called) when a new process is spawned using this file
actions object.

A spawn file
actions object is as defined in
posix_spawn_file_actions_addclose().

RETURN VALUE

Upon successful
completion, the posix_spawn_file_actions_adddup2()
function shall return zero; otherwise, an error number shall
be returned to indicate the error.

ERRORS

The
posix_spawn_file_actions_adddup2() function shall
fail if:

EBADF

The value specified by fildes or newfildes
is negative or greater than or equal to {OPEN_MAX}.

ENOMEM

Insufficient memory exists to add to the spawn file
actions object.

The
posix_spawn_file_actions_adddup2() function may fail
if:

EINVAL

The value specified by
file_actions is invalid.

It shall not be
considered an error for the fildes argument passed to
the posix_spawn_file_actions_adddup2() function to
specify a file descriptor for which the specified operation
could not be performed at the time of the call. Any such
error will be detected when the associated file actions
object is later used during a posix_spawn() or
posix_spawnp() operation.

The
following sections are informative.

EXAMPLES

None.

APPLICATION USAGE

The
posix_spawn_file_actions_adddup2() function is part
of the Spawn option and need not be provided on all
implementations.

Implementations
may use file descriptors that must be inherited into child
processes for the child process to remain conforming, such
as for message catalog or tracing purposes. Therefore, an
application that calls
posix_spawn_file_actions_adddup2() with an arbitrary
integer for newfildes risks non-conforming behavior,
and this function can only portably be used to overwrite
file descriptor values that the application has obtained
through explicit actions, or for the three file descriptors
corresponding to the standard file streams. In order to
avoid a race condition of leaking an unintended file
descriptor into a child process, an application should
consider opening all file descriptors with the FD_CLOEXEC
bit set unless the file descriptor is intended to be
inherited across exec.

RATIONALE

Refer to the
RATIONALE section in
posix_spawn_file_actions_addclose().

FUTURE DIRECTIONS

None.

SEE ALSO

dup(),
posix_spawn(),
posix_spawn_file_actions_addclose(),
posix_spawn_file_actions_destroy()

The Base
Definitions volume of POSIX.1-2008,

COPYRIGHT

Portions of
this text are reprinted and reproduced in electronic form
from IEEE Std 1003.1, 2013 Edition, Standard for Information
Technology -- Portable Operating System Interface (POSIX),
The Open Group Base Specifications Issue 7, Copyright (C)
2013 by the Institute of Electrical and Electronics
Engineers, Inc and The Open Group. (This is POSIX.1-2008
with the 2013 Technical Corrigendum 1 applied.) In the event
of any discrepancy between this version and the original
IEEE and The Open Group Standard, the original IEEE and The
Open Group Standard is the referee document. The original
Standard can be obtained online at
http://www.unix.org/online.html .

Any
typographical or formatting errors that appear in this page
are most likely to have been introduced during the
conversion of the source files to man page format. To report
such errors, see
https://www.kernel.org/doc/man-pages/reporting_bugs.html
.