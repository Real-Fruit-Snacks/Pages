NAME

insertinit, insertsort, get_results, set_results,
save_median, save_minimum

- the lmbench results subsystem

SYNOPSIS

#include
’’lmbench.h’’

#define
TRIES 11

typedef
struct { uint64 u, n } value_t;

typedef
struct { int N; value_t v[TRIES]; } result_t;

int

sizeof_result(int N)

void

insertinit(result_t *r)

void

insertsort(uint64 u, uint64 n, result_t *r)

result_t*

get_results()

void

set_results(result_t *r)

void

save_median()

void

save_minimum()

DESCRIPTION

These routines
provide some simple data management functionality. In most
cases, you will not need these routines.

The current
timing results can be accessed using the routines in
timing(3). The current timing results may be modified using
save_median and save_minimum.

int

sizeof_result(int N)

returns the number of bytes to
allocate for a result_t which contains N results.

void

insertinit(result_t *r)

initializes the results
array.

void

insertsort(uint64 u, uint64 n, result_t *r)

insert u and n
into r. Results are sorted in decreasing order by
u/n.

void

get_results(result_t *r)

get a copy of the current
results.

void

set_results(result_t *r)

save a copy r as the
current results.

void

save_median()

sets the timing results to the
median of the current results.

void

save_minimum()

sets the timing restuls to the
minimum of the current results.

Results are
sorted in ascending order, so the minimum value is at
TRIES-1 and the maximum value is at 0.

FUTURES

Development of
lmbench is continuing.

SEE ALSO

lmbench(8),
lmbench(3), reporting(3), results(3)

AUTHOR

Carl Staelin
and Larry McVoy

Comments,
suggestions, and bug reports are always welcome.