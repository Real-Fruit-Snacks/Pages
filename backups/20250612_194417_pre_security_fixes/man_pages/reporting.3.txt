NAME

milli, micro,
nano, mb, kb - the lmbench reporting subsystem

SYNOPSIS

#include
’’lmbench.h’’

void

milli(char *s, uint64 n)

void

micro(char *s, uint64 n)

void

nano(char *s, uint64 n)

void

mb(uint64 bytes)

void

kb(uint64 bytes)

DESCRIPTION

Creating
benchmarks using the lmbench timing harness is easy.
Since it is so easy to measure performance using
lmbench, it is possible to quickly answer questions
that arise during system design, development, or tuning. For
example, image processing

There are two
attributes that are critical for performance, latency and
bandwidth, and lmbench’s timing harness makes
it easy to measure and report results for both. The
measurement interface, benchmp is the same, but the
reporting functions are different. Latency is usually
important for frequently executed operations, and bandwidth
is usually important when moving large chunks of data.

void

milli(char *s, uint64 n)

print out the time per
operation in milli-seconds. n is the number of
operations during the timing interval, which is passed as a
parameter because each loop_body can contain several
operations.

void

micro(char *s, uint64 n)

print the time per opertaion in
micro-seconds.

void

nano(char *s, uint64 n)

print the time per operation in
nano-seconds.

void

mb(uint64 bytes)

print the bandwidth in
megabytes per second.

void

kb(uint64 bytes)

print the bandwidth in
kilobytes per second.

FUTURES

Development of
lmbench is continuing.

SEE ALSO

lmbench(8),
lmbench(3), timing(3), results(3)

AUTHOR

Carl Staelin
and Larry McVoy

Comments,
suggestions, and bug reports are always welcome.