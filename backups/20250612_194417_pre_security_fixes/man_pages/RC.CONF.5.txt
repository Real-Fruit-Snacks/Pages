RC.CONF(5) BSD File Formats Manual RC.CONF(5)

NAME

rc.conf — system
configuration information

DESCRIPTION

The file rc.conf contains
descriptive information about the local host name,
configuration details for any potential network interfaces
and which services should be started up at system initial
boot time. In new installations, the rc.conf file is
generally initialized by the system installation utility,
sysinstall(8).

The purpose of
rc.conf is not to run commands or perform system
startup actions directly. Instead, it is included by the
various generic startup scripts in /etc which
conditionalize their internal actions according to the
settings found there.

The
/etc/rc.conf file is included from the file
/etc/defaults/rc.conf, which specifies the default
settings for all the available options. Options need only be
specified in /etc/rc.conf when the system
administrator wishes to override these defaults. The file
/etc/rc.conf.local is used to override settings in
/etc/rc.conf for historical reasons. See the
rc_conf_files variable below.

The following
list provides a name and short description for each variable
that can be set in the rc.conf file:

rc_debug

(bool)
If set to ’’YES’’, enable output of
debug messages from rc scripts. This variable can be helpful
in diagnosing mistakes when editing or integrating new
scripts. Beware that this produces copious output to the
terminal and syslog(3).

rc_info

(bool)
If set to ’’NO’’, disable
informational messages from the rc scripts. Informational
messages are displayed when a condition that is not serious
enough to warrant a warning or an error occurs.

swapfile

(str) If
set to ’’NO’’, no swapfile is
installed, otherwise the value is used as the full pathname
to a file to use for additional swap space.

apm_enable

(bool)
If set to ’’YES’’, enable support
for Automatic Power Management with the apm(8) command.

apmd_enable

(bool) Run apmd(8) to
handle APM event from userland. This also enables support
for APM.

apmd_flags

(str) If
apmd_enable is set to
’’YES’’, these are the flags to pass
to the apmd(8) daemon.

devd_enable

(bool) Run devd(8) to
handle device added, removed or unknown events from the
kernel.

kldxref_enable

(bool) Set to
’’NO’’ by default. Set to
’’YES’’ to automatically rebuild
linker.hints files with kldxref(8) at boot time.

kldxref_clobber

(bool) Set to
’’NO’’ by default. If
kldxref_enable is true, setting to
’’YES’’ will overwrite existing
linker.hints files at boot time. Otherwise, only
missing linker.hints files are generated.

kldxref_module_path

(str) Empty by default.
A semi-colon (’;’) delimited list of paths
containing kld(4) modules. If empty, the contents of the
kern.module_path sysctl(8) are used.

pccard_enable

(bool) If set to
’’YES’’, enable PCCARD support at
boot time.

pccard_mem

(str)
Set to PCCARD controller memory address or
’’DEFAULT’’ for the default
value.

pccard_ifconfig

(str) List of arguments
to be passed to ifconfig(8) at boot time or on insertion of
the card (e.g. ’’inet 192.168.1.1
netmask 255.255.255.0’’ for a fixed
address or ’’DHCP’’ for a DHCP
client).

pccard_beep

(int) If 0, set the
PCCARD controller to silent mode. If 1, set it to beep mode.
If 2, set it to melody mode.

pccard_conf

(str) Path to the
configuration file for the pccardd(8) daemon (e.g.
/etc/pccard.conf.sample).

pccardd_flags

(str) If
pccard_enable is set to
’’YES’’, these are the flags to pass
to the pccardd(8) daemon.

pccard_ether_delay

(str) Set the delay
before starting dhclient(8) in the /etc/pccard_ether
script. This defaults to 5 seconds to work around a bug in
the ed(4) driver which can lead to system hangs when using
some newer ed(4) based cards.

removable_interfaces

(str) List of removable
network interfaces to be supported by
/etc/pccard_ether.

tmpmfs

Controls the
creation of a /tmp memory file system. Always happens
if set to ’’YES’’ and never happens
if set to ’’NO’’. If set to anything
else, a memory file system is created if /tmp is not
writable.

tmpsize

Controls the
size of a created /tmp memory file system.

varmfs

Controls the
creation of a /var memory file system. Always happens
if set to ’’YES’’ and never happens
if set to ’’NO’’. If set to anything
else, a memory file system is created if /var is not
writable.

varsize

Controls the
size of a created /var memory file system.

populate_var

Controls the automatic
population of the /var file system. Always happens if
set to ’’YES’’ and never happens if
set to ’’NO’’. If set to anything
else, a memory file system is created if /tmp is not
writable. Note that this process requires access to certain
commands in /usr before /usr is mounted on
normal systems.

local_startup

(str) List of
directories to search for startup script files.

script_name_sep

(str) The field
separator to use for breaking down the list of startup
script files into individual filenames. The default is a
space. It is not necessary to change this unless there are
startup scripts with names containing spaces.

hostname

(str)
The fully qualified domain name (FQDN) of this host on the
network. This should almost certainly be set to something
meaningful, even if there is no network connection. If
dhclient(8) is used to set the hostname via DHCP, this
variable should be set to an empty string.

ipv6_enable

(bool) Enable support
for IPv6 networking. Note that this requires that the kernel
have been compiled with options INET6.

nisdomainname

(str) The NIS domain
name of this host, or ’’NO’’ if NIS
is not used.

dhclient_program

(str) Path to the DHCP
client program (/sbin/dhclient, the ISC DHCP client,
is the default).

dhclient_flags

(str) Additional flags
to pass to the DHCP client program. For the ISC DHCP client,
see the dhclient(8) manpage for a description of the command
line options available.

background_dhclient

(bool) Set to
’’YES’’ to start the dhcp client in
background. This can cause trouble with applications
depending on a working network, but it will provide a faster
startup in many cases.

firewall_enable

(bool) Set to
’’YES’’ to load firewall rules at
startup. If the kernel was not built with options
IPFIREWALL, the ipfw.ko kernel module will be
loaded. See also ipfilter_enable.

ipv6_firewall_enable

(bool) The IPv6
equivalent of firewall_enable. Set to
’’YES’’ to load IPv6 firewall rules
at startup. If the kernel was not built with options
IPV6FIREWALL, the ip6fw.ko kernel module will be
loaded.

firewall_script

(str) This variable
specifies the full path to the firewall script to run. The
default is /etc/rc.firewall.

ipv6_firewall_script

(str) The IPv6
equivalent of firewall_script.

firewall_type

(str) Names the firewall
type from the selection in /etc/rc.firewall, or the
file which contains the local firewall ruleset. Valid
selections from /etc/rc.firewall are:

open

unrestricted IP
access

closed

all IP services
disabled, except via ’’lo0’’

client

basic
protection for a workstation

simple

basic
protection for a LAN.

If a filename
is specified, the full path must be given.

ipv6_firewall_type

(str) The IPv6
equivalent of firewall_type.

firewall_quiet

(bool) Set to
’’YES’’ to disable the display of
firewall rules on the console during boot.

ipv6_firewall_quiet

(bool) The IPv6
equivalent of firewall_quiet.

firewall_logging

(bool) Set to
’’YES’’ to enable firewall event
logging. This is equivalent to the IPFIREWALL_VERBOSE kernel
option.

ipv6_firewall_logging

(bool) The IPv6
equivalent of firewall_logging.

firewall_flags

(str) Flags passed to
ipfw(8) if firewall_type specifies a filename.

ipv6_firewall_flags

(str) The IPv6
equivalent of firewall_flags.

natd_program

(str) Path to
natd(8).

natd_enable

(bool) Set to
’’YES’’ to enable natd(8).
firewall_enable must also be set to
’’YES’’, and divert(4) sockets must
be enabled in the kernel.

natd_interface

(str) This is the name
of the public interface on which natd(8) should run. The
interface may be given as an interface name or as an IP
address.

natd_flags

(str)
Additional natd(8) flags should be placed here. The
−n or −a flag is automatically
added with the above natd_interface as an
argument.

ipfilter_enable

(bool) Set to
’’NO’’ by default. Setting this to
’’YES’’ enables ipf(8) packet
filtering.

Typical usage
will require putting

ipfilter_enable="YES"

ipnat_enable="YES" 
ipmon_enable="YES" 
ipfs_enable="YES"

into
/etc/rc.conf and editing /etc/ipf.rules and
/etc/ipnat.rules appropriately.

Note that
ipfilter_enable and ipnat_enable can be
enabled independently. ipmon_enable and
ipfs_enable both require at least one of
ipfilter_enable and ipnat_enable to be
enabled.

Having

options
IPFILTER 
options IPFILTER_LOG 
options IPFILTER_DEFAULT_BLOCK

in the kernel
configuration file is a good idea, too.

ipfilter_program

(str) Path to ipf(8)
(default /sbin/ipf).

ipfilter_rules

(str) Set to
/etc/ipf.rules by default. This variable contains the
name of the filter rule definition file. The file is
expected to be readable for the ipf(8) command to
execute.

ipv6_ipfilter_rules

(str) Set to
/etc/ipf6.rules by default. This variable contains
the IPv6 filter rule definition file. The file is expected
to be readable for the ipf(8) command to execute.

ipfilter_flags

(str) Empty by default.
This variable contains flags passed to the ipf(8)
program.

ipnat_enable

(bool) Set to
’’NO’’ by default. Set it to
’’YES’’ to enable ipnat(1) network
address translation. See ipfilter_enable for a
detailed discussion.

ipnat_program

(str) Path to ipnat(1)
(default /sbin/ipnat).

ipnat_rules

(str) Set to
/etc/ipnat.rules by default. This variable contains
the name of the file holding the network address translation
definition. This file is expected to be readable for the
ipnat(1) command to execute.

ipnat_flags

(str) Empty by default.
This variable contains flags passed to the ipnat(1)
program.

ipmon_enable

(bool) Set to
’’NO’’ by default. Set it to
’’YES’’ to enable ipmon(8)
monitoring (logging ipf(8) and ipnat(1) events). Setting
this variable needs setting ipfilter_enable or
ipnat_enable too. See ipfilter_enable for a
detailed discussion.

ipmon_program

(str) Path to ipmon(8)
(default /sbin/ipmon).

ipmon_flags

(str) Set to
’’-Ds’’ by default. This variable
contains flags passed to the ipmon(8) program. Another
typical example would be ’’−D
/var/log/ipflog’’ to have ipmon(8) log
directly to a file bypassing syslogd(8). Make sure to adjust
/etc/newsyslog.conf in such case like this:

/var/log/ipflog
640 10 100 * Z /var/run/ipmon.pid

ipfs_enable

(bool) Set to
’’NO’’ by default. Set it to
’’YES’’ to enable ipfs(8) saving the
filter and NAT state tables during shutdown and reloading
them during startup again. Setting this variable needs
setting ipfilter_enable or ipnat_enable to
’’YES’’ too. See
ipfilter_enable for a detailed discussion. Note that
if kern_securelevel is set to 3, ipfs_enable
cannot be used because the raised securelevel will prevent
ipfs(8) from saving the state tables at shutdown time.

ipfs_program

(str) Path to ipfs(8)
(default /sbin/ipfs).

ipfs_flags

(str)
Empty by default. This variable contains flags passed to the
ipfs(8) program.

pf_enable

(bool)
Set to ’’NO’’ by default. Setting
this to ’’YES’’ enables pf(4) packet
filtering.

Typical usage
will require putting

pf_enable="YES"

into
/etc/rc.conf and editing /etc/pf.conf
appropriately.

device pf

builds pf into
the kernel. Otherwise it is loaded from a module.

pf_rules

(str)
Path to pf(4) ruleset configuration file (default
/etc/pf.conf).

pf_program

(str)
Path to pfctl(8) (default /sbin/pfctl).

pf_flags

(str) If
pf_enable is set to ’’YES’’,
these flags are passed to the pfctl(8) program when loading
the ruleset.

pflog_enable

(bool) Set to
’’NO’’ by default. Setting this to
’’YES’’ enables pflogd(8) which logs
packtes from the pf(4) packet filter.

pflog_logfile

(str) If
pflog_enable is set to
’’YES’’ this controls where
pflogd(8) stores the logfile (default
/var/log/pflog). Check /etc/newsyslog.conf to
adjust logfile rotation for this.

pflog_program

(str) Path to pflogd(8)
(default /sbin/pflogd).

pflog_flags

(str) Empty by default.
This variable contains additional flags passed to the
pflogd(8) program.

tcp_extensions

(bool) Set to
’’YES’’ by default. Setting this to
’’NO’’ disables certain TCP options
as described by

RFC 1323 . Setting this to
’’NO’’ might help remedy such
problems with connections as randomly hanging or other weird
behavior. Some network devices are known to be broken with
respect to these options.

log_in_vain

(int) Set to 0 by
default. The sysctl(8) variables,
net.inet.tcp.log_in_vain and
net.inet.udp.log_in_vain, as described in tcp(4) and
udp(4), are set to the given value.

tcp_keepalive

(bool) Set to
’’YES’’ by default. Setting to
’’NO’’ will disable probing idle TCP
connections to verify that the peer is still up and
reachable.

tcp_drop_synfin

(bool) Set to
’’NO’’ by default. Setting to
’’YES’’ will cause the kernel to
ignore TCP frames that have both the SYN and FIN flags set.
This prevents OS fingerprinting, but may break some
legitimate applications. This option is only available if
the kernel was built with the TCP_DROP_SYNFIN option.

icmp_drop_redirect

(bool) Set to
’’NO’’ by default. Setting to
’’YES’’ will cause the kernel to
ignore ICMP REDIRECT packets. Refer to icmp(4) for more
information.

icmp_log_redirect

(bool) Set to
’’NO’’ by default. Setting to
’’YES’’ will cause the kernel to log
ICMP REDIRECT packets. Note that the log messages are not
rate-limited, so this option should only be used for
troubleshooting networks. Refer to icmp(4) for more
information.

icmp_bmcastecho

(bool) Set to
’’YES’’ to respond to broadcast or
multicast ICMP ping packets. Refer to icmp(4) for more
information.

ip_portrange_first

(int) If not set to
’’NO’’, this is the first port in
the default portrange. Refer to ip(4) for more
information.

ip_portrange_last

(int) If not set to
’’NO’’, this is the last port in the
default portrange. Refer to ip(4) for more information.

network_interfaces

(str) Set to the list of
network interfaces to configure on this host. For example,
if the only network devices in the system are the loopback
device (lo0) and a NIC using the ed(4) driver, this could be
set to ’’lo0 ed0’’. An
ifconfig_⟨ interface⟩ variable is
also assumed to exist for each value of interface. It
is also possible to add IP alias entries here in cases where
multiple IP addresses registered against a single interface
are desired. Assuming that the interface in question was
ed0, it might look something like this:

ifconfig_ed0_alias0="inet
127.0.0.253 netmask 0xffffffff" 
ifconfig_ed0_alias1="inet 127.0.0.254 netmask
0xffffffff"

And so on. For
each ifconfig_⟨

interface ⟩ _alias⟨
n⟩ entry that is found, its contents are passed
to ifconfig(8). Execution stops at the first unsuccessful
access, so if something like this is present:

ifconfig_ed0_alias0="inet
127.0.0.251 netmask 0xffffffff" 
ifconfig_ed0_alias1="inet 127.0.0.252 netmask
0xffffffff" 
ifconfig_ed0_alias2="inet 127.0.0.253 netmask
0xffffffff" 
ifconfig_ed0_alias4="inet 127.0.0.254 netmask
0xffffffff"

Then note that
alias4 would not be added since the search would stop
with the missing alias3 entry.

If the
/etc/start_if.⟨ interface⟩ file is
present, it is read and executed by the sh(1) interpreter
before configuring the interface as specified in the
ifconfig_⟨ interface⟩ and
ifconfig_⟨

interface ⟩ _alias⟨
n⟩ variables.

It is possible
to bring up an interface with DHCP by setting the
ifconfig_⟨ interface⟩ variable to
’’DHCP’’. For instance, to
initialize the ed0 device via DHCP, it is possible to use
something like:

ifconfig_ed0="DHCP"

ipv6_network_interfaces

(str) This is the IPv6
equivalent of network_interfaces. Instead of setting
the ifconfig variables as ifconfig_⟨
interface⟩ they should be set as
ipv6_ifconfig_⟨ interface⟩ . Aliases
should be set as ipv6_ifconfig_⟨

interface ⟩ _alias⟨
n⟩ . ipv6_prefix_⟨
interface⟩ does something. Interfaces that do
not have a ipv6_ifconfig_⟨
interface⟩ setting will be auto configured by
rtsol(8) if the ipv6_gateway_enable is set to
’’NO’’. Note that the IPv6
networking code does not support the
/etc/start_if.⟨ interface⟩
files.

ipv6_default_interface

(str) If not set to
’’NO’’, this is the default output
interface for scoped addresses. Now this works only for IPv6
link local multicast addresses.

cloned_interfaces

(str) Set to the list of
clonable network interfaces to create on this host. Entries
in cloned_interfaces are automatically appended to
network_interfaces for configuration.

gif_interfaces

(str) Set to the list of
gif(4) tunnel interfaces to configure on this host. A
gifconfig_⟨ interface⟩ variable is
assumed to exist for each value of interface. The
value of this variable is used to configure the link layer
of the tunnel according to the syntax of the tunnel
option to ifconfig(8). Additionally, this option ensures
that each listed interface is created via the create
option to ifconfig(8) before attempting to configure it.

sppp_interfaces

(str) Set to the list of
sppp(4) interfaces to configure on this host. A
spppconfig_⟨ interface⟩ variable is
assumed to exist for each value of interface. Each
interface should also be configured by a general
ifconfig_⟨ interface⟩ setting. Refer
to spppcontrol(8) for more information about available
options.

ppp_enable

(bool)
If set to ’’YES’’, run the ppp(8)
daemon.

ppp_mode

(str)
Mode in which to run the ppp(8) daemon. Accepted modes are
’’auto’’,
’’ddial’’,
’’direct’’ and
’’dedicated’’. See the manual for a
full description.

ppp_nat

(bool)
If set to ’’YES’’, enables network
address translation. Used in conjunction with
gateway_enable allows hosts on private network
addresses access to the Internet using this host as a
network address translating router.

ppp_profile

(str) The name of the
profile to use from /etc/ppp/ppp.conf.

ppp_user

(str)
The name of the user under which ppp(8) should be started.
By default, ppp(8) is started as
’’root’’.

rc_conf_files

(str) This option is
used to specify a list of files that will override the
settings in /etc/defaults/rc.conf. The files will be
read in the order in which they are specified and should
include the full path to the file. By default, the files
specified are /etc/rc.conf and
/etc/rc.conf.local

gbde_autoattach_all

(bool) If set to
’’YES’’, /etc/rc.d/gbde will
attempt to automatically initialize your .bde devices in
/etc/fstab.

gbde_devices

(str) List the devices
that the script should try to attach, or
’’AUTO’’.

gbde_lockdir

(str) The directory
where the gbde(4) lockfiles are located. The default
lockfile directory is /etc.

The lockfile
for each individual gbde(4) device can be overridden by
setting the variable gbde_lock_⟨
device⟩ , where device is the encrypted
device without the ’’/dev/’’
and ’’.bde’’ parts.

gbde_attach_attempts

(int) Number of times to
attempt attaching to a gbde(4) device, i.e. how many times
the user is asked for the pass-phrase. Default is 3.

gbde_swap_enable

(bool) If set to
’’YES’’, any .bde swap devices
listed in /etc/fstab will be initialized with a
random, one-shot key. Note that this makes recovery of
kernel dumps impossible.

root_rw_mount

(bool) Set to
’’YES’’ by default. After the file
systems are checked at boot time, the root filesystem is
remounted as read-write if this is set to
’’YES’’. Diskless systems that mount
their filesystem from a read-only remote NFS share should
set this to ’’NO’’ in their
rc.conf.

fsck_y_enable

(bool) If set to
’’YES’’, fsck(8) will be run with
the −y flag if the initial preen of the file
systems fails.

background_fsck

(bool) If set to
’’YES’’, the system will attempt to
run fsck(8) in the background where possible.

background_fsck_delay

(int) The amount of time
in seconds to sleep before starting a background fsck(8). It
defaults to sixty seconds to allow large applications such
as the X server to start before disk I/O bandwidth is
monopolized by fsck(8).

netfs_types

(str) List of file
system types that are network-based. This list should
generally not be modified by end users. Use
extra_netfs_types instead.

extra_netfs_types

(str) If set to
something other than ’’NO’’ (the
default), this variable extends the list of file system
types for which automatic mounting at startup by rc(8)
should be delayed until the network is initialized. It
should contain a whitespace-separated list of network file
system descriptor pairs, each consisting of a file system
type as passed to mount(8) and a human-readable, one-word
description, joined with a colon (’:’).
Extending the default list in this way is only necessary
when third party file system types are used.

syslogd_enable

(bool) If set to
’’YES’’, run the syslogd(8)
daemon.

syslogd_program

(str) Path to syslogd(8)
(default /usr/sbin/syslogd).

syslogd_flags

(str) If
syslogd_enable is set to
’’YES’’, these are the flags to pass
to syslogd(8).

inetd_enable

(bool) If set to
’’YES’’, run the inetd(8)
daemon.

inetd_program

(str) Path to inetd(8)
(default /usr/sbin/inetd).

inetd_flags

(str) If
inetd_enable is set to
’’YES’’, these are the flags to pass
to inetd(8).

named_enable

(bool) If set to
’’YES’’, run the named(8)
daemon.

named_program

(str) Path to named(8)
(default /usr/sbin/named).

named_flags

(str) If
named_enable is set to
’’YES’’, these are the flags to pass
to named(8).

named_pidfile

(str) This is the
default path to the named(8) daemon’s PID file. Change
it if you change the location in named.conf(5).

named_chrootdir

(str) The root directory
for a name server run in a chroot(8) environment (default
/var/named). If left empty named(8) will not be run
in a chroot(8) environment.

named_chroot_autoupdate

(bool) Set to
’’NO’’ to disable automatic update
of the chroot(8) environment.

named_symlink_enable

(bool) Set to
’’NO’’ to disable symlinking of
daemon’s PID file into the chroot(8) environment.

kerberos5_server_enable

(bool) Set to
’’YES’’ to start a Kerberos 5
authentication server at boot time.

kerberos5_server

(str) If
kerberos5_server_enable is set to
’’YES’’ this is the path to Kerberos
5 Authentication Server.

kadmind5_server_enable

(bool) Set to
’’YES’’ to start kadmind(8), the
Kerberos 5 Administration Daemon; set to
’’NO’’ on a slave server.

kadmind5_server

(str) If
kadmind5_server_enable is set to
’’YES’’ this is the path to Kerberos
5 Administration Daemon.

kpasswdd_server_enable

(bool) Set to
’’YES’’ to start kpasswdd(8), the
Kerberos 5 Password-Changing Daemon; set to
’’NO’’ on a slave server.

kpasswdd_server

(str) If
kpasswdd_server_enable is set to
’’YES’’ this is the path to Kerberos
5 Password-Changing Daemon.

rwhod_enable

(bool) If set to
’’YES’’, run the rwhod(8) daemon at
boot time.

rwhod_flags

(str) If
rwhod_enable is set to
’’YES’’, these are the flags to pass
to it.

amd_enable

(bool)
If set to ’’YES’’, run the amd(8)
daemon at boot time.

amd_flags

(str) If
amd_enable is set to ’’YES’’,
these are the flags to pass to it. See the amd(8) manpage
for more information.

amd_map_program

(str) If set, the
specified program is run to get the list of amd(8) maps. For
example, if the amd(8) maps are stored in NIS, one can set
this to run ypcat(1) to get a list of amd(8) maps from the
amd.master NIS map.

update_motd

(bool) If set to
’’YES’’, /etc/motd will be
updated at boot time to reflect the kernel release being
run. If set to ’’NO’’,
/etc/motd will not be updated.

nfs_client_enable

(bool) If set to
’’YES’’, run the NFS client daemons
at boot time.

nfs_access_cache

(int) If
nfs_client_enable is set to
’’YES’’, this can be set to
’’0’’ to disable NFS ACCESS RPC
caching, or to the number of seconds for which NFS ACCESS
results should be cached. A value of 2-10 seconds will
substantially reduce network traffic for many NFS
operations.

nfs_server_enable

(bool) If set to
’’YES’’, run the NFS server daemons
at boot time.

nfs_server_flags

(str) If
nfs_server_enable is set to
’’YES’’, these are the flags to pass
to the nfsd(8) daemon.

mountd_enable

(bool) If set to
’’YES’’, and no
nfs_server_enable is set, start mountd(8), but not
nfsd(8) daemon. It is commonly needed to run CFS without
real NFS used.

mountd_flags

(str) If
mountd_enable is set to
’’YES’’, these are the flags to pass
to the mountd(8) daemon.

weak_mountd_authentication

(bool) If set to
’’YES’’, allow services like PCNFSD
to make non-privileged mount requests.

nfs_reserved_port_only

(bool) If set to
’’YES’’, provide NFS services only
on a secure port.

nfs_bufpackets

(int) If set to a
number, indicates the number of packets worth of socket
buffer space to reserve on an NFS client. The kernel default
is typically 4. Using a higher number may be useful on
gigabit networks to improve performance. The minimum value
is 2 and the maximum is 64.

rpc_lockd_enable

(bool) If set to
’’YES’’ and also an NFS server, run
rpc.lockd(8) at boot time.

rpc_statd_enable

(bool) If set to
’’YES’’ and also an NFS server, run
rpc.statd(8) at boot time.

rpcbind_program

(str) Path to rpcbind(8)
(default /usr/sbin/rpcbind).

rpcbind_enable

(bool) If set to
’’YES’’, run the rpcbind(8) service
at boot time.

rpcbind_flags

(str) If
rpcbind_enable is set to
’’YES’’, these are the flags to pass
to the rpcbind(8) daemon.

keyserv_enable

(bool) If set to
’’YES’’, run the keyserv(8) daemon
on boot for running Secure RPC.

keyserv_flags

(str) If
keyserv_enable is set to
’’YES’’, these are the flags to pass
to keyserv(8) daemon.

pppoed_enable

(bool) If set to
’’YES’’, run the pppoed(8) daemon at
boot time to provide PPP over Ethernet services.

pppoed_provider

(str) pppoed(8) listens
to requests to this provider and ultimately runs
ppp(8) with a system argument of the same name.

pppoed_flags

(str) Additional flags
to pass to pppoed(8).

pppoed_interface

(str) The network
interface to run pppoed(8) on. This is mandatory when
pppoed_enable is set to
’’YES’’.

timed_enable

(bool) If set to
’’YES’’, run the timed(8) service at
boot time. This command is intended for networks of machines
where a consistent ’’network time’’
for all hosts must be established. This is often useful in
large NFS environments where time stamps on files are
expected to be consistent network-wide.

timed_flags

(str) If
timed_enable is set to
’’YES’’, these are the flags to pass
to the timed(8) service.

ntpdate_enable

(bool) If set to
’’YES’’, run ntpdate(8) at system
startup. This command is intended to synchronize the system
clock only once from some standard reference. An
option to set this up initially (from a list of known
servers) is also provided by the sysinstall(8) program when
the system is first installed.

ntpdate_hosts

(str) A
whitespace-separated list of NTP servers to synchronize with
at startup. The default is to use the servers listed in
/etc/ntp.conf, if that file exists.

ntpdate_program

(str) Path to ntpdate(8)
(default /usr/sbin/ntpdate).

ntpdate_flags

(str) If
ntpdate_enable is set to
’’YES’’, these are the flags to pass
to the ntpdate(8) command (typically a hostname).

ntpd_enable

(bool) If set to
’’YES’’, run the ntpd(8) command at
boot time.

ntpd_program

(str) Path to ntpd(8)
(default /usr/sbin/ntpd).

ntpd_flags

(str) If
ntpd_enable is set to
’’YES’’, these are the flags to pass
to the ntpd(8) daemon.

nis_client_enable

(bool) If set to
’’YES’’, run the ypbind(8) service
at system boot time.

nis_client_flags

(str) If
nis_client_enable is set to
’’YES’’, these are the flags to pass
to the ypbind(8) service.

nis_ypset_enable

(bool) If set to
’’YES’’, run the ypset(8) daemon at
system boot time.

nis_ypset_flags

(str) If
nis_ypset_enable is set to
’’YES’’, these are the flags to pass
to the ypset(8) daemon.

nis_server_enable

(bool) If set to
’’YES’’, run the ypserv(8) daemon at
system boot time.

nis_server_flags

(str) If
nis_server_enable is set to
’’YES’’, these are the flags to pass
to the ypserv(8) daemon.

nis_ypxfrd_enable

(bool) If set to
’’YES’’, run the rpc.ypxfrd(8)
daemon at system boot time.

nis_ypxfrd_flags

(str) If
nis_ypxfrd_enable is set to
’’YES’’, these are the flags to pass
to the rpc.ypxfrd(8) daemon.

nis_yppasswdd_enable

(bool) If set to
’’YES’’, run the rpc.yppasswdd(8)
daemon at system boot time.

nis_yppasswdd_flags

(str) If
nis_yppasswdd_enable is set to
’’YES’’, these are the flags to pass
to the rpc.yppasswdd(8) daemon.

rpc_ypupdated_enable

(bool) If set to
’’YES’’, run the
rpc.ypupdated daemon at system boot time.

defaultrouter

(str) If not set to
’’NO’’, create a default route to
this host name or IP address (use an IP address if this
router is also required to get to the name server!).

ipv6_defaultrouter

(str) The IPv6
equivalent of defaultrouter.

static_routes

(str) Set to the list of
static routes that are to be added at system boot time. If
not set to ’’NO’’ then for each
whitespace separated element in the value, a
route_⟨ element⟩ variable is assumed
to exist whose contents will later be passed to a
’’route add’’ operation. For
example:

static_routes="mcast
gif0local" 
route_mcast="-net 224.0.0.0/4 -iface gif0" 
route_gif0local="-host 169.254.1.1 -iface lo0"

ipv6_static_routes

(str) The IPv6
equivalent of static_routes. If not set to
’’NO’’ then for each whitespace
separated element in the value, a
ipv6_route_⟨ element⟩ variable is
assumed to exist whose contents will later be passed to a
’’route add −inet6’’
operation.

natm_static_routes

(str) The natmip(4)
equivalent of static_routes. If not empty then for
each whitespace separated element in the value, a
route_⟨ element⟩ variable is assumed
to exist whose contents will later be passed to a
’’atmconfig natm add’’
operation.

gateway_enable

(bool) If set to
’’YES’’, configure host to act as an
IP router, e.g. to forward packets between interfaces.

ipv6_gateway_enable

(bool) The IPv6
equivalent of gateway_enable.

router_enable

(bool) If set to
’’YES’’, run a routing daemon of
some sort, based on the settings of router and
router_flags.

ipv6_router_enable

(bool) The IPv6
equivalent of router_enable. If set to
’’YES’’, run a routing daemon of
some sort, based on the settings of ipv6_router and
ipv6_router_flags.

router

(str) If
router_enable is set to
’’YES’’, this is the name of the
routing daemon to use.

ipv6_router

(str) The IPv6
equivalent of router.

router_flags

(str) If
router_enable is set to
’’YES’’, these are the flags to pass
to the routing daemon.

ipv6_router_flags

(str) The IPv6
equivalent of router_flags.

mrouted_enable

(bool) If set to
’’YES’’, run the multicast routing
daemon, mrouted(8).

mroute6d_enable

(bool) The IPv6
equivalent of mrouted_enable. If set to
’’YES’’, run the IPv6 multicast
routing daemon. Note that no IPv6 multicast routing daemon
is included in the FreeBSD base system but pim6dd(8) can be
installed from the FreeBSD Ports Collection.

mrouted_flags

(str) If
mrouted_enable is set to
’’YES’’, these are the flags to pass
to the mrouted(8) daemon.

mroute6d_flags

(str) The IPv6
equivalent of mrouted_flags. If
mroute6d_enable is set to
’’YES’’, these are the flags passed
to the IPv6 multicast routing daemon.

mroute6d_program

(str) If
mroute6d_enable is set to
’’YES’’, this is the path to the
IPv6 multicast routing daemon.

rtadvd_enable

(bool) If set to
’’YES’’, run the rtadvd(8) daemon at
boot time. rtadvd(8) will only run if
ipv6_gateway_enable is also set to
’’YES’’. The rtadvd(8) utility sends
router advertisement packets to the interfaces specified in
rtadvd_interfaces and should only be enabled with
great care. You may want to fine-tune rtadvd.conf(5).

rtadvd_interfaces

(str) If
rtadvd_enable is set to
’’YES’’ this is the list of
interfaces to use.

ipxgateway_enable

(bool) If set to
’’YES’’, enable the routing of IPX
traffic.

ipxrouted_enable

(bool) If set to
’’YES’’, run the IPXrouted(8) daemon
at system boot time.

ipxrouted_flags

(str) If
ipxrouted_enable is set to
’’YES’’, these are the flags to pass
to the IPXrouted(8) daemon.

arpproxy_all

(bool) If set to
’’YES’’, enable global proxy
ARP.

forward_sourceroute

(bool) If set to
’’YES’’ and gateway_enable is
also set to ’’YES’’, source-routed
packets are forwarded.

accept_sourceroute

(bool) If set to
’’YES’’, the system will accept
source-routed packets directed at it.

rarpd_enable

(bool) If set to
’’YES’’, run the rarpd(8) daemon at
system boot time.

rarpd_flags

(str) If
rarpd_enable is set to
’’YES’’, these are the flags to pass
to the rarpd(8) daemon.

bootparamd_enable

(bool) If set to
’’YES’’, run the bootparamd(8)
daemon at system boot time.

bootparamd_flags

(str) If
bootparamd_enable is set to
’’YES’’, these are the flags to pass
to the bootparamd(8) daemon.

stf_interface_ipv4addr

(str) If not set to
’’NO’’, this is the local IPv4
address for 6to4 (IPv6 over IPv4 tunneling interface).
Specify this entry to enable the 6to4 interface.

stf_interface_ipv4plen

(int) Prefix length for
6to4 IPv4 addresses, to limit peer address range. An
effective value is 0-31.

stf_interface_ipv6_ifid

(str) IPv6 interface ID
for stf(4). This can be set to
’’AUTO’’.

stf_interface_ipv6_slaid

(str) IPv6 Site Level
Aggregator for stf(4).

ipv6_faith_prefix

(str) If not set to
’’NO’’, this is the faith prefix to
enable a FAITH IPv6-to-IPv4 TCP translator. You also need
faithd(8) setup.

ipv6_ipv4mapping

(bool) If set to
’’YES’’ this enables IPv4 mapped
IPv6 address communication (like ::ffff:a.b.c.d).

atm_enable

(bool)
Set to ’’YES’’ to enable the
configuration of ATM interfaces at system boot time. For all
of the ATM variables described below, please refer to the
atm(8) man page for further details on the available command
parameters. Also refer to the files in
/usr/share/examples/atm for more detailed
configuration information.

atm_load

(str)
This is a list of physical ATM interface drivers to load.
Typical values are ’’hfa_pci’’
and/or ’’hea_pci’’.

atm_netif_⟨
intf⟩

(str) For the ATM
physical interface intf, this variable defines the
name prefix and count for the ATM network interfaces to be
created. The value will be passed as the parameters of an
’’atm set netif intf’’
command.

atm_sigmgr_⟨
intf⟩

(str) For the ATM
physical interface intf, this variable defines the
ATM signalling manager to be used. The value will be passed
as the parameters of an ’’atm attach
intf’’ command.

atm_prefix_⟨
intf⟩

(str) For the ATM
physical interface intf, this variable defines the
NSAP prefix for interfaces using a UNI signalling manager.
If set to ’’ILMI’’, the prefix will
automatically be set via the ilmid(8) daemon. Otherwise, the
value will be passed as the parameters of an
’’atm set prefix
intf’’ command.

atm_macaddr_⟨
intf⟩

(str) For the ATM
physical interface intf, this variable defines the
MAC address for interfaces using a UNI signalling manager.
If set to ’’NO’’, the hardware MAC
address contained in the ATM interface card will be used.
Otherwise, the value will be passed as the parameters of an
’’atm set mac intf’’
command.

atm_arpserver_⟨
netif⟩

(str) For the ATM
network interface netif, this variable defines the
ATM address for a host which is to provide ATMARP service.
This variable is only applicable to interfaces using a UNI
signalling manager. If set to
’’local’’, this host will become an
ATMARP server. The value will be passed as the parameters of
an ’’atm set arpserver
netif’’ command.

atm_scsparp_⟨
netif⟩

(bool) If set to
’’YES’’, SCSP/ATMARP service for the
network interface netif will be initiated using the
scspd(8) and atmarpd(8) daemons. This variable is only
applicable if atm_arpserver_⟨ netif⟩
is set to ’’local’’.

atm_pvcs

(str)
Set to the list of ATM PVCs to be added at system boot time.
For each whitespace separated element in the value,
an atm_pvc_⟨ element⟩ variable is
assumed to exist. The value of each of these variables will
be passed as the parameters of an ’’atm add
pvc’’ command.

atm_arps

(str)
Set to the list of permanent ATM ARP entries to be added at
system boot time. For each whitespace separated
element in the value, an atm_arp_⟨
element⟩ variable is assumed to exist. The value
of each of these variables will be passed as the parameters
of an ’’atm add arp’’
command.

natm_interfaces

(str) Set to the list of
natm(4) interfaces that will also be used for HARP through
harp(4). If this list is not empty all interfaces in the
list will be brought up with ifconfig(8) and harp(4) will be
loaded. For this to work the interface drivers must be
either compiled into the kernel or must reside on the root
partition.

keybell

(str)
The keyboard bell sound. Set to
’’normal’’,
’’visual’’,
’’off’’, or
’’NO’’ if the default behavior is
desired. For details, refer to the kbdcontrol(1)
manpage.

keyboard

(str) If
set to a non-null string, the virtual console’s
keyboard input is set to this device.

keymap

(str) If
set to ’’NO’’, no keymap is
installed, otherwise the value is used to install the keymap
file in /usr/share/syscons/keymaps/⟨

value ⟩ .kbd.

keyrate

(str)
The keyboard repeat speed. Set to
’’slow’’,
’’normal’’,
’’fast’’, or
’’NO’’ if the default behavior is
desired.

keychange

(str) If
not set to ’’NO’’, attempt to
program the function keys with the value. The value should
be a single string of the form:
’’funkey_number new_value
[funkey_number new_value ...]’’.

cursor

(str)
Can be set to the value of
’’normal’’,
’’blink’’,
’’destructive’’, or
’’NO’’ to set the cursor behavior
explicitly or choose the default behavior.

scrnmap

(str) If
set to ’’NO’’, no screen map is
installed, otherwise the value is used to install the screen
map file in /usr/share/syscons/scrnmaps/⟨
value⟩ .

font8x16

(str) If
set to ’’NO’’, the default 8x16 font
value is used for screen size requests, otherwise the value
in /usr/share/syscons/fonts/⟨ value⟩
is used.

font8x14

(str) If
set to ’’NO’’, the default 8x14 font
value is used for screen size requests, otherwise the value
in /usr/share/syscons/fonts/⟨ value⟩
is used.

font8x8

(str) If
set to ’’NO’’, the default 8x8 font
value is used for screen size requests, otherwise the value
in /usr/share/syscons/fonts/⟨ value⟩
is used.

blanktime

(int) If
set to ’’NO’’, the default screen
blanking interval is used, otherwise it is set to
value seconds.

saver

(str) If
not set to ’’NO’’, this is the
actual screen saver to use (blank, snake, daemon, etc).

moused_enable

(str) If set to
’’YES’’, the moused(8) daemon is
started for doing cut/paste selection on the console.

moused_type

(str) This is the
protocol type of the mouse connected to this host. This
variable must be set if moused_enable is set to
’’YES’’. The moused(8) daemon is
able to detect the appropriate mouse type automatically in
many cases. Set this variable to
’’auto’’ to let the daemon detect
it, or select one from the following list if the automatic
detection fails.

If the mouse is
attached to the PS/2 mouse port, choose
’’auto’’ or
’’ps/2’’, regardless of the brand
and model of the mouse. Likewise, if the mouse is attached
to the bus mouse port, choose
’’auto’’ or
’’busmouse’’. All other protocols
are for serial mice and will not work with the PS/2 and bus
mice. If this is a USB mouse,
’’auto’’ is the only protocol type
which will work.

microsoft

Microsoft mouse
(serial)

intellimouse

Microsoft
IntelliMouse (serial)

mousesystems

Mouse systems
Corp. mouse (serial)

mmseries

MM Series mouse
(serial)

logitech

Logitech mouse
(serial)

busmouse

A bus mouse

mouseman

Logitech
MouseMan and TrackMan (serial)

glidepoint

ALPS GlidePoint
(serial)

thinkingmouse

Kensington
ThinkingMouse (serial)

ps/2

PS/2 mouse

mmhittab

MM HitTablet
(serial)

x10mouseremote

X10 MouseRemote
(serial)

versapad

Interlink
VersaPad (serial)

Even if the
mouse is not in the above list, it may be compatible with
one in the list. Refer to the man page for moused(8) for
compatibility information.

It should also
be noted that while this is enabled, any other client of the
mouse (such as an X server) should access the mouse through
the virtual mouse device, /dev/sysmouse, and
configure it as a ’’sysmouse’’ type
mouse, since all mouse data is converted to this single
canonical format when using moused(8). If the client program
does not support the ’’sysmouse’’
type, specify the ’’mousesystems’’
type. It is the second preferred type.

moused_port

(str) If
moused_enable is set to
’’YES’’, this is the actual port the
mouse is on. It might be /dev/cuaa0 for a COM1 serial
mouse, /dev/psm0 for a PS/2 mouse or /dev/mse0
for a bus mouse, for example.

moused_flags

(str) If
moused_type is set, these are the additional flags to
pass to the moused(8) daemon.

mousechar_start

(int) If set to
’’NO’’, the default mouse cursor
character range 0xd0-0xd3 is used, otherwise the range start
is set to value character, see vidcontrol(1). Use if
the default range is occupied in the language code
table.

allscreens_flags

(str) If set,
vidcontrol(1) is run with these options for each of the
virtual terminals (/dev/ttyv*). For example,
’’−m on’’ will enable
the mouse pointer on all virtual terminals if
moused_enable is set to
’’YES’’.

allscreens_kbdflags

(str) If set,
kbdcontrol(1) is run with these options for each of the
virtual terminals (/dev/ttyv*). For example,
’’−h 200’’ will set the
syscons(4) scrollback (history) buffer to 200 lines.

cron_enable

(bool) If set to
’’YES’’, run the cron(8) daemon at
system boot time.

cron_program

(str) Path to cron(8)
(default /usr/sbin/cron).

cron_flags

(str) If
cron_enable is set to
’’YES’’, these are the flags to pass
to cron(8).

cron_dst

(bool)
If set to ’’YES’’, enable the
special handling of transitions to and from the Daylight
Saving Time in cron(8) (equivalent to using the flag
−s).

lpd_program

(str) Path to lpd(8)
(default /usr/sbin/lpd).

lpd_enable

(bool)
If set to ’’YES’’, run the lpd(8)
daemon at system boot time.

lpd_flags

(str) If
lpd_enable is set to ’’YES’’,
these are the flags to pass to the lpd(8) daemon.

mta_start_script

(str) This variable
specifies the full path to the script to run to start a mail
transfer agent. The default is /etc/rc.sendmail. The
sendmail_* variables which /etc/rc.sendmail
uses are documented in the rc.sendmail(8) man page.

dumpdev

(str)
Indicates the device (usually a swap partition) to which a
crash dump should be written in the event of a system crash.
The value of this variable is passed as the argument to
dumpon(8). To disable crash dumps, set this variable to
’’NO’’.

dumpdir

(str)
When the system reboots after a crash and a crash dump is
found on the device specified by the dumpdev
variable, savecore(8) will save that crash dump and a copy
of the kernel to the directory specified by the
dumpdir variable. The default value is
/var/crash. Set to ’’NO’’ to
not run savecore(8) at boot time when dumpdir is
set.

savecore_flags

(str) If crash dumps are
enabled, these are the flags to pass to the savecore(8)
utility.

enable_quotas

(bool) Set to
’’YES’’ to turn on user disk quotas
on system startup via the quotaon(8) command.

check_quotas

(bool) Set to
’’YES’’ to enable user disk quota
checking via the quotacheck(8) command.

accounting_enable

(bool) Set to
’’YES’’ to enable system accounting
through the accton(8) facility.

ibcs2_enable

(bool) Set to
’’YES’’ to enable iBCS2 (SCO) binary
emulation at system initial boot time.

ibcs2_loaders

(str) If not set to
’’NO’’ and if ibcs2_enable is
set to ’’YES’’, this specifies a
list of additional iBCS2 loaders to enable.

linux_enable

(bool) Set to
’’YES’’ to enable Linux/ELF binary
emulation at system initial boot time.

osf1_enable

(bool) Set to
’’YES’’ to enable OSF/1 (Digital
UNIX) binary emulation at system initial boot time.
(alpha)

svr4_enable

(bool) If set to
’’YES’’, enable SysVR4 emulation at
boot time.

sysvipc_enable

(bool) If set to
’’YES’’, load System V IPC
primitives at boot time.

clear_tmp_enable

(bool) Set to
’’YES’’ to have /tmp cleaned
at startup.

ldconfig_paths

(str) Set to the list of
shared library paths to use with ldconfig(8). NOTE:
/usr/lib will always be added first, so it need not
appear in this list.

ldconfig_paths_aout

(str) Set to the list of
shared library paths to use with ldconfig(8) legacy a.out(5)
support.

ldconfig_insecure

(bool) The ldconfig(8)
utility normally refuses to use directories which are
writable by anyone except root. Set this variable to
’’YES’’ to disable that security
check during system startup.

kern_securelevel_enable

(bool) Set to
’’YES’’ to set the kernel security
level at system startup.

kern_securelevel

(int) The kernel
security level to set at startup. The allowed range of
value ranges from −1 (the compile time default)
to 3 (the most secure). See init(8) for the list of possible
security levels and their effect on system operation.

lomac_enable

(bool) Set to
’’YES’’ to enable Low Watermark
Mandatory Access Control (LOMAC) at boot time. This security
model enforces integrity constraints for system processes;
see lomac(4) for a complete description of the LOMAC model,
as well as its impact on system operation.

start_vinum

(bool) Set to
’’YES’’ to start vinum(8) at system
boot time.

sshd_program

(str) Path to the SSH
server program (/usr/sbin/sshd is the default).

sshd_enable

(bool) Set to
’’YES’’ to start sshd(8) at system
boot time.

sshd_flags

(str) If
sshd_enable is set to
’’YES’’, these are the flags to pass
to the sshd(8) daemon.

usbd_enable

(bool) If set to
’’YES’’, run the usbd(8) daemon at
boot time.

usbd_flags

(str) If
usbd_enable is set to
’’YES’’, these are the flags passed
to the usbd(8) daemon.

watchdogd_enable

(bool) If set to
’’YES’’, start the watchdogd(8)
daemon at boot time. This requires that the kernel have been
compiled with a watchdog(4) compatible device.

watchdogd_flags

(str) If
watchdogd_enable is set to
’’YES’’, these are the flags passed
to the watchdogd(8) daemon.

jail_enable

(bool) If set to
’’NO’’, any configured jails will
not be started.

jail_list

(str) A
space separated list of names for jails. This is purely a
configuration aid to help identify and configure multiple
jails. The names specified in this list will be used to
identify settings common to an instance of a jail. Assuming
that the jail in question was named vjail, you would have
the following dependant variables:

jail_vjail_hostname="jail.example.com"

jail_vjail_ip="192.168.1.100" 
jail_vjail_rootdir="/var/jails/vjail/root" 
jail_vjail_exec="/bin/sh /etc/rc"

The last one is
optional. It defaults to /etc/rc if it is not
set.

jail_set_hostname_allow

(bool) If set to
’’NO’’, do not allow the root user
in a jail to set its hostname.

jail_socket_unixiproute_only

(bool) If set to
’’NO’’, do not allow any protocol,
besides TCP/IP, to be used within a jail.

jail_sysvipc_allow

(bool) If set to
’’YES’’, allow applications within a
jail to use System V IPC.

unaligned_print

(bool) If set to
’’NO’’, unaligned access warnings
will not be printed. (alpha)

isdn_enable

(bool) Set to
’’NO’’ by default. When set to
’’YES’’, starts the isdnd(8) daemon
at system boot time.

isdn_flags

(str)
Set to ’’−dn
−d0x1f9’’ by default. Additional flags
to pass to isdnd(8) (but see isdn_fsdev and
isdn_ttype for certain tunable parameters).

isdn_ttype

(str)
Set to ’’cons25’’ by default. The
terminal type of the output device when isdnd(8) operates in
full-screen mode.

isdn_screenflags

(str) Set to
’’NO’’ by default. The video mode
for full-screen mode (only for syscons(4) console driver,
see vidcontrol(1) for valid modes).

isdn_fsdev

(str)
Set to ’’NO’’ by default. The output
device for isdnd(8) in full-screen mode (or
’’NO’’ for daemon mode).

isdn_trace

(bool)
Set to ’’NO’’ by default. When set
to ’’YES’’, enables the ISDN
protocol trace utility isdntrace(8) at system boot time.

isdn_traceflags

(str) Set to
’’−f
/var/tmp/isdntrace0’’ by default. Flags
for isdntrace(8).

pcvt_verbose

(bool) Set to
’’NO’’ by default. When set to
’’YES’’, verbose messages about the
actions done by the start script are displayed. Note:
the pcvt(4) driver must be compiled into the kernel before
the pcvt(4) related options described here take any
effect.

pcvt_keymap

(str) Set to
’’NO’’ by default. Use this to
configure a national keyboard mapping found in the
/usr/share/misc/keycap.pcvt file of keyboard
mappings. (See also the manual pages keycap(5) and keycap(3)
for usage of pcvt(4)’s keycap database and the manual
page kcon(1) option −m for national keyboard
mapping configuration.)

pcvt_keydel

(int) Set to
’’NO’’ by default. Used to set the
keyboard key repeat delay value. Valid values are in the
range 0..3 for delay values of 250, 500, 750 and 1000 msec.
(See also the kcon(1) manual page.)

pcvt_keyrate

(int) Set to
’’NO’’ by default. Used to set the
keyboard key repetition rate value. Valid values are in the
range 0..31 for repetition values of 2..30 characters per
second.

pcvt_keyrepeat

(bool) Set to
’’NO’’ by default. Set to
’’YES’’ to enable automatic keyboard
key repeating.

pcvt_force24

(bool) Set to
’’NO’’ by default. Set to
’’YES’’ to force pcvt(4) to use 24
lines only (in 25 lines mode) for compatibility with the
original VT220 terminal.

pcvt_hpext

(bool)
Set to ’’NO’’ by default. Set to
’’YES’’ to enable the display and
functionality of function key labels (as found on
Hewlett-Packard terminals such as the HP2392A and the
HP700/92 in ANSI mode).

pcvt_lines

(int)
Set to ’’NO’’ by default resulting
in a value of 25. Used to set the number of lines on the
screen. For VGA displays, valid values are 25, 28, 40 and 50
lines. (See also the scon(1) manual page.)

pcvt_blanktime

(int) Set to
’’NO’’ by default. Used to set the
screen saver timeout in seconds for values greater than
zero.

pcvt_cursorh

(int) Set to
’’NO’’ by default. Used to set the
cursor top scanline. (See also the cursor(1) manual
page.)

pcvt_cursorl

(int) Set to
’’NO’’ by default. Used to set the
cursor bottom scanline.

pcvt_monohigh

(bool) Set to
’’NO’’ by default. Set to
’’YES’’ to set intensity to high on
monochrome monitors. (See also the scon(1) manual page,
option −p, for more information on changing VGA
palette values.)

harvest_interrupt

(bool) Set to
’’YES’’ to use hardware interrupts
as an entropy source. Refer to random(4) for more
information.

harvest_ethernet

(bool) Set to
’’YES’’ to use LAN traffic as an
entropy source. Refer to random(4) for more information.

harvest_p_to_p

(bool) Set to
’’YES’’ to use serial line traffic
as an entropy source. Refer to random(4) for more
information.

entropy_dir

(str) Set to
’’NO’’ to disable caching entropy
via cron(8). Otherwise set to the directory used to store
entropy files in.

entropy_file

(str) Set to
’’NO’’ to disable caching entropy
through reboots. Otherwise set to the filename used to store
cached entropy through reboots. This file should be located
on the root file system to seed the random(4) device as
early as possible in the boot process.

entropy_save_sz

(int) Size of the
entropy cache files saved by save-entropy
periodically.

entropy_save_num

(int) Number of entropy
cache files to save by save-entropy periodically.

ipsec_enable

(bool) Set to
’’YES’’ to run setkey(8) on
ipsec_file at boot time.

ipsec_file

(str)
Configuration file for setkey(8).

dmesg_enable

(bool) Set to
’’YES’’ to save dmesg(8) to
/var/run/dmesg.boot on boot.

rcshutdown_timeout

(int) If set, start a
watchdog timer in the background which will terminate
rc.shutdown if shutdown(8) has not completed within
the specified time (in seconds).

virecover_enable

(bool) Set to
’’NO’’ to prevent the system from
trying to recover pre-maturely terminated vi(1)
sessions.

ugidfw_enable

’’NO’’
Load the mac_bsdextended(4) module upon system
initialization and load a default ruleset file.

bsdextended_script

’’/etc/rc.bsdextended’’
The default mac_bsdextended(4) ruleset file to load.

swapoff

(bool)
Set to ’’YES’’ to remove swap
partitions upon shutdown.

ramdisk_units

(str) A list of one or
more ramdisk units to configure with mdconfig(8) and
newfs(8) in time to be mounted from fstab(5). Each listed
unit X must specify at least a type in a
ramdisk_⟨

X ⟩ _config variable.

ramdisk_⟨ 
X⟩ _config

(str) Arguments to
mdconfig(8) for ramdisk X. At minimum a
−t type must be specified, where
type must be one of malloc or swap.

ramdisk_⟨ 
X⟩ _newfs

(str) Optional arguments
passed to newfs(8) to initialize ramdisk X.

ramdisk_⟨ 
X⟩ _owner

(str) An ownership
specification passed to chown(8) after the specified ramdisk
unit X has been mounted. Both the md(4) device and
the mount point will be changed.

ramdisk_⟨ 
X⟩ _perms

(str) A mode string
passed to chmod(1) after the specified ramdisk unit X
has been mounted. Both the md(4) device and the mount point
will be changed.

FILES 
/etc/defaults/rc.conf 
/etc/rc.conf 
/etc/rc.conf.local 
SEE ALSO

catman(1), chmod(1), gdb(1),
info(1), kbdcontrol(1), makewhatis(1), vi(1), vidcontrol(1),
ip(4), kld(4), tcp(4), udp(4), exports(5), motd(5),
newsyslog.conf(5), accton(8), amd(8), apm(8), atm(8),
chown(8), cron(8), dhclient(8), ifconfig(8), inetd(8),
isdnd(8), isdntrace(8), kldxref(8), lpd(8), mdconfig(8),
mountd(8), moused(8), mrouted(8), named(8), newfs(8),
nfsd(8), ntpd(8), ntpdate(8), pcnfsd(8), quotacheck(8),
quotaon(8), rc(8), rc.sendmail(8), route(8), routed(8),
rpcbind(8), rpc.lockd(8), rpc.statd(8), rwhod(8),
savecore(8), sshd(8), swapon(8), sysctl(8), syslogd(8),
timed(8), usbd(8), vinum(8), yp(8), ypbind(8), ypserv(8),
ypset(8)

HISTORY

The rc.conf file appeared
in FreeBSD 2.2.2.

AUTHORS

Jordan K. Hubbard.

BSD
October 28, 2004 BSD