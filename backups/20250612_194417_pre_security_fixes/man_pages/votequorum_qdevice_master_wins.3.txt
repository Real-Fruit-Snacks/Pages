NAME

votequorum_qdevice_master_wins
- Sets or clears quorum device master_wins flag

SYNOPSIS

#include

int
votequorum_qdevice_master_wins(votequorum_handle_t
handle const char name, unsigned
int allow);

DESCRIPTION

The
votequorum_qdevice_master_wins informs votequorum
whether or not the currently registered qdevice subsystem
supports ’master_wins’ mode (default 0). This
mode allows the qdevice to effectively take over the quorum
calculations of votequorum. Any node with an active qdevice
that also has master_wins set becomes quorate regardless of
the node votes of the cluster. It is left up to the qdevice
subsystem itself (not part of votequorum) to communicate
across the nodes or otherwise provide some system of
deciding which nodes will be part of the quorate cluster, if
any. eg They may be the set of nodes that has access to a
quorum disk. 
name The name of the currently registered quorum device
on this node. This must match the existing name known to
votequorum. 
allow 0 (the default) means that master_wins is not
active on this node. 1 means that master_wins is active on
this node.

RETURN VALUE

This call
returns the CS_OK value if successful, otherwise an error is
returned.

ERRORS

CS_ERR_TRY_AGAIN
Resource temporarily unavailable

CS_ERR_INVALID_PARAM
Invalid argument

CS_ERR_ACCESS
Permission denied

CS_ERR_LIBRARY
The connection failed

CS_ERR_INTERRUPT
System call interrupted by a signal

CS_ERR_NOT_SUPPORTED
The requested protocol/functionality not supported

CS_ERR_MESSAGE_ERROR
Incorrect auth message received

CS_ERR_NO_MEMORY
Not enough memory to complete the requested task

SEE ALSO

votequorum_overview(3),
votequorum_initialize(3),
votequorum_finalize(3), votequorum_getinfo(3),
votequorum_trackstart(3),
votequorum_trackstop(3), votequorum_fd_get(3),
votequorum_dispatch(3),
votequorum_context_set(3),
votequorum_context_get(3),
votequorum_setexpected(3),
votequorum_setvotes(3),
votequorum_qdevice_register(3),
votequorum_qdevice_poll(3),
votequorum_qdevice_update(3),