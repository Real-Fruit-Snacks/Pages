NAME

malloc_info -
export malloc state to a stream

SYNOPSIS

#include

int
malloc_info(int options, FILE
*stream);

DESCRIPTION

The
malloc_info() function exports an XML string that
describes the current state of the memory-allocation
implementation in the caller. The string is printed on the
file stream stream. The exported string includes
information about all arenas (see malloc(3)).

As currently
implemented, options must be zero.

RETURN VALUE

On success,
malloc_info() returns 0; on error, it returns -1,
with errno set to indicate the cause.

ERRORS

EINVAL

options was nonzero.

VERSIONS

malloc_info()
was added to glibc in version 2.10.

ATTRIBUTES

For an
explanation of the terms used in this section, see
attributes(7).

CONFORMING TO

This function
is a GNU extension.

NOTES

The
memory-allocation information is provided as an XML string
(rather than a C structure) because the information may
change over time (according to changes in the underlying
implementation). The output XML string includes a version
field.

The
open_memstream(3) function can be used to send the
output of malloc_info() directly into a buffer in
memory, rather than to a file.

The
malloc_info() function is designed to address
deficiencies in malloc_stats(3) and
mallinfo(3).

EXAMPLES

The program
below takes up to four command-line arguments, of which the
first three are mandatory. The first argument specifies the
number of threads that the program should create. All of the
threads, including the main thread, allocate the number of
blocks of memory specified by the second argument. The third
argument controls the size of the blocks to be allocated.
The main thread creates blocks of this size, the second
thread created by the program allocates blocks of twice this
size, the third thread allocates blocks of three times this
size, and so on.

The program
calls malloc_info() twice to display the
memory-allocation state. The first call takes place before
any threads are created or memory allocated. The second call
is performed after all threads have allocated memory.

In the
following example, the command-line arguments specify the
creation of one additional thread, and both the main thread
and the additional thread allocate 10000 blocks of memory.
After the blocks of memory have been allocated,
malloc_info() shows the state of two allocation
arenas.

$ getconf
GNU_LIBC_VERSION 
glibc 2.13 
$ ./a.out 1 10000 100 
============ Before allocating blocks ============ 

============
After allocating blocks ============ 

Program
source
#include 
#include 
#include 
#include 
#include 

static size_t blockSize;
static int numThreads, numBlocks;

#define errExit(msg)    do { perror(msg); exit(EXIT_FAILURE); \
                        } while (0)

static void *
thread_func(void *arg)
{
    int tn = (int) arg;

    /* The multiplier '(2 + tn)' ensures that each thread (including
       the main thread) allocates a different amount of memory */

    for (int j = 0; j sleep(100);         /* Sleep until main thread terminates */
    return NULL;
}

int
main(int argc, char *argv[])
{
    int sleepTime;

    if (argc  4) ? atoi(argv[4]) : 0;

    pthread_t *thr = calloc(numThreads, sizeof(*thr));
    if (thr == NULL)
        errExit("calloc");

    printf("============ Before allocating blocks ============\n");
    malloc_info(0, stdout);

    /* Create threads that allocate different amounts of memory */

    for (int tn = 0; tn malloc(3)). */

        if (sleepTime > 0)
            sleep(sleepTime);
    }

    /* The main thread also allocates some memory */

    for (int j = 0; j sleep(2);           /* Give all threads a chance to
                           complete allocations */

    printf("\n============ After allocating blocks ============\n");
    malloc_info(0, stdout);

    exit(EXIT_SUCCESS);
}

SEE ALSO

mallinfo(3),
malloc(3), malloc_stats(3), mallopt(3),
open_memstream(3)

COLOPHON

This page is
part of release 5.09 of the Linux man-pages project.
A description of the project, information about reporting
bugs, and the latest version of this page, can be found at
https://www.kernel.org/doc/man-pages/.