Eric Paris Jan 2015

NAME

kubectl debug -
Create debugging sessions for troubleshooting workloads and
nodes

SYNOPSIS

kubectl
debug [OPTIONS]

DESCRIPTION

Debug cluster
resources using interactive debugging containers.

’debug’
provides automation for common debugging tasks for cluster
objects identified by resource and name. Pods will be used
by default if no resource is specified.

The action
taken by ’debug’ varies depending on what
resource is specified. Supported actions include:

•

Workload: Create a copy of an existing pod with certain
attributes changed, for example changing the image tag to a
new version.

•

Workload: Add an ephemeral container to an already
running pod, for example to add debugging utilities without
restarting the pod.

•

Node: Create a new pod that runs in the node’s
host namespaces and can access the node’s
filesystem. 

OPTIONS

--arguments-only=false
If specified, everything after -- will be passed to the new
container as Args instead of Command.

--attach=false
If true, wait for the container to start running, and then
attach as if ’kubectl attach ...’ were called.
Default false, unless ’-i/--stdin’ is set, in
which case the default is true.

-c,
--container="" Container name to use for
debug container.

--copy-to=""
Create a copy of the target Pod with this name.

--env=[]
Environment variables to set in the container.

--image=""
Container image to use for debug container.

--image-pull-policy=""
The image pull policy for the container. If left empty, this
value will not be specified by the client and defaulted by
the server.

--quiet=false
If true, suppress informational messages.

--replace=false
When used with ’--copy-to’, delete the original
Pod.

--same-node=false
When used with ’--copy-to’, schedule the copy of
target Pod on the same node.

--set-image=[]
When used with ’--copy-to’, a list of name=image
pairs for changing container images, similar to how
’kubectl set image’ works.

--share-processes=true
When used with ’--copy-to’, enable process
namespace sharing in the copy.

-i,
--stdin=false Keep stdin open on the container(s) in
the pod, even if nothing is attached.

--target=""
When using an ephemeral container, target processes in this
container name.

-t,
--tty=false Allocate a TTY for the debugging
container.

OPTIONS INHERITED FROM PARENT COMMANDS

--add-dir-header=false
If true, adds the file directory to the header of the log
messages

--alsologtostderr=false
log to standard error as well as files

--application-metrics-count-limit=100
Max number of application metrics to store (per
container)

--as=""
Username to impersonate for the operation

--as-group=[]
Group to impersonate for the operation, this flag can be
repeated to specify multiple groups.

--azure-container-registry-config=""
Path to the file containing Azure container registry
configuration information.

--boot-id-file="/proc/sys/kernel/random/boot_id"
Comma-separated list of files to check for boot-id. Use the
first one that exists.

--cache-dir="/home/user/.kube/cache"
Default cache directory

--certificate-authority=""
Path to a cert file for the certificate authority

--client-certificate=""
Path to a client certificate file for TLS

--client-key=""
Path to a client key file for TLS

--cloud-provider-gce-l7lb-src-cidrs=130.211.0.0/22,35.191.0.0/16
CIDRs opened in GCE firewall for L7 LB traffic proxy health
checks

--cloud-provider-gce-lb-src-cidrs=130.211.0.0/22,209.85.152.0/22,209.85.204.0/22,35.191.0.0/16
CIDRs opened in GCE firewall for L4 LB traffic proxy health
checks

--cluster=""
The name of the kubeconfig cluster to use

--container-hints="/etc/cadvisor/container_hints.json"
location of the container hints file

--containerd="/run/containerd/containerd.sock"
containerd endpoint

--containerd-namespace="k8s.io"
containerd namespace

--context=""
The name of the kubeconfig context to use

--default-not-ready-toleration-seconds=300
Indicates the tolerationSeconds of the toleration for
notReady:NoExecute that is added by default to every pod
that does not already have such a toleration.

--default-unreachable-toleration-seconds=300
Indicates the tolerationSeconds of the toleration for
unreachable:NoExecute that is added by default to every pod
that does not already have such a toleration.

--disable-root-cgroup-stats=false
Disable collecting root Cgroup stats

--docker="unix:///var/run/docker.sock"
docker endpoint

--docker-env-metadata-whitelist=""
a comma-separated list of environment variable keys matched
with specified prefix that needs to be collected for docker
containers

--docker-only=false
Only report docker containers in addition to root stats

--docker-root="/var/lib/docker"
DEPRECATED: docker root is read from docker info (this is a
fallback, default: /var/lib/docker)

--docker-tls=false
use TLS to connect to docker

--docker-tls-ca="ca.pem"
path to trusted CA

--docker-tls-cert="cert.pem"
path to client certificate

--docker-tls-key="key.pem"
path to private key

--enable-load-reader=false
Whether to enable cpu load reader

--event-storage-age-limit="default=0"
Max length of time for which to store events (per type).
Value is a comma separated list of key values, where the
keys are event types (e.g.: creation, oom) or
"default" and the value is a duration. Default is
applied to all non-specified event types

--event-storage-event-limit="default=0"
Max number of events to store (per type). Value is a comma
separated list of key values, where the keys are event types
(e.g.: creation, oom) or "default" and the value
is an integer. Default is applied to all non-specified event
types

--global-housekeeping-interval=1m0s
Interval between global housekeepings

--housekeeping-interval=10s
Interval between container housekeepings

--insecure-skip-tls-verify=false
If true, the server’s certificate will not be checked
for validity. This will make your HTTPS connections
insecure

--kubeconfig=""
Path to the kubeconfig file to use for CLI requests.

--log-backtrace-at=:0
when logging hits line file:N, emit a stack trace

--log-cadvisor-usage=false
Whether to log the usage of the cAdvisor container

--log-dir=""
If non-empty, write log files in this directory

--log-file=""
If non-empty, use this log file

--log-file-max-size=1800
Defines the maximum size a log file can grow to. Unit is
megabytes. If the value is 0, the maximum file size is
unlimited.

--log-flush-frequency=5s
Maximum number of seconds between log flushes

--logtostderr=true
log to standard error instead of files

--machine-id-file="/etc/machine-id,/var/lib/dbus/machine-id"
Comma-separated list of files to check for machine-id. Use
the first one that exists.

--match-server-version=false
Require server version to match client version

-n,
--namespace="" If present, the namespace
scope for this CLI request

--one-output=false
If true, only write logs to their native severity level (vs
also writing to each lower severity level

--password=""
Password for basic authentication to the API server

--profile="none"
Name of profile to capture. One of
(none|cpu|heap|goroutine|threadcreate|block|mutex)

--profile-output="profile.pprof"
Name of the file to write the profile to

--referenced-reset-interval=0
Reset interval for referenced bytes
(container_referenced_bytes metric), number of measurement
cycles after which referenced bytes are cleared, if set to 0
referenced bytes are never cleared (default: 0)

--request-timeout="0"
The length of time to wait before giving up on a single
server request. Non-zero values should contain a
corresponding time unit (e.g. 1s, 2m, 3h). A value of zero
means don’t timeout requests.

-s,
--server="" The address and port of the
Kubernetes API server

--skip-headers=false
If true, avoid header prefixes in the log messages

--skip-log-headers=false
If true, avoid headers when opening log files

--stderrthreshold=2
logs at or above this threshold go to stderr

--storage-driver-buffer-duration=1m0s
Writes in the storage driver will be buffered for this
duration, and committed to the non memory backends as a
single transaction

--storage-driver-db="cadvisor"
database name

--storage-driver-host="localhost:8086"
database host:port

--storage-driver-password="root"
database password

--storage-driver-secure=false
use secure connection with database

--storage-driver-table="stats"
table name

--storage-driver-user="root"
database username

--tls-server-name=""
Server name to use for server certificate validation. If it
is not provided, the hostname used to contact the server is
used

--token=""
Bearer token for authentication to the API server

--update-machine-info-interval=5m0s
Interval between machine info updates.

--user=""
The name of the kubeconfig user to use

--username=""
Username for basic authentication to the API server

-v,
--v=0 number for the log level verbosity

--version=false
Print version information and quit

--vmodule=
comma-separated list of pattern=N settings for file-filtered
logging

--warnings-as-errors=false
Treat warnings received from the server as errors and exit
with a non-zero exit code

EXAMPLE

# Create an
interactive debugging session in pod mypod and immediately
attach to it. 
# (requires the EphemeralContainers feature to be enabled in
the cluster) 
kubectl debug mypod -it --image=busybox

# Create a
debug container named debugger using a custom automated
debugging image. 
# (requires the EphemeralContainers feature to be enabled in
the cluster) 
kubectl debug --image=myproj/debug-tools -c debugger
mypod

# Create a copy
of mypod adding a debug container and attach to it 
kubectl debug mypod -it --image=busybox
--copy-to=my-debugger

# Create a copy
of mypod changing the command of mycontainer 
kubectl debug mypod -it --copy-to=my-debugger
--container=mycontainer -- sh

# Create a copy
of mypod changing all container images to busybox 
kubectl debug mypod --copy-to=my-debugger
--set-image=*=busybox

# Create a copy
of mypod adding a debug container and changing container
images 
kubectl debug mypod -it --copy-to=my-debugger --image=debian
--set-image=app=app:debug,sidecar=sidecar:debug

# Create an
interactive debugging session on a node and immediately
attach to it. 
# The container will run in the host namespaces and the
host’s filesystem will be mounted at /host 
kubectl debug node/mynode -it --image=busybox

SEE ALSO

kubectl(1),

HISTORY

January 2015,
Originally compiled by Eric Paris (eparis at redhat dot com)
based on the kubernetes source material, but hopefully they
have been automatically generated since!