NEWFS(8) BSD System Manager’s Manual NEWFS(8)

NAME

newfs — construct a
new UFS1/UFS2 file system

SYNOPSIS

newfs
[−JNUln] [−L volname]
[−O filesystem-type]
[−S sector-size]
[−T disktype]
[−a maxcontig]
[−b block-size]
[−c blocks-per-cylinder-group]
[−d max-extent-size]
[−e maxbpg]
[−f frag-size]
[−g avgfilesize]
[−h avgfpdir]
[−i bytes]
[−m free-space]
[−o optimization]
[−s size] special

DESCRIPTION

The newfs utility is used
to initialize and clear file systems before first use.
Before running newfs the disk must be labeled using
bsdlabel(8). The newfs utility builds a file system
on the specified special file. (We often refer to the
’’special file’’ as the
’’disk’’, although the special file
need not be a physical disk. In fact, it need not even be
special.) Typically the defaults are reasonable, however
newfs has numerous options to allow the defaults to
be selectively overridden.

The following
options define the general layout policies:

−J

Enable
journaling on the new file system via gjournal.

−L
volname

Add a volume label to the new
file system.

−N

Cause the file
system parameters to be printed out without really creating
the file system.

−O
filesystem-type

Use 1 to specify that a UFS1
format file system be built; use 2 to specify that a UFS2
format file system be built. The default format is UFS2.

−T
disktype

For backward compatibility.

−U

Enable soft
updates on the new file system.

−a
maxcontig

Specify the maximum number of
contiguous blocks that will be laid out before forcing a
rotational delay. The default value is 16. See tunefs(8) for
more details on how to set this option.

−b
block-size

The block size of the file
system, in bytes. It must be a power of 2. The default size
is 16384 bytes, and the smallest allowable size is 4096
bytes. The optimal block:fragment ratio is 8:1. Other ratios
are possible, but are not recommended, and may produce poor
results.

−c
blocks-per-cylinder-group

The number of blocks per
cylinder group in a file system. The default is to compute
the maximum allowed by the other parameters. This value is
dependent on a number of other parameters, in particular the
block size and the number of bytes per inode.

−d
max-extent-size

The file system may choose to
store large files using extents. This parameter specifies
the largest extent size that may be used. It is presently
limited to its default value which is 16 times the file
system blocksize.

−e
maxbpg

Indicate the maximum number of
blocks any single file can allocate out of a cylinder group
before it is forced to begin allocating blocks from another
cylinder group. The default is about one quarter of the
total blocks in a cylinder group. See tunefs(8) for more
details on how to set this option.

−f
frag-size

The fragment size of the file
system in bytes. It must be a power of two ranging in value
between blocksize/8 and blocksize. The default
is 2048 bytes.

−g
avgfilesize

The expected average file size
for the file system.

−h
avgfpdir

The expected average number of
files per directory on the file system.

−i bytes

Specify the density of inodes
in the file system. The default is to create an inode for
every (4 * frag-size) bytes of data space. If fewer
inodes are desired, a larger number should be used; to
create more inodes a smaller number should be given. One
inode is required for each distinct file, so this value
effectively specifies the average file size on the file
system.

−l

Enable
multilabel MAC on the new file system.

−m
free-space

The percentage of space
reserved from normal users; the minimum free space
threshold. The default value used is defined by MINFREE from
ufs/ffs/fs.h>, currently 8%. See tunefs(8) for
more details on how to set this option.

−n

Do not create a
.snap directory on the new file system. The resulting
file system will not support snapshot generation, so dump(8)
in live mode and background fsck(8) will not function
properly. The traditional fsck(8) and offline dump(8) will
work on the file system. This option is intended primarily
for memory or vnode-backed file systems that do not require
dump(8) or fsck(8) support.

−o
optimization

(space or time).
The file system can either be instructed to try to minimize
the time spent allocating blocks, or to try to minimize the
space fragmentation on the disk. If the value of minfree
(see above) is less than 8%, the default is to optimize for
space; if the value of minfree is greater than or
equal to 8%, the default is to optimize for time. See
tunefs(8) for more details on how to set this option.

−s size

The size of the file system in
sectors. This value defaults to the size of the raw
partition specified in special (in other words,
newfs will use the entire partition for the file
system).

The following
options override the standard sizes for the disk geometry.
Their default values are taken from the disk label. Changing
these defaults is useful only when using newfs to
build a file system whose raw image will eventually be used
on a different type of disk than the one on which it is
initially created (for example on a write-once disk). Note
that changing any of these values from their defaults will
make it impossible for fsck(8) to find the alternate
superblocks if the standard superblock is lost.

−S
sector-size

The size of a sector in bytes
(almost never anything but 512).

EXAMPLES

newfs /dev/ad3s1a

Creates a new
ufs file system on ad3s1a. The newfs utility
will use a block size of 16384 bytes, a fragment size of
2048 bytes and the largest possible number of blocks per
cylinders group. These values tend to produce better
performance for most applications than the historical
defaults (8192 byte block size and 1024 byte fragment size).
This large fragment size may lead to much wasted space on
file systems that contain many small files.

SEE ALSO

fdformat(1), disktab(5), fs(5),
bsdlabel(8), camcontrol(8), dump(8), dumpfs(8), fsck(8),
mount(8), tunefs(8), gvinum(8)

M. McKusick

,

W. Joy , 
S. Leffler , and 
R. Fabry , " 
A Fast File System for UNIX ", 
ACM Transactions on Computer Systems 2 , 
3 , 
pp 181-197 , 
August 1984 , 
(reprinted in the BSD System Manager’s Manual) .

HISTORY

The newfs utility
appeared in 4.2BSD.

BSD
March 21, 2008 BSD