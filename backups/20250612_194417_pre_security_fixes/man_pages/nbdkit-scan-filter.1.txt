NAME

nbdkit-scan-filter
- scan disk prefetching data ahead of sequential reads

SYNOPSIS

nbdkit
--filter=scan PLUGIN [scan-ahead=false] [scan-clock=false]

[scan-forever=true] [scan-size=]NN

nbdkit
--filter=scan --filter=cache PLUGIN

nbdkit
--filter=scan --filter=cow PLUGIN cow-on-cache=true

DESCRIPTION

"nbdkit-scan-filter"
is a filter that scans the disk prefetching data. It is
sometimes useful if you expect that the client will read the
disk sequentially.

The basic
operation of the filter is that when a client connects, the
filter will start issuing ".cache" (prefetch)
requests to the plugin across the whole disk. Plugins which
support this command will prefetch the data, making
subsequent reads faster. For plugins which do not support
this command, you can inject nbdkit-cache-filter(1)
below (after) this filter, giving approximately the same
effect. nbdkit-cow-filter(1) can be used instead of
nbdkit-cache-filter, if you add the
"cow-on-cache=true" option.

Various
parameters can be used to tune scanning, although the
defaults should be suitable in most cases.

A similar
filter is nbdkit-readahead-filter(1).

Limitations

In a number of significant cases this filter will do
nothing. The filter will print a warning message if this
happens. 
Thread model must be parallel¹

Use "nbdkit PLUGIN
--dump-plugin" to find the thread model of the
underlying plugin. If it does not support the
"parallel" thread model, this filter cannot
perform prefetches in parallel with the read requests.

Only scans while clients are
connected¹

The current filter only scans
while there is at least one client connected.

Only scans the default
export¹

The current filter only scans
the default export and ignores all clients connecting to the
non-default export name.

¹ We may
be able to lift these restrictions in future.

Underlying filters or plugin
must support ".cache" (prefetch)

Very many plugins do not have
the concept of prefetching and/or do not implement the
".cache" callback, and so there is no way for this
filter to issue prefetches.

You can usually
get around this by adding --filter=cache after this
filter as explained above.

Prefetching the whole disk may
load it all into cache

In particular if you use this
filter together with nbdkit-cache-filter(1) or
nbdkit-cow-filter(1), they will cache the whole
content of the plugin into a temporary file. This may be
many gigabytes of data, consuming all space in
/var/tmp. Of course this is the whole point of using
this filter, but you should be aware of it.

If using the
cache filter, the total size of the cache can be limited
(see "CACHE MAXIMUM SIZE" in
nbdkit-cache-filter(1)).

PARAMETERS

scan-ahead=false

By default the filter tries to
stay ahead of incoming read requests. That is to say, it
starts prefetching at the beginning of the disk and
continues incrementally, but if the client issues a read
beyond the current prefetch point then the filter skips
forward and begins prefetching after the read.

However if you
set this parameter to false, then this behaviour is
disabled. The filter simply prefetches sequentially
regardless of client requests.

scan-clock=false

By default, if all clients
disconnect and then another client connects, prefetching
resumes at the same place in the disk. (Like stopping and
starting a clock.)

If you set this
parameter to false, then the filter starts prefetching from
the beginning of the disk again.

scan-forever=true

By default the filter scans
over the disk once and then stops.

If you set this
parameter to true, then after the disk has been prefetched
completely, the filter goes back to the beginning and starts
over, repeating this for as long as nbdkit is running and
there are clients connected.

scan-size=NN

This parameter controls the
prefetch block size. The default is "2M". This
must be a power of 2 and most plugins will have their own
limits on the amount of data they can prefetch in a single
request.

FILES

$filterdir/nbdkit-scan-filter.so

The filter.

Use
"nbdkit --dump-config" to find the location of
$filterdir.

VERSION

"nbdkit-scan-filter"
first appeared in nbdkit 1.32.

SEE ALSO

nbdkit(1),
nbdkit-cache-filter(1), nbdkit-cow-filter(1),
nbdkit-file-plugin(1),
nbdkit-readahead-filter(1),
nbdkit-retry-filter(1),
nbdkit-torrent-plugin(1),
nbdkit-vddk-plugin(1), nbdkit-filter(3),
qemu-img(1).

AUTHORS

Richard W.M.
Jones

COPYRIGHT

Copyright Red
Hat

LICENSE

Redistribution
and use in source and binary forms, with or without
modification, are permitted provided that the following
conditions are met:

•

Redistributions of source code must retain the above
copyright notice, this list of conditions and the following
disclaimer. 

•

Redistributions in binary form must reproduce the above
copyright notice, this list of conditions and the following
disclaimer in the documentation and/or other materials
provided with the distribution.

•

Neither the name of Red Hat nor the names of its
contributors may be used to endorse or promote products
derived from this software without specific prior written
permission. 

THIS SOFTWARE
IS PROVIDED BY RED HAT AND CONTRIBUTORS ’’AS
IS’’ AND ANY EXPRESS OR IMPLIED WARRANTIES,
INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF
MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
DISCLAIMED. IN NO EVENT SHALL RED HAT OR CONTRIBUTORS BE
LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL,
EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR
OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH
DAMAGE.