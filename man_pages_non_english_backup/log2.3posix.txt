LOG2(3POSIX)               POSIX Programmer's Manual              LOG2(3POSIX)

PROLOG
       This  manual  page is part of the POSIX Programmer's Manual.  The Linux
       implementation of this interface may differ (consult the  corresponding
       Linux  manual page for details of Linux behavior), or the interface may
       not be implemented on Linux.

NAME
       log2, log2f, log2l — compute base 2 logarithm functions

SYNOPSIS
       #include <math.h>

       double log2(double x);
       float log2f(float x);
       long double log2l(long double x);

DESCRIPTION
       The functionality described on this reference page is aligned with  the
       ISO C  standard.  Any  conflict between the requirements described here
       and the ISO C standard is unintentional. This  volume  of  POSIX.1‐2017
       defers to the ISO C standard.

       These functions shall compute the base 2 logarithm of their argument x,
       log2(x).

       An application wishing to check for error situations should  set  errno
       to  zero  and  call  feclearexcept(FE_ALL_EXCEPT)  before calling these
       functions. On return, if errno is non-zero or fetestexcept(FE_INVALID |
       FE_DIVBYZERO  |  FE_OVERFLOW  | FE_UNDERFLOW) is non-zero, an error has
       occurred.

RETURN VALUE
       Upon successful completion, these functions shall  return  the  base  2
       logarithm of x.

       If  x  is ±0, a pole error shall occur and log2(), log2f(), and log2l()
       shall return -HUGE_VAL, -HUGE_VALF, and -HUGE_VALL, respectively.

       For finite values of x that are less than 0, or if x is -Inf, a  domain
       error  shall  occur, and either a NaN (if supported), or an implementa‐
       tion-defined value shall be returned.

       If x is NaN, a NaN shall be returned.

       If x is 1, +0 shall be returned.

       If x is +Inf, x shall be returned.

ERRORS
       These functions shall fail if:

       Domain Error
                   The finite value of x is less than zero, or x is -Inf.

                   If the integer expression (math_errhandling  &  MATH_ERRNO)
                   is non-zero, then errno shall be set to [EDOM].  If the in‐
                   teger expression  (math_errhandling  &  MATH_ERREXCEPT)  is
                   non-zero,  then  the invalid floating-point exception shall
                   be raised.

       Pole Error  The value of x is zero.

                   If the integer expression (math_errhandling  &  MATH_ERRNO)
                   is  non-zero,  then errno shall be set to [ERANGE].  If the
                   integer expression (math_errhandling &  MATH_ERREXCEPT)  is
                   non-zero,  then the divide-by-zero floating-point exception
                   shall be raised.

       The following sections are informative.

EXAMPLES
       None.

APPLICATION USAGE
       On error, the expressions (math_errhandling & MATH_ERRNO) and (math_er‐
       rhandling & MATH_ERREXCEPT) are independent of each other, but at least
       one of them must be non-zero.

RATIONALE
       None.

FUTURE DIRECTIONS
       None.

SEE ALSO
       feclearexcept(), fetestexcept(), log()

       The Base Definitions volume of POSIX.1‐2017, Section 4.20, Treatment of
       Error Conditions for Mathematical Functions, <math.h>

COPYRIGHT
       Portions  of  this text are reprinted and reproduced in electronic form
       from IEEE Std 1003.1-2017, Standard for Information Technology --  Por‐
       table  Operating System Interface (POSIX), The Open Group Base Specifi‐
       cations Issue 7, 2018 Edition, Copyright (C) 2018 by the  Institute  of
       Electrical  and  Electronics Engineers, Inc and The Open Group.  In the
       event of any discrepancy between this version and the original IEEE and
       The  Open Group Standard, the original IEEE and The Open Group Standard
       is the referee document. The original Standard can be  obtained  online
       at http://www.opengroup.org/unix/online.html .

       Any  typographical  or  formatting  errors that appear in this page are
       most likely to have been introduced during the conversion of the source
       files  to  man page format. To report such errors, see https://www.ker‐
       nel.org/doc/man-pages/reporting_bugs.html .

IEEE/The Open Group                  2017                         LOG2(3POSIX)
