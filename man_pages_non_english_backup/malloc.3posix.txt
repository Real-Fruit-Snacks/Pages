MALLOC(3POSIX)             POSIX Programmer's Manual            MALLOC(3POSIX)

PROLOG
       This  manual  page is part of the POSIX Programmer's Manual.  The Linux
       implementation of this interface may differ (consult the  corresponding
       Linux  manual page for details of Linux behavior), or the interface may
       not be implemented on Linux.

NAME
       malloc — a memory allocator

SYNOPSIS
       #include <stdlib.h>

       void *malloc(size_t size);

DESCRIPTION
       The functionality described on this reference page is aligned with  the
       ISO C  standard.  Any  conflict between the requirements described here
       and the ISO C standard is unintentional. This  volume  of  POSIX.1‐2017
       defers to the ISO C standard.

       The  malloc()  function shall allocate unused space for an object whose
       size in bytes is specified by size and whose value is unspecified.

       The order and contiguity of storage allocated by  successive  calls  to
       malloc()  is  unspecified.  The pointer returned if the allocation suc‐
       ceeds shall be suitably aligned so that it may be assigned to a pointer
       to  any  type  of  object and then used to access such an object in the
       space allocated (until the space is explicitly freed  or  reallocated).
       Each  such  allocation shall yield a pointer to an object disjoint from
       any other object. The pointer returned points to the start (lowest byte
       address)  of  the  allocated space. If the space cannot be allocated, a
       null pointer shall be returned. If the size of the space  requested  is
       0,  the behavior is implementation-defined: either a null pointer shall
       be returned, or the behavior shall be as if the size were some non-zero
       value, except that the behavior is undefined if the returned pointer is
       used to access an object.

RETURN VALUE
       Upon successful completion with size not equal to 0, malloc() shall re‐
       turn a pointer to the allocated space. If size is 0, either:

        *  A  null pointer shall be returned and errno may be set to an imple‐
           mentation-defined value, or

        *  A pointer to the allocated space shall be returned. The application
           shall ensure that the pointer is not used to access an object.

       Otherwise, it shall return a null pointer and set errno to indicate the
       error.

ERRORS
       The malloc() function shall fail if:

       ENOMEM Insufficient storage space is available.

       The following sections are informative.

EXAMPLES
       None.

APPLICATION USAGE
       None.

RATIONALE
       None.

FUTURE DIRECTIONS
       None.

SEE ALSO
       calloc(), free(), getrlimit(), posix_memalign(), realloc()

       The Base Definitions volume of POSIX.1‐2017, <stdlib.h>

COPYRIGHT
       Portions of this text are reprinted and reproduced in  electronic  form
       from  IEEE Std 1003.1-2017, Standard for Information Technology -- Por‐
       table Operating System Interface (POSIX), The Open Group Base  Specifi‐
       cations  Issue  7, 2018 Edition, Copyright (C) 2018 by the Institute of
       Electrical and Electronics Engineers, Inc and The Open Group.   In  the
       event of any discrepancy between this version and the original IEEE and
       The Open Group Standard, the original IEEE and The Open Group  Standard
       is  the  referee document. The original Standard can be obtained online
       at http://www.opengroup.org/unix/online.html .

       Any typographical or formatting errors that appear  in  this  page  are
       most likely to have been introduced during the conversion of the source
       files to man page format. To report such errors,  see  https://www.ker‐
       nel.org/doc/man-pages/reporting_bugs.html .

IEEE/The Open Group                  2017                       MALLOC(3POSIX)
