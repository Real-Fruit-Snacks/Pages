NEXTAFTER(3POSIX)          POSIX Programmer's Manual         NEXTAFTER(3POSIX)

PROLOG
       This  manual  page is part of the POSIX Programmer's Manual.  The Linux
       implementation of this interface may differ (consult the  corresponding
       Linux  manual page for details of Linux behavior), or the interface may
       not be implemented on Linux.

NAME
       nextafter, nextafterf, nextafterl, nexttoward, nexttowardf, nexttowardl
       — next representable floating-point number

SYNOPSIS
       #include <math.h>

       double nextafter(double x, double y);
       float nextafterf(float x, float y);
       long double nextafterl(long double x, long double y);
       double nexttoward(double x, long double y);
       float nexttowardf(float x, long double y);
       long double nexttowardl(long double x, long double y);

DESCRIPTION
       The  functionality described on this reference page is aligned with the
       ISO C standard. Any conflict between the  requirements  described  here
       and  the  ISO C  standard is unintentional. This volume of POSIX.1‐2017
       defers to the ISO C standard.

       The nextafter(), nextafterf(), and nextafterl() functions shall compute
       the  next  representable floating-point value following x in the direc‐
       tion of y.  Thus, if y is less than x,  nextafter()  shall  return  the
       largest   representable   floating-point   number  less  than  x.   The
       nextafter(), nextafterf(), and nextafterl() functions shall return y if
       x equals y.

       The  nexttoward(),  nexttowardf(), and nexttowardl() functions shall be
       equivalent to the corresponding nextafter() functions, except that  the
       second  parameter  shall  have type long double and the functions shall
       return y converted to the type of the function if x equals y.

       An application wishing to check for error situations should  set  errno
       to  zero  and  call  feclearexcept(FE_ALL_EXCEPT)  before calling these
       functions. On return, if errno is non-zero or fetestexcept(FE_INVALID |
       FE_DIVBYZERO  |  FE_OVERFLOW  | FE_UNDERFLOW) is non-zero, an error has
       occurred.

RETURN VALUE
       Upon successful completion, these functions shall return the next  rep‐
       resentable floating-point value following x in the direction of y.

       If x==y, y (of the type x) shall be returned.

       If  x  is finite and the correct function value would overflow, a range
       error shall occur and ±HUGE_VAL, ±HUGE_VALF, and ±HUGE_VALL  (with  the
       same sign as x) shall be returned as appropriate for the return type of
       the function.

       If x or y is NaN, a NaN shall be returned.

       If x!=y and the correct function value is subnormal,  zero,  or  under‐
       flows, a range error shall occur, and
       the correct function value (if representable) or
       0.0 shall be returned.

ERRORS
       These functions shall fail if:

       Range Error The correct value overflows.

                   If  the  integer expression (math_errhandling & MATH_ERRNO)
                   is non-zero, then errno shall be set to [ERANGE].   If  the
                   integer  expression  (math_errhandling & MATH_ERREXCEPT) is
                   non-zero, then the overflow floating-point exception  shall
                   be raised.

       Range Error The correct value is subnormal or underflows.

                   If  the  integer expression (math_errhandling & MATH_ERRNO)
                   is non-zero, then errno shall be set to [ERANGE].   If  the
                   integer  expression  (math_errhandling & MATH_ERREXCEPT) is
                   non-zero, then the underflow floating-point exception shall
                   be raised.

       The following sections are informative.

EXAMPLES
       None.

APPLICATION USAGE
       On error, the expressions (math_errhandling & MATH_ERRNO) and (math_er‐
       rhandling & MATH_ERREXCEPT) are independent of each other, but at least
       one of them must be non-zero.

       When  <tgmath.h>  is included, note that the return type of nextafter()
       depends on the generic typing deduced from both  arguments,  while  the
       return  type  of nexttoward() depends only on the generic typing of the
       first argument.

RATIONALE
       None.

FUTURE DIRECTIONS
       None.

SEE ALSO
       feclearexcept(), fetestexcept()

       The Base Definitions volume of POSIX.1‐2017, Section 4.20, Treatment of
       Error Conditions for Mathematical Functions, <math.h>, <tgmath.h>

COPYRIGHT
       Portions  of  this text are reprinted and reproduced in electronic form
       from IEEE Std 1003.1-2017, Standard for Information Technology --  Por‐
       table  Operating System Interface (POSIX), The Open Group Base Specifi‐
       cations Issue 7, 2018 Edition, Copyright (C) 2018 by the  Institute  of
       Electrical  and  Electronics Engineers, Inc and The Open Group.  In the
       event of any discrepancy between this version and the original IEEE and
       The  Open Group Standard, the original IEEE and The Open Group Standard
       is the referee document. The original Standard can be  obtained  online
       at http://www.opengroup.org/unix/online.html .

       Any  typographical  or  formatting  errors that appear in this page are
       most likely to have been introduced during the conversion of the source
       files  to  man page format. To report such errors, see https://www.ker‐
       nel.org/doc/man-pages/reporting_bugs.html .

IEEE/The Open Group                  2017                    NEXTAFTER(3POSIX)
