STRCPY(3POSIX)             POSIX Programmer's Manual            STRCPY(3POSIX)

PROLOG
       This  manual  page is part of the POSIX Programmer's Manual.  The Linux
       implementation of this interface may differ (consult the  corresponding
       Linux  manual page for details of Linux behavior), or the interface may
       not be implemented on Linux.

NAME
       stpcpy, strcpy — copy a string and return a pointer to the end  of  the
       result

SYNOPSIS
       #include <string.h>

       char *stpcpy(char *restrict s1, const char *restrict s2);
       char *strcpy(char *restrict s1, const char *restrict s2);

DESCRIPTION
       For  strcpy():  The  functionality  described on this reference page is
       aligned with the ISO C standard. Any conflict between the  requirements
       described  here and the ISO C standard is unintentional. This volume of
       POSIX.1‐2017 defers to the ISO C standard.

       The stpcpy() and strcpy() functions shall copy the string pointed to by
       s2  (including the terminating NUL character) into the array pointed to
       by s1.

       If copying takes place between objects that overlap,  the  behavior  is
       undefined.

RETURN VALUE
       The  stpcpy()  function  shall  return a pointer to the terminating NUL
       character copied into the s1 buffer.

       The strcpy() function shall return s1.

       No return values are reserved to indicate an error.

ERRORS
       No errors are defined.

       The following sections are informative.

EXAMPLES
   Construction of a Multi-Part Message in a Single Buffer
           #include <string.h>
           #include <stdio.h>

           int
           main (void)
           {
               char buffer [10];
               char *name = buffer;

               name = stpcpy (stpcpy (stpcpy (name, "ice"),"-"), "cream");
               puts (buffer);
               return 0;
           }

   Initializing a String
       The  following  example  copies  the  string  "----------"   into   the
       permstring variable.

           #include <string.h>
           ...
           static char permstring[11];
           ...
           strcpy(permstring, "----------");
           ...

   Storing a Key and Data
       The  following  example  allocates  space for a key using malloc() then
       uses strcpy() to place the key there. Then it allocates space for  data
       using  malloc(),  and  uses strcpy() to place data there. (The user-de‐
       fined function dbfree() frees memory previously allocated to  an  array
       of type struct element *.)

           #include <string.h>
           #include <stdlib.h>
           #include <stdio.h>
           ...
           /* Structure used to read data and store it. */
           struct element {
               char *key;
               char *data;
           };

           struct element *tbl, *curtbl;
           char *key, *data;
           int count;
           ...
           void dbfree(struct element *, int);
           ...
           if ((curtbl->key = malloc(strlen(key) + 1)) == NULL) {
               perror("malloc"); dbfree(tbl, count); return NULL;
           }
           strcpy(curtbl->key, key);

           if ((curtbl->data = malloc(strlen(data) + 1)) == NULL) {
               perror("malloc"); free(curtbl->key); dbfree(tbl, count); return NULL;
           }
           strcpy(curtbl->data, data);
           ...

APPLICATION USAGE
       Character  movement  is  performed differently in different implementa‐
       tions. Thus, overlapping moves may yield surprises.

       This version is aligned with the ISO C standard; this does  not  affect
       compatibility  with XPG3 applications. Reliable error detection by this
       function was never guaranteed.

RATIONALE
       None.

FUTURE DIRECTIONS
       None.

SEE ALSO
       strncpy(), wcscpy()

       The Base Definitions volume of POSIX.1‐2017, <string.h>

COPYRIGHT
       Portions of this text are reprinted and reproduced in  electronic  form
       from  IEEE Std 1003.1-2017, Standard for Information Technology -- Por‐
       table Operating System Interface (POSIX), The Open Group Base  Specifi‐
       cations  Issue  7, 2018 Edition, Copyright (C) 2018 by the Institute of
       Electrical and Electronics Engineers, Inc and The Open Group.   In  the
       event of any discrepancy between this version and the original IEEE and
       The Open Group Standard, the original IEEE and The Open Group  Standard
       is  the  referee document. The original Standard can be obtained online
       at http://www.opengroup.org/unix/online.html .

       Any typographical or formatting errors that appear  in  this  page  are
       most likely to have been introduced during the conversion of the source
       files to man page format. To report such errors,  see  https://www.ker‐
       nel.org/doc/man-pages/reporting_bugs.html .

IEEE/The Open Group                  2017                       STRCPY(3POSIX)
