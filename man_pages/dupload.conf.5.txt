NAME

dupload.conf -
configuration file for dupload

DESCRIPTION

The
configuration file is rather straight forward Perl code as
it is included by the dupload script via "do
$config". The config file is read as Perl
code!

Any
dupload.conf must begin with "package
config;" because "config" is
the namespace expected by dupload.

For examples of
the configuration please refer to the global configuration
file /etc/dupload.conf.

It contains
associative arrays, each indexed by the nickname (see
--to option of dupload), for the following
items: 
fqdn [required]

The fully qualified domain name
( FQDN ) of the nickname.

For the
copy method, this option is ignored and the local
FQDN will be used instead.

method [optional]

The transfer method. The
available methods are: ftp (which is the default),
scp, scpb, rsync (over
SSH ) and copy (local filesystem).

If you are
using an upload queue, use ftp because it is fast. If
you are using an authenticated host, always use
scp or rsync via SSH, because
ftp transmits the password in clear text.

For scp
and rsync to work properly, you have to setup the
remote and local host to establish a ssh/slogin connection
using .shosts/.rhosts or the files in ~/.ssh/.
If you do not want or cannot do that, you may find the
scpb more convenient since it uploads in batch,
reducing the number of password prompts.

The only major
caveat of the rsync and scpb options is that
the files are processed in a batch mode, i.e. not
separately, so in case of an error dupload will not
be able to detect which part of the transfer failed, and
just delete the .upload file completely.

login [optional]

The account name used to log
into the remote host. For ftp the default is
anonymous, which should work with firewall logins
too. For scp, scpb and rsync the
default is delegated to SSH and its own
configuration.

password [optional]

The FTP password
for anonymous logins.

filemode [optional]

The destination files mode, in
octal. If the value is undef, the mode will not be
modified. The default is 0644.

incoming [required]

Incoming directory, the
directory we try to upload to.

queuedir [optional]

The directory we move the
uploaded files to (after successful upload to
incoming. Usually necessary only with some special
upload queues.

distwhitelist
[optional]

The regex of the distributions
allowed for this host. This check is done against the
Distribution field in the .changes file.

distblacklist
[optional]

The regex of the distributions
disallowed for this host. This check is done against the
Distribution field in the .changes file.

mailto [optional]

Email address where the
announcement about stable packages is sent.

mailtx [optional]

Email address where the
announcement about unstable and experimental packages is
sent.

cc [optional]

Email address where to send a
copy address of the announcement.

fullname [optional]

Your full name, one that should
appear in the announcement;

If you leave
this setting empty, the default will depend on your mail
system. Usually the full name will be copied from the
GCOS field in /etc/passwd.

visibleuser
[optional]

Your username that should
appear in the announcement. Defaults to
"getlogin()".

visiblename
[optional]

The host/domain name that
appears as the part to the right of the @ character
in the from-part of the announcement. Defaults to the
value your local MTA likes.

passive [optional]

Set the passive mode for
FTP transfers. Since dupload uses
Net::FTP, you can also use the environment variable
FTP_PASSIVE .

options [optional]

String that will be added
verbatim to the command line of any scp or
rsync calls done.

dinstall_runs
[optional]

Tells dupload that the
remote host runs dinstall (or equivalent) so that
dupload will not send a duplicate announcement mail.
The default is 0 (false), set it to 1 to enable it.

archive [optional]

If set to 0 (false), adds a
X-No-Archive: yes header in the announcement. The
default is 1 (true).

The
configuration files also contain the following global
variables: 
default_host [optional]

The default host to upload to.
The default value of this variable is set depending on the
current vendor, but if there is no configuration for that
vendor it will be left unset.

no_parentheses_to_fullname
[optional]

Prevents dupload to add
parentheses around the full name when making mail
announcements. Default is 0 (false), set it to 1 to enable
it.

HOOKS

Hooks are a
powerful way to add actions which will be run before or
after a dupload (like the preinst and postinst script of
dpkg).

You have two
sort of hooks: pre-upload and post-upload. Both are simple
shell commands (executed by "sh -c" so
you can use any shell tricks). Pre-uploads are always run
(even in dry mode) and stop dupload if they fail
(failure being measured by the hook&rsquo;s exit status).
Post-uploads are only run when you are not in dry mode and
only if the uploading succeeded.

Both sorts of
hooks are run for a given category: changes,
sourcepackage, package, file or
deb. 
changes

This hook is run once per
changes file (given as an argument to dupload)
with the filename as its parameter.

sourcepackage

This hook is run once per
changes file with the source package name and its
version as its two parameters.

package

This hook is run once per
binary package (a deb file) with the package name and
its version as its two parameters.

file

This hook is run once per
uploaded file, with the file name as its parameter.

deb

This hook is run once per binary package (a deb
file) with the filename as its parameter.

Syntax

Hooks are defined in two Perl hashes, %preupload
and %postupload, each indexed by category. In
addition to the global hashes, each host entry has two
fields with the same names, for the host-specific hooks.

Hooks are
defined as list reference with each item executed in
sequence. Note: For backwards compatibility with old
configurations they can be defined as a simple scalar, even
though they will emit a warning, but this support will be
dropped after the next major Debian release.

The shell
command will be substituted first: %1 will be
replace by the first argument, etc.

Per-host or
global hooks 
Hooks can be global (for all the hosts) or can be for a
specific host. Host specific hooks override the global ones
for each category.

Examples

This one runs lintian before uploading. It is global
and guarantee that you will always upload lintian-clean
packages (thanks to lintian return status).

     $preupload{'deb'} = [ 'lintian -v -i %1' ];

This one just
display the name and versions of successfully uploaded
packages.

     $postupload{'package'} = [ 'echo PACKAGE %1 %2 uploaded' ];

Unlike the two
others, this one is specific to one host, master, and
overrides the default global hook in charge of checking the
OpenPGP signatures:

     $cfg{master}{preupload}{'changes'} = [ 'echo Uploading %1' ];

FILES

The
configuration is searched as following:

        /etc/dupload.conf
        ~/.dupload.conf

The latest
entries override the former.

ENVIRONMENT

Those of
Net::FTP for the FTP method:

 FTP_FIREWALL
 FTP_PASSIVE