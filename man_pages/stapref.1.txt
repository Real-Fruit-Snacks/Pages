NAME

stapref -
systemtap language reference

SYNOPSIS

stapref

DESCRIPTION

The reference
for the systemtap scripting language.

LANGUAGE

Keywords

&bull; break 
&bull; continue 
&bull; delete 
&bull; else 
&bull; exit 
&bull; foreach 
&bull; for 
&bull; function 
&bull; global 
&bull; private 
&bull; if 
&bull; in 
&bull; next 
&bull; probe 
&bull; return 
&bull; try/catch 
&bull; while

Data Types and
Operators

Integers 
&bull; var1 = 5 
&bull; global var2 = 10

Strings 
&bull; var1 = "string1" 
&bull; global var2 = "string2"

Associative
Arrays 
&bull; global array1[] 
&bull; global array2[SIZE] 
&bull; array[index] = 5

Context
Variables 
&bull; $var 
&bull; $var$ (pretty printed string
form)

Binary numeric
operators 
&bull; * / % + - > >>> & ^ |
&& ||

Binary string
operators 
&bull; . (string concatenation)

Numeric
assignment operators 
&bull; = += -= *= /= %= >>= 

String
assignment operators 
&bull; = .=

Unary numeric
operators 
&bull; + - ! ~ ++ --

Numeric &
string comparison operators 
&bull;  = == !=

Regular
expression matching operators 
&bull; =~ !~

Ternary
operator 
&bull; cond ? exp1 : exp2

Grouping
operator 
&bull; ( expression )

Array operators

&bull; array[index] (array read/write)

&bull; [index] in array

Aggregation
operator 
&bull; var  value

Statements

Jump Statements 
&bull; continue 
&bull; break 
&bull; next (early return from a probe) 
&bull; return expression (from a function)

&bull; try statement catch (message)
statement

Selection
Statements 
&bull; if (expression) statement 
&bull; else statement

Iteration
Statements 
&bull; foreach (variable in array) statement

&bull; foreach ([var1,var2,...] in array)
statement 
&bull; for (expression; expression; expression)
statement 
&bull; while (expression) statement

Declaration
Statements 
&bull; function name (variable : type, ...) {
statement } 
&bull; function name : type (variable : type, ...) {
statement } 
&bull; function name : type (variable : type, ...) %{
c_statement %} 
&bull; probe probepoint { statement } 
&bull; probe label = probepoint { statement }

Lexical
Structure

Comments 
&bull; # ... comment 
&bull; // ... comment 
&bull; /* ... comment ... */

Preprocessor

&bull; %( expression %? true_tokens %:
false_tokens %) 
&bull; @define label (variable, ...) %{ statement
%}

Builtin
Functions

Aggregation Builtin Functions

&bull; @avg (variable) 
&bull; @count (variable) 
&bull; @hist_linear (variable, N, N, N) 
&bull; @hist_log (variable) 
&bull; @max (variable) 
&bull; @min (variable) 
&bull; @sum (variable)

Output Builtin
Functions 
&bull; print (variable) 
&bull; printf (format:string, variable, ...)  

where format is of the form:
%[flags][width][.precision][length]specifier 
&bull; printd (delimiter:string, variable, ...) 
&bull; printdln (delimiter:string, variable, ...)

&bull; println () 
&bull; sprint:string (variable) 
&bull; sprintf:string (format:string, variable,
...)

Variable Access
Builtin Functions 
&bull; @var ("varname[@src/FILE.c]"[,
"module"]) (static or global) 
&bull; @cast (variable, "type_name"[,
"module"]) 
&bull; @defined (variable) 
&bull; @probewrite (variable)

Probepoints

Some of the more commonly used
probepoints 
&bull; kernel.function(PATTERN)
kernel.function(PATTERN).call 
&bull; kernel.function(PATTERN).return 
&bull; kernel.FUNCTION (PATTERN).return.maxactive(VALUE)

&bull; kernel.FUNCTION (PATTERN).inline 
&bull; kernel.FUNCTION (PATTERN).label(LPATTERN) 
&bull; module(MPATTERN).FUNCTION (PATTERN) 
&bull; module(MPATTERN).FUNCTION (PATTERN).call 
&bull; module(MPATTERN).FUNCTION
(PATTERN).return.maxactive(VALUE) 
&bull; module(MPATTERN).FUNCTION (PATTERN).inline 
&bull; kernel.statement(PATTERN) 
&bull; kernel.statement(ADDRESS).absolute 
&bull; module(MPATTERN).statement(PATTERN) 
&bull; kprobe.FUNCTION (FUNCTION) 
&bull; kprobe.FUNCTION (FUNCTION).return 
&bull; kprobe.module(NAME).FUNCTION (FUNCTION) 
&bull; kprobe.module(NAME).FUNCTION (FUNCTION).return 
&bull; kprobe.statement(ADDRESS).absolute 
&bull; process.begin process("PATH").begin 
&bull; process(PID).begin process.thread.begin 
&bull; process("PATH").thread.begin 
&bull; process(PID).thread.begin 
&bull; process.end 
&bull; process("PATH").end 
&bull; process(PID).end 
&bull; process.thread.end 
&bull; process("PATH").thread.end 
&bull; process(PID).thread.end 
&bull; process("PATH").syscall 
&bull; process(PID).syscall 
&bull; process.syscall.return 
&bull; process("PATH").syscall.return 
&bull; process(PID).syscall.return 
&bull; process("PATH").FUNCTION ("NAME")

&bull;
process("PATH").statement("*@FILE.c:123")

&bull; process("PATH").FUNCTION
("*").return 
&bull; process("PATH").FUNCTION
("myfun").label("foo") 
&bull; process("PATH").mark("LABEL")

&bull;
java("PNAME").class("CLASSNAME").method("PATTERN")

&bull;
java("PNAME").class("CLASSNAME").method("PATTERN").return

&bull;
java(PID).class("CLASSNAME").method("PATTERN")

&bull;
java(PID).class("CLASSNAME").method("PATTERN").return

&bull;
python2.module("MODULENAME").function("PATTERN")

&bull;
python2.module("MODULENAME").function("PATTERN").return

&bull;
python3.module("MODULENAME").function("PATTERN")

&bull;
python3.module("MODULENAME").function("PATTERN").return

Tapset
Functions

Some of the more commonly used
tapset functions 
&bull; addr:long () 
&bull; backtrace:string () 
&bull; caller:string () 
&bull; caller_addr:long () 
&bull; cmdline_arg:string (N:long) 
&bull; cmdline_args:string (N:long,m:long,delim:string) 
&bull; cmdline_str:string () 
&bull; env_var:string (name:string) 
&bull; execname:string () 
&bull; int_arg:long (N:long) 
&bull; isinstr:long(s1:string,s2:string) 
&bull; long_arg:long (N:long) 
&bull; modname:string () 
&bull; module_name:string () 
&bull; pid:long () 
&bull; pn:string () 
&bull; pointer_arg:string (N:long) 
&bull; pp:string () 
&bull; print_backtrace () 
&bull; probefunc:string () 
&bull; register:long(name:string) 
&bull;
str_replace:string(prnt_str:string,srch_str:string,rplc_str:string)

&bull; stringat:long(str:string,pos:long) 
&bull; strlen:long(str:string) 
&bull; strtol:long(str:string,base:long) 
&bull; substr:string(str:string,start:long,length:long) 
&bull; user_long:long(addr:long) 
&bull; user_string:string(addr:long)

SEE ALSO

stap(1)

BUGS

Use the
Bugzilla link of the project web page or our mailing list.
http://sourceware.org/systemtap/,systemtap [AT] sourceware.org>.