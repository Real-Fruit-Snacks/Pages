NAME

nbd_shutdown -
disconnect from the NBD server

SYNOPSIS

#include

int nbd_shutdown ( 
struct nbd_handle *h, uint32_t flags 
);

DESCRIPTION

Issue the
disconnect command to the NBD server. This is a nice way to
tell the server we are going away, but from the
client&rsquo;s point of view has no advantage over abruptly
closing the connection (see nbd_close(3)).

This function
works whether or not the handle is ready for transmission of
commands. If more fine-grained control is needed, see
nbd_aio_opt_abort(3) and
nbd_aio_disconnect(3).

The
"flags" argument is a bitmask, including zero or
more of the following shutdown flags: 
"LIBNBD_SHUTDOWN_ABANDON_PENDING" = 0x10000

If there are any pending
requests which have not yet been sent to the server (see
nbd_aio_in_flight(3)), abandon them without sending
them to the server, rather than the usual practice of
issuing those commands before informing the server of the
intent to disconnect.

For
convenience, the constant "LIBNBD_SHUTDOWN_MASK"
is available to describe all shutdown flags recognized by
this build of libnbd. A future version of the library may
add new flags.

RETURN VALUE

If the call is
successful the function returns 0.

ERRORS

On error -1 is
returned.

Refer to
"ERROR HANDLING" in libnbd(3) for how to
get further details of the error.

The following
parameters must not be NULL: "h". For more
information see "Non-NULL parameters" in
libnbd(3).

HANDLE STATE

nbd_shutdown
can be called when the handle is in the following
states:

&#9484;&#9472;&#9472;&#9472;&#9472;&#9472;&#9472;&#9472;&#9472;&#9472;&#9472;&#9472;&#9472;&#9472;&#9472;&#9472;&#9472;&#9472;&#9472;&#9472;&#9472;&#9472;&#9472;&#9472;&#9472;&#9472;&#9472;&#9472;&#9472;&#9472;&#9472;&#9472;&#9472;&#9472;&#9472;&#9472;&#9472;&#9472;&#9516;&#9472;&#9472;&#9472;&#9472;&#9472;&#9472;&#9472;&#9472;&#9472;&#9472;&#9472;&#9472;&#9472;&#9472;&#9472;&#9472;&#9472;&#9472;&#9472;&#9472;&#9472;&#9472;&#9472;&#9472;&#9472;&#9488;

&#9474; Handle created, before connecting &#9474; &#10060;
error &#9474; 
&#9474; Connecting &#9474; &#10060; error &#9474; 
&#9474; Connecting & handshaking (opt_mode) &#9474;
&#9989; allowed &#9474; 
&#9474; Connected to the server &#9474; &#9989; allowed
&#9474; 
&#9474; Connection shut down &#9474; &#10060; error &#9474;

&#9474; Handle dead &#9474; &#10060; error &#9474; 

&#9492;&#9472;&#9472;&#9472;&#9472;&#9472;&#9472;&#9472;&#9472;&#9472;&#9472;&#9472;&#9472;&#9472;&#9472;&#9472;&#9472;&#9472;&#9472;&#9472;&#9472;&#9472;&#9472;&#9472;&#9472;&#9472;&#9472;&#9472;&#9472;&#9472;&#9472;&#9472;&#9472;&#9472;&#9472;&#9472;&#9472;&#9472;&#9524;&#9472;&#9472;&#9472;&#9472;&#9472;&#9472;&#9472;&#9472;&#9472;&#9472;&#9472;&#9472;&#9472;&#9472;&#9472;&#9472;&#9472;&#9472;&#9472;&#9472;&#9472;&#9472;&#9472;&#9472;&#9472;&#9496;

VERSION

This function
first appeared in libnbd 1.0.

If you need to
test if this function is available at compile time check if
the following macro is defined:

#define
LIBNBD_HAVE_NBD_SHUTDOWN 1

EXAMPLE

This example is
also available as examples/reads-and-writes.c in the
libnbd source code.

/* This example
shows how to do synchronous reads 
* and writes randomly over the first megabyte of an 
* NBD server. Note this will destroy any existing 
* content on the NBD server. 
* 
* To test it with nbdkit and a RAM disk: 
* 
* nbdkit -U - memory 1M \ 
* --run './simple-reads-and-writes $unixsocket' 
*/ 
#include  
#include  
#include  
#include  
#include  
#include  
#include  
int 
main (int argc, char *argv[]) 
{ 
struct nbd_handle *nbd; 
char buf[512]; 
size_t i; 
int64_t exportsize; 
uint64_t offset; 
srand (time (NULL)); 
if (argc != 2) { 
fprintf (stderr, "%s socket\n", argv[0]); 
exit (EXIT_FAILURE); 
} 
/* Create the libnbd handle. */ 
nbd = nbd_create (); 
if (nbd == NULL) { 
fprintf (stderr, "%s\n", nbd_get_error ()); 
exit (EXIT_FAILURE); 
} 
/* Connect to the NBD server over a 
* Unix domain socket. 
*/ 
if (nbd_connect_unix (nbd, argv[1]) == -1) { 
fprintf (stderr, "%s\n", nbd_get_error ()); 
exit (EXIT_FAILURE); 
} 
/* Get the size of the disk and check 
* it's large enough. 
*/ 
exportsize = nbd_get_size (nbd); 
if (exportsize == -1) { 
fprintf (stderr, "%s\n", nbd_get_error ()); 
exit (EXIT_FAILURE); 
} 
assert (exportsize >= sizeof buf); 
/* Check that the server is writable. */ 
if (nbd_is_read_only (nbd) == 1) { 
fprintf (stderr, "%s: " 
"error: this NBD export is read-only\n", 
argv[0]); 
exit (EXIT_FAILURE); 
} 
for (i = 0; i 
buf[i] = rand (); 
/* 1000 writes. */ 
for (i = 0; i 
offset = rand () % (exportsize - sizeof buf); 
if (nbd_pwrite (nbd, buf, sizeof buf, 
offset, 0) == -1) { 
fprintf (stderr, "%s\n", nbd_get_error ()); 
exit (EXIT_FAILURE); 
} 
} 
/* 1000 reads and writes. */ 
for (i = 0; i 
offset = rand () % (exportsize - sizeof buf); 
if (nbd_pread (nbd, buf, sizeof buf, 
offset, 0) == -1) { 
fprintf (stderr, "%s\n", nbd_get_error ()); 
exit (EXIT_FAILURE); 
} 
offset = rand () % (exportsize - sizeof buf); 
if (nbd_pwrite (nbd, buf, sizeof buf, 
offset, 0) == -1) { 
fprintf (stderr, "%s\n", nbd_get_error ()); 
exit (EXIT_FAILURE); 
} 
} 
/* Sends a graceful shutdown to the server. */ 
if (nbd_shutdown (nbd, 0) == -1) { 
fprintf (stderr, "%s\n", nbd_get_error ()); 
exit (EXIT_FAILURE); 
} 
nbd_close (nbd); 
exit (EXIT_SUCCESS); 
}

SEE ALSO

nbd_aio_disconnect(3),
nbd_aio_in_flight(3), nbd_aio_opt_abort(3),
nbd_close(3), nbd_create(3),
libnbd(3).

AUTHORS

Eric Blake

Richard W.M.
Jones

COPYRIGHT

Copyright Red
Hat

LICENSE

This library is
free software; you can redistribute it and/or modify it
under the terms of the GNU Lesser General Public License as
published by the Free Software Foundation; either version 2
of the License, or (at your option) any later version.

This library is
distributed in the hope that it will be useful, but WITHOUT
ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
GNU Lesser General Public License for more details.

You should have
received a copy of the GNU Lesser General Public License
along with this library; if not, write to the Free Software
Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston,
MA 02110-1301 USA