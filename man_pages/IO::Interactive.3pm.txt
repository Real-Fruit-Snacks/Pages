IO::Interactive(3pm)  User Contributed Perl Documentation IO::Interactive(3pm)

NAME
       IO::Interactive - Utilities for interactive I/O

VERSION
       This document describes IO::Interactive version 1.02

SYNOPSIS
           use IO::Interactive qw(is_interactive interactive busy);

           if ( is_interactive() ) {
               print "Running interactively\n";
           }

           # or...

           print {interactive} "Running interactively\n";

           $fh = busy {
               do_noninteractive_stuff();
           }

DESCRIPTION
       This module provides three utility subroutines that make it easier to
       develop interactive applications.

       The "ARGV" filehandle, the one that "<>" or an empty "readline()" uses,
       has various magic associated with it. It's not actually opened until
       you try to read from it. Checking "-t ARGV" before you've tried to read
       from it might give you the wrong answer.  Not only that, you might not
       read from "ARGV". If the value in @ARGV is the magic filename "-" (a
       convention to mean the standard filehandle for input or output), "ARGV"
       might actually be "STDIN".  You don't want to think about all of this.
       This module is discussed in Perl Best Practices on page 218. Also see
       the "ARGV" entry in perlvar and the "readline" entry in perlfunc.

       "is_interactive()"
           This subroutine returns true if *ARGV and the currently selected
           filehandle (usually *STDOUT) are connected to the terminal. The
           test is considerably more sophisticated than:

               -t *ARGV && -t *STDOUT

           as it takes into account the magic behaviour of *ARGV.

           You can also pass "is_interactive" a writable filehandle, in which
           case it requires that filehandle be connected to a terminal
           (instead of the currently selected).  The usual suspect here is
           *STDERR:

               if ( is_interactive(*STDERR) ) {
                   carp $warning;
               }

       "interactive()"
           This subroutine returns *STDOUT if "is_interactive" is true. If
           "is_interactive()" is false, "interactive" returns a filehandle
           that does not print.

           This makes it easy to create applications that print out only when
           the application is interactive:

               print {interactive} "Please enter a value: ";
               my $value = <>;

           You can also pass "interactive" a writable filehandle, in which
           case it writes to that filehandle if it is connected to a terminal
           (instead of writing to *STDOUT). Once again, the usual suspect is
           *STDERR:

               print {interactive(*STDERR)} $warning;

       "busy {...}"
           This subroutine takes a block as its single argument and executes
           that block.  Whilst the block is executed, *ARGV is temporarily
           replaced by a closed filehandle. That is, no input from *ARGV is
           possible in a "busy" block.  Furthermore, any attempts to send
           input into the "busy" block through *ARGV is intercepted and a
           warning message is printed to *STDERR.  The "busy" call returns a
           filehandle that contains the intercepted input.

           A "busy" block is therefore useful to prevent attempts at input
           when the program is busy at some non-interactive task.

DIAGNOSTICS
       Unknown subroutine (%s) requested
           This module only exports the three subroutines described above.
           You asked for something else. Maybe you misspelled the subroutine
           you wanted.

CONFIGURATION AND ENVIRONMENT
       IO::Interactive requires no configuration files or environment
       variables.

DEPENDENCIES
       This module requires the "openhandle()" subroutine from the
       Scalar::Util module.

INCOMPATIBILITIES
       None reported.

BUGS AND LIMITATIONS
       No bugs have been reported.

       Please report any bugs or feature requests to Github
       <https://github.com/briandfoy/io-interactive/issues>.

SOURCE AVAILABILITY
       This code is in GitHub:

               https://github.com/briandfoy/io-interactive

AUTHOR
       Damian Conway  "<DCONWAY@cpan.org>"

       Currently maintained by brian d foy "<bdfoy@cpan.org>".

       1.01 patch DMUEY "dmuey@cpan.org"

LICENCE AND COPYRIGHT
       Copyright Â© 2005-2021, Damian Conway "<DCONWAY@cpan.org>". All rights
       reserved.

       This module is free software; you can redistribute it and/or modify it
       under the same terms as Perl itself.

DISCLAIMER OF WARRANTY
       BECAUSE THIS SOFTWARE IS LICENSED FREE OF CHARGE, THERE IS NO WARRANTY
       FOR THE SOFTWARE, TO THE EXTENT PERMITTED BY APPLICABLE LAW. EXCEPT
       WHEN OTHERWISE STATED IN WRITING THE COPYRIGHT HOLDERS AND/OR OTHER
       PARTIES PROVIDE THE SOFTWARE "AS IS" WITHOUT WARRANTY OF ANY KIND,
       EITHER EXPRESSED OR IMPLIED, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
       WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE. THE
       ENTIRE RISK AS TO THE QUALITY AND PERFORMANCE OF THE SOFTWARE IS WITH
       YOU. SHOULD THE SOFTWARE PROVE DEFECTIVE, YOU ASSUME THE COST OF ALL
       NECESSARY SERVICING, REPAIR, OR CORRECTION.

       IN NO EVENT UNLESS REQUIRED BY APPLICABLE LAW OR AGREED TO IN WRITING
       WILL ANY COPYRIGHT HOLDER, OR ANY OTHER PARTY WHO MAY MODIFY AND/OR
       REDISTRIBUTE THE SOFTWARE AS PERMITTED BY THE ABOVE LICENCE, BE LIABLE
       TO YOU FOR DAMAGES, INCLUDING ANY GENERAL, SPECIAL, INCIDENTAL, OR
       CONSEQUENTIAL DAMAGES ARISING OUT OF THE USE OR INABILITY TO USE THE
       SOFTWARE (INCLUDING BUT NOT LIMITED TO LOSS OF DATA OR DATA BEING
       RENDERED INACCURATE OR LOSSES SUSTAINED BY YOU OR THIRD PARTIES OR A
       FAILURE OF THE SOFTWARE TO OPERATE WITH ANY OTHER SOFTWARE), EVEN IF
       SUCH HOLDER OR OTHER PARTY HAS BEEN ADVISED OF THE POSSIBILITY OF SUCH
       DAMAGES.

perl v5.34.0                      2022-10-13              IO::Interactive(3pm)