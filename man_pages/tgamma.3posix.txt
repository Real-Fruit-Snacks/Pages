TGAMMA(3POSIX)             POSIX Programmer's Manual            TGAMMA(3POSIX)

PROLOG
       This  manual  page is part of the POSIX Programmer's Manual.  The Linux
       implementation of this interface may differ (consult the  corresponding
       Linux  manual page for details of Linux behavior), or the interface may
       not be implemented on Linux.

NAME
       tgamma, tgammaf, tgammal — compute gamma() function

SYNOPSIS
       #include <math.h>

       double tgamma(double x);
       float tgammaf(float x);
       long double tgammal(long double x);

DESCRIPTION
       The functionality described on this reference page is aligned with  the
       ISO C  standard.  Any  conflict between the requirements described here
       and the ISO C standard is unintentional. This  volume  of  POSIX.1‐2017
       defers to the ISO C standard.

       These  functions  shall  compute Γ(x) where Γ(x) is defined as ∫e^ −tt^
       x−1dt.

       An application wishing to check for error situations should  set  errno
       to  zero  and  call  feclearexcept(FE_ALL_EXCEPT)  before calling these
       functions. On return, if errno is non-zero or fetestexcept(FE_INVALID |
       FE_DIVBYZERO  |  FE_OVERFLOW  | FE_UNDERFLOW) is non-zero, an error has
       occurred.

RETURN VALUE
       Upon successful completion, these functions shall return the  gamma  of
       x.

       If  x  is a negative integer, a domain error may occur and either a NaN
       (if supported) or an implementation-defined value  shall  be  returned.
       On  systems  that support the IEC 60559 Floating-Point option, a domain
       error shall occur and a NaN shall be returned.

       If x is ±0, tgamma(), tgammaf(), and tgammal() shall return  ±HUGE_VAL,
       ±HUGE_VALF,  and ±HUGE_VALL, respectively.  On systems that support the
       IEC 60559 Floating-Point option, a pole error shall occur; otherwise, a
       pole error may occur.

       If  the  correct  value would cause overflow, a range error shall occur
       and  tgamma(),  tgammaf(),  and  tgammal()  shall   return   ±HUGE_VAL,
       ±HUGE_VALF, or ±HUGE_VALL, respectively, with the same sign as the cor‐
       rect value of the function.

       If the correct value would cause underflow, and is not representable, a
       range error may occur, and tgamma(), tgammaf(), and tgammal() shall re‐
       turn 0.0, or (if IEC 60559 Floating-Point is not supported)  an  imple‐
       mentation-defined  value no greater in magnitude than DBL_MIN, FLT_MIN,
       and LDBL_MIN, respectively.

       If the correct value would cause underflow,  and  is  representable,  a
       range error may occur and the correct value shall be returned.

       If x is subnormal and 1/x is representable, 1/x should be returned.

       If x is NaN, a NaN shall be returned.

       If x is +Inf, x shall be returned.

       If x is -Inf, a domain error shall occur, and a NaN shall be returned.

ERRORS
       These functions shall fail if:

       Domain Error
                   The value of x is a negative integer, or x is -Inf.

                   If  the  integer expression (math_errhandling & MATH_ERRNO)
                   is non-zero, then errno shall be set to [EDOM].  If the in‐
                   teger  expression  (math_errhandling  &  MATH_ERREXCEPT) is
                   non-zero, then the invalid floating-point  exception  shall
                   be raised.

       Pole Error  The value of x is zero.

                   If  the  integer expression (math_errhandling & MATH_ERRNO)
                   is non-zero, then errno shall be set to [ERANGE].   If  the
                   integer  expression  (math_errhandling & MATH_ERREXCEPT) is
                   non-zero, then the divide-by-zero floating-point  exception
                   shall be raised.

       Range Error The value overflows.

                   If  the  integer expression (math_errhandling & MATH_ERRNO)
                   is non-zero, then errno shall be set to [ERANGE].   If  the
                   integer  expression  (math_errhandling & MATH_ERREXCEPT) is
                   non-zero, then the overflow floating-point exception  shall
                   be raised.

       These functions may fail if:

       Domain Error
                   The value of x is a negative integer.

                   If  the  integer expression (math_errhandling & MATH_ERRNO)
                   is non-zero, then errno shall be set to [EDOM].  If the in‐
                   teger  expression  (math_errhandling  &  MATH_ERREXCEPT) is
                   non-zero, then the invalid floating-point  exception  shall
                   be raised.

       Pole Error  The value of x is zero.

                   If  the  integer expression (math_errhandling & MATH_ERRNO)
                   is non-zero, then errno shall be set to [ERANGE].   If  the
                   integer  expression  (math_errhandling & MATH_ERREXCEPT) is
                   non-zero, then the divide-by-zero floating-point  exception
                   shall be raised.

       Range Error The result underflows.

                   If  the  integer expression (math_errhandling & MATH_ERRNO)
                   is non-zero, then errno shall be set to [ERANGE].   If  the
                   integer  expression  (math_errhandling & MATH_ERREXCEPT) is
                   non-zero, then the underflow floating-point exception shall
                   be raised.

       The following sections are informative.

EXAMPLES
       None.

APPLICATION USAGE
       On error, the expressions (math_errhandling & MATH_ERRNO) and (math_er‐
       rhandling & MATH_ERREXCEPT) are independent of each other, but at least
       one of them must be non-zero.

RATIONALE
       This  function  is  named tgamma() in order to avoid conflicts with the
       historical gamma() and lgamma() functions.

FUTURE DIRECTIONS
       It is possible that the error response for a negative integer  argument
       may be changed to a pole error and a return value of ±Inf.

SEE ALSO
       feclearexcept(), fetestexcept(), lgamma()

       The Base Definitions volume of POSIX.1‐2017, Section 4.20, Treatment of
       Error Conditions for Mathematical Functions, <math.h>

COPYRIGHT
       Portions of this text are reprinted and reproduced in  electronic  form
       from  IEEE Std 1003.1-2017, Standard for Information Technology -- Por‐
       table Operating System Interface (POSIX), The Open Group Base  Specifi‐
       cations  Issue  7, 2018 Edition, Copyright (C) 2018 by the Institute of
       Electrical and Electronics Engineers, Inc and The Open Group.   In  the
       event of any discrepancy between this version and the original IEEE and
       The Open Group Standard, the original IEEE and The Open Group  Standard
       is  the  referee document. The original Standard can be obtained online
       at http://www.opengroup.org/unix/online.html .

       Any typographical or formatting errors that appear  in  this  page  are
       most likely to have been introduced during the conversion of the source
       files to man page format. To report such errors,  see  https://www.ker‐
       nel.org/doc/man-pages/reporting_bugs.html .

IEEE/The Open Group                  2017                       TGAMMA(3POSIX)
