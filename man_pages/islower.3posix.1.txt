ISLOWER(3POSIX)            POSIX Programmer's Manual           ISLOWER(3POSIX)

PROLOG
       This  manual  page is part of the POSIX Programmer's Manual.  The Linux
       implementation of this interface may differ (consult the  corresponding
       Linux  manual page for details of Linux behavior), or the interface may
       not be implemented on Linux.

NAME
       islower, islower_l — test for a lowercase letter

SYNOPSIS
       #include <ctype.h>

       int islower(int c);
       int islower_l(int c, locale_t locale);

DESCRIPTION
       For islower(): The functionality described on this  reference  page  is
       aligned  with the ISO C standard. Any conflict between the requirements
       described here and the ISO C standard is unintentional. This volume  of
       POSIX.1‐2017 defers to the ISO C standard.

       The islower() and islower_l() functions shall test whether c is a char‐
       acter of class lower in the current locale, or  in  the  locale  repre‐
       sented  by  locale,  respectively;  see  the Base Definitions volume of
       POSIX.1‐2017, Chapter 7, Locale.

       The c argument is an int, the value of which the application shall  en‐
       sure  is  a character representable as an unsigned char or equal to the
       value of the macro EOF. If the argument has any other value, the behav‐
       ior is undefined.

       The  behavior is undefined if the locale argument to islower_l() is the
       special locale object LC_GLOBAL_LOCALE or is not a valid locale  object
       handle.

RETURN VALUE
       The islower() and islower_l() functions shall return non-zero if c is a
       lowercase letter; otherwise, they shall return 0.

ERRORS
       No errors are defined.

       The following sections are informative.

EXAMPLES
   Testing for a Lowercase Letter
       Two examples follow, the first using islower(), the second using multi‐
       ple concurrent locales and islower_l().

       The examples test whether the value is a lowercase letter, based on the
       current locale, then use it as part of a key value.

           /* Example 1 -- using islower() */
           #include <ctype.h>
           #include <stdlib.h>
           #include <locale.h>
           ...
           char *keystr;
           int elementlen, len;
           unsigned char c;
           ...
           setlocale(LC_ALL, "");
           ...
           len = 0;
           while (len < elementlen) {
               c = (unsigned char) (rand() % 256);
           ...
               if (islower(c))
                   keystr[len++] = c;
               }
           ...

           /* Example 2 -- using islower_l() */
           #include <ctype.h>
           #include <stdlib.h>
           #include <locale.h>
           ...
           char *keystr;
           int elementlen, len;
           unsigned char c;
           ...
           locale_t loc = newlocale (LC_ALL_MASK, "", (locale_t) 0);
           ...
           len = 0;
           while (len < elementlen) {
               c = (unsigned char) (rand() % 256);
           ...
               if (islower_l(c, loc))
                   keystr[len++] = c;
               }
           ...

APPLICATION USAGE
       To ensure applications  portability,  especially  across  natural  lan‐
       guages,  only  these functions and the functions in the reference pages
       listed in the SEE ALSO section should be used for character classifica‐
       tion.

RATIONALE
       None.

FUTURE DIRECTIONS
       None.

SEE ALSO
       isalnum(),  isalpha(),  isblank(), iscntrl(), isdigit(), isgraph(), is‐
       print(), ispunct(), isspace(), isupper(), isxdigit(), setlocale(), use‐
       locale()

       The  Base  Definitions  volume  of  POSIX.1‐2017,  Chapter  7,  Locale,
       <ctype.h>, <locale.h>

COPYRIGHT
       Portions of this text are reprinted and reproduced in  electronic  form
       from  IEEE Std 1003.1-2017, Standard for Information Technology -- Por‐
       table Operating System Interface (POSIX), The Open Group Base  Specifi‐
       cations  Issue  7, 2018 Edition, Copyright (C) 2018 by the Institute of
       Electrical and Electronics Engineers, Inc and The Open Group.   In  the
       event of any discrepancy between this version and the original IEEE and
       The Open Group Standard, the original IEEE and The Open Group  Standard
       is  the  referee document. The original Standard can be obtained online
       at http://www.opengroup.org/unix/online.html .

       Any typographical or formatting errors that appear  in  this  page  are
       most likely to have been introduced during the conversion of the source
       files to man page format. To report such errors,  see  https://www.ker‐
       nel.org/doc/man-pages/reporting_bugs.html .

IEEE/The Open Group                  2017                      ISLOWER(3POSIX)
