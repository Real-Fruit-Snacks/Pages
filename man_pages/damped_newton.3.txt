NAME

damped_newton -
nonlinear solver (rheolef-7.2)

SYNOPSIS

template

int damped_newton (const Problem& F, Field& u,
Real& tol, Size& max_iter, odiststream*
p_derr=0)

DESCRIPTION

This function
implements a generic damped Newton method for the resolution
of the following problem:

F(u) = 0

Recall that the
damped Newton method is more robust than the basic Newton
one: it converges from any initial value.

A simple call
to the algorithm writes:

my_problem P;

field uh (Xh); 
damped_newton (P, uh, tol, max_iter);

In addition to
the members required for the newton(3) method, two
additional members are required for the damped variant:

class
my_problem { 
public: 
... 
value_type derivative_trans_mult (const value_type& mrh)
const; 
Float space_norm (const value_type& uh) const; 
};

The
derivative_trans_mult is used for computing the
damping coefficient. The space_norm represents
usually a L2 norm e.g. formally:

/ 
space_norm(uh) = sqrt | |uh(x)|^2 dx 
/ Omega

EXAMPLE

See the
p_laplacian_damped_newton.cc example and the
usersguide for more.

IMPLEMENTATION

This
documentation has been generated from file
main/lib/damped_newton.h

AUTHOR

Pierre Saramito
Pierre.Saramito [AT] imag.fr>

COPYRIGHT

Copyright (C)
2000-2018 Pierre Saramito Pierre.Saramito [AT] imag.fr>
GPLv3+: GNU GPL version 3 or later
http://gnu.org/licenses/gpl.html>. This is free
software: you are free to change and redistribute it. There
is NO WARRANTY, to the extent permitted by law.