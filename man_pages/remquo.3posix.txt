REMQUO(3POSIX)             POSIX Programmer's Manual            REMQUO(3POSIX)

PROLOG
       This  manual  page is part of the POSIX Programmer's Manual.  The Linux
       implementation of this interface may differ (consult the  corresponding
       Linux  manual page for details of Linux behavior), or the interface may
       not be implemented on Linux.

NAME
       remquo, remquof, remquol — remainder functions

SYNOPSIS
       #include <math.h>

       double remquo(double x, double y, int *quo);
       float remquof(float x, float y, int *quo);
       long double remquol(long double x, long double y, int *quo);

DESCRIPTION
       The functionality described on this reference page is aligned with  the
       ISO C  standard.  Any  conflict between the requirements described here
       and the ISO C standard is unintentional. This  volume  of  POSIX.1‐2017
       defers to the ISO C standard.

       The remquo(), remquof(), and remquol() functions shall compute the same
       remainder as the remainder(), remainderf(), and remainderl() functions,
       respectively. In the object pointed to by quo, they store a value whose
       sign is the sign of x/y and whose magnitude is congruent modulo  2n  to
       the  magnitude of the integral quotient of x/y, where n is an implemen‐
       tation-defined integer greater than or equal to 3. If y  is  zero,  the
       value stored in the object pointed to by quo is unspecified.

       An  application  wishing to check for error situations should set errno
       to zero and  call  feclearexcept(FE_ALL_EXCEPT)  before  calling  these
       functions. On return, if errno is non-zero or fetestexcept(FE_INVALID |
       FE_DIVBYZERO | FE_OVERFLOW | FE_UNDERFLOW) is non-zero,  an  error  has
       occurred.

RETURN VALUE
       These functions shall return x REM y.

       On  systems that do not support the IEC 60559 Floating-Point option, if
       y is zero, it is implementation-defined whether a domain  error  occurs
       or zero is returned.

       If x or y is NaN, a NaN shall be returned.

       If  x  is ±Inf or y is zero and the other argument is non-NaN, a domain
       error shall occur, and a NaN shall be returned.

ERRORS
       These functions shall fail if:

       Domain Error
                   The x argument is ±Inf, or the y argument  is  ±0  and  the
                   other argument is non-NaN.

                   If  the  integer expression (math_errhandling & MATH_ERRNO)
                   is non-zero, then errno shall be set to [EDOM].  If the in‐
                   teger  expression  (math_errhandling  &  MATH_ERREXCEPT) is
                   non-zero, then the invalid floating-point  exception  shall
                   be raised.

       These functions may fail if:

       Domain Error
                   The y argument is zero.

                   If  the  integer expression (math_errhandling & MATH_ERRNO)
                   is non-zero, then errno shall be set to [EDOM].  If the in‐
                   teger  expression  (math_errhandling  &  MATH_ERREXCEPT) is
                   non-zero, then the invalid floating-point  exception  shall
                   be raised.

       The following sections are informative.

EXAMPLES
       None.

APPLICATION USAGE
       On error, the expressions (math_errhandling & MATH_ERRNO) and (math_er‐
       rhandling & MATH_ERREXCEPT) are independent of each other, but at least
       one of them must be non-zero.

RATIONALE
       These functions are intended for implementing argument reductions which
       can exploit a few low-order bits of the quotient. Note that x may be so
       large  in  magnitude  relative to y that an exact representation of the
       quotient is not practical.

FUTURE DIRECTIONS
       None.

SEE ALSO
       feclearexcept(), fetestexcept(), remainder()

       The Base Definitions volume of POSIX.1‐2017, Section 4.20, Treatment of
       Error Conditions for Mathematical Functions, <math.h>

COPYRIGHT
       Portions  of  this text are reprinted and reproduced in electronic form
       from IEEE Std 1003.1-2017, Standard for Information Technology --  Por‐
       table  Operating System Interface (POSIX), The Open Group Base Specifi‐
       cations Issue 7, 2018 Edition, Copyright (C) 2018 by the  Institute  of
       Electrical  and  Electronics Engineers, Inc and The Open Group.  In the
       event of any discrepancy between this version and the original IEEE and
       The  Open Group Standard, the original IEEE and The Open Group Standard
       is the referee document. The original Standard can be  obtained  online
       at http://www.opengroup.org/unix/online.html .

       Any  typographical  or  formatting  errors that appear in this page are
       most likely to have been introduced during the conversion of the source
       files  to  man page format. To report such errors, see https://www.ker‐
       nel.org/doc/man-pages/reporting_bugs.html .

IEEE/The Open Group                  2017                       REMQUO(3POSIX)
