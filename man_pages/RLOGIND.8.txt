RLOGIND(8) BSD System Manager’s Manual
RLOGIND(8)

NAME

rlogind — remote
login server

SYNOPSIS

rlogind
[-afhlLn]

DESCRIPTION

Rlogind is the server for
the rlogin(1) program. The server provides a remote login
facility with authentication based on privileged port
numbers from trusted hosts.

Options
supported by rlogind:

-a

This option
exists for compatibility with historical systems.

-f

Disable the
Nagle algorithm. This is only needed to work around some
broken operating systems.

-h

Permit use of
superuser “.rhosts” files.

-l

Prevent any
authentication based on the user’s
“.rhosts” file. If the user is logging in
as the superuser and the -h option is used,
“.rhosts” processing is still
enabled.

-L

Prevent any
authentication based on “.rhosts” or
“hosts.equiv” information.

-n

Disable
keep-alive messages.

The -h, -l, and
-L flags are not used if PAM (Pluggable Authentication
Module) support is in use.

The -h
and -l options should also not be trusted without
verifying that they work as expected with the particular
version of libc installed on your system (and should be
tested again after any libc update) because some versions of
libc may not honor the internal flags used by
rlogind. As the -L option bypasses the libc
functions entirely, it is not subject to this problem.

Also note that
the design of the .rhosts system is COMPLETELY
INSECURE except on a carefully firewalled private network.
Always use the -L option under all other
circumstances. Also, since rlogind does not encrypt
communications, it should not, in general, be used at all.
Consider ssh(8).

Rlogind
listens for service requests at the port indicated in the
’’login’’ service specification; see
services(5). When a service request is received the
following protocol is initiated:

1.

The server checks the
client’s source port. If the port is not in the range
512-1023, the server aborts the connection.

2.

The server checks the
client’s source address and requests the corresponding
host name (see gethostbyaddr(3), hosts(5) and named(8)). If
the hostname cannot be determined, the dot-notation
representation of the host address is used. The addresses
for the hostname are requested, verifying that the name and
address correspond. Normal authentication is bypassed if the
address verification fails.

Once the source
port and address have been checked, rlogind proceeds
with the authentication process described in rshd(8). It
then allocates a pseudo terminal (see pty(4)), and
manipulates file descriptors so that the slave half of the
pseudo terminal becomes the stdin, stdout, and
stderr for a login process. The login process is an
instance of the login(1) program, invoked with the -f
option if authentication has succeeded. If automatic
authentication fails, the user is prompted to log in as if
on a standard terminal line.

The parent of
the login process manipulates the master side of the pseudo
terminal, operating as an intermediary between the login
process and the client instance of the rlogin program. In
normal operation, the packet protocol described in pty(4) is
invoked to provide ’^S/^Q’ type facilities and
propagate interrupt signals to the remote programs. The
login process propagates the client terminal’s baud
rate and terminal type, as found in the environment
variable, ’TERM’; see environ(7). The screen or
window size of the terminal is requested from the client,
and window size changes from the client are propagated to
the pseudo terminal.

Transport-level
keepalive messages are enabled unless the -n option
is present. The use of keepalive messages allows sessions to
be timed out if the client crashes or becomes
unreachable.

DIAGNOSTICS

All initial diagnostic messages
are indicated by a leading byte with a value of 1, after
which any network connections are closed. If there are no
errors before login is invoked, a null byte is returned as
in indication of success.

Try again.

A fork by the server
failed.

SEE ALSO

login(1), ruserok(3),
rshd(8)

BUGS

The authentication procedure
used here assumes the integrity of each client machine and
the connecting medium. This is insecure, but is useful in an
’’open’’ environment.

A facility to
allow all data exchanges to be encrypted should be
present.

A more
extensible protocol should be used.

HISTORY

The rlogind command
appeared in 4.2BSD.

Linux NetKit
(0.17) March 16, 1991 Linux NetKit (0.17)