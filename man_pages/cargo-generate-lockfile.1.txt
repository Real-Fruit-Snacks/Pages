NAME

cargo-generate-lockfile
&mdash; Generate the lockfile for a package

SYNOPSIS

cargo
generate-lockfile [options]

DESCRIPTION

This command
will create the Cargo.lock lockfile for the current
package or workspace. If the lockfile already exists, it
will be rebuilt with the latest available version of every
package.

See also
cargo-update(1) which is also capable of creating a
Cargo.lock lockfile and has more options for
controlling update behavior.

OPTIONS

Display
Options 
-v, --verbose

Use verbose output. May be
specified twice for &ldquo;very verbose&rdquo; output which
includes extra output such as dependency warnings and build
script output. May also be specified with the
term.verbose config value
https://doc.rust-lang.org/cargo/reference/config.html&gt;.

-q,
--quiet

Do not print cargo log
messages. May also be specified with the term.quiet
config value
https://doc.rust-lang.org/cargo/reference/config.html&gt;.

--color
when

Control when colored output is
used. Valid values:

&bull;
auto (default): Automatically detect if color support
is available on the terminal.

&bull;
always: Always display colors.

&bull;
never: Never display colors.

May also be
specified with the term.color config value
https://doc.rust-lang.org/cargo/reference/config.html&gt;.

Manifest
Options 
--manifest-path path

Path to the Cargo.toml
file. By default, Cargo searches for the Cargo.toml
file in the current directory or any parent directory.

--ignore-rust-version

Ignore rust-version
specification in packages.

--locked

Asserts that the exact same
dependencies and versions are used as when the existing
Cargo.lock file was originally generated. Cargo will
exit with an error when either of the following scenarios
arises:

&bull; The lock
file is missing.

&bull; Cargo
attempted to change the lock file due to a different
dependency resolution.

It may be used
in environments where deterministic builds are desired, such
as in CI pipelines.

--offline

Prevents Cargo from accessing
the network for any reason. Without this flag, Cargo will
stop with an error if it needs to access the network and the
network is not available. With this flag, Cargo will attempt
to proceed without the network if possible.

Beware that
this may result in different dependency resolution than
online mode. Cargo will restrict itself to crates that are
downloaded locally, even if there might be a newer version
as indicated in the local copy of the index. See the
cargo-fetch(1) command to download dependencies
before going offline.

May also be
specified with the net.offline config value
https://doc.rust-lang.org/cargo/reference/config.html&gt;.

--frozen

Equivalent to specifying both
--locked and --offline.

Common
Options 
+toolchain

If Cargo has been installed
with rustup, and the first argument to cargo begins
with +, it will be interpreted as a rustup toolchain
name (such as +stable or +nightly). See the
rustup documentation
https://rust-lang.github.io/rustup/overrides.html&gt;
for more information about how toolchain overrides work.

--config
KEY=VALUE or PATH

Overrides a Cargo configuration
value. The argument should be in TOML syntax of
KEY=VALUE, or provided as a path to an extra
configuration file. This flag may be specified multiple
times. See the command-line overrides section
https://doc.rust-lang.org/cargo/reference/config.html#command-line-overrides&gt;
for more information.

-C
PATH

Changes the current working
directory before executing any specified operations. This
affects things like where cargo looks by default for the
project manifest (Cargo.toml), as well as the
directories searched for discovering
.cargo/config.toml, for example. This option must
appear before the command name, for example cargo -C
path/to/my-project build.

This option is
only available on the nightly channel
https://doc.rust-lang.org/book/appendix-07-nightly-rust.html&gt;
and requires the -Z unstable-options flag to enable
(see #10098
https://github.com/rust-lang/cargo/issues/10098&gt;).

-h,
--help

Prints help information.

-Z
flag

Unstable (nightly-only) flags
to Cargo. Run cargo -Z help for details.

ENVIRONMENT

See the
reference
https://doc.rust-lang.org/cargo/reference/environment-variables.html&gt;
for details on environment variables that Cargo reads.

EXIT STATUS

&bull;
0: Cargo succeeded.

&bull;
101: Cargo failed to complete.

EXAMPLES

1. Create or
update the lockfile for the current package or
workspace:

cargo
generate-lockfile

SEE ALSO

cargo(1),
cargo-update(1)