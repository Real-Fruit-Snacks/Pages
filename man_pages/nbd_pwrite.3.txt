NAME

nbd_pwrite -
write to the NBD server

SYNOPSIS

#include

int nbd_pwrite ( 
struct nbd_handle *h, const void *buf, size_t count, 
uint64_t offset, uint32_t flags 
);

DESCRIPTION

Issue a write
command to the NBD server, writing the data in
"buf" to the range starting at "offset"
and ending at "offset" + "count" - 1.
NBD can only write all or nothing using this call. The call
returns when the command has been acknowledged by the
server, or there is an error. Note this will generally
return an error if nbd_is_read_only(3) is true.

Note that
libnbd defaults to enforcing a maximum write buffer of the
lesser of 64MiB or any maximum payload size advertised by
the server; attempts to exceed this will generally result in
a client-side "ERANGE" error, rather than a
server-side disconnection. The actual limit can be learned
with nbd_get_block_size(3).

The
"flags" parameter may be 0 for no flags, or may
contain "LIBNBD_CMD_FLAG_FUA" meaning that the
server should not return until the data has been committed
to permanent storage (if that is supported - some servers
cannot do this, see nbd_can_fua(3)). For convenience,
unless nbd_set_strict_flags(3) was used to disable
"LIBNBD_STRICT_AUTO_FLAG", libnbd ignores the
presence or absence of the flag
"LIBNBD_CMD_FLAG_PAYLOAD_LEN" in
"flags", while correctly using the flag over the
wire according to whether extended headers were
negotiated.

By default,
libnbd will reject attempts to use this function with
parameters that are likely to result in server failure, such
as requesting an unknown command flag. The
nbd_set_strict_mode(3) function can be used to alter
which scenarios should await a server reply rather than
failing fast.

RETURN VALUE

If the call is
successful the function returns 0.

ERRORS

On error -1 is
returned.

Refer to
"ERROR HANDLING" in libnbd(3) for how to
get further details of the error.

The following
parameters must not be NULL: "h", "buf".
For more information see "Non-NULL parameters" in
libnbd(3).

HANDLE STATE

nbd_pwrite can
be called when the handle is in the following state:

&#9484;&#9472;&#9472;&#9472;&#9472;&#9472;&#9472;&#9472;&#9472;&#9472;&#9472;&#9472;&#9472;&#9472;&#9472;&#9472;&#9472;&#9472;&#9472;&#9472;&#9472;&#9472;&#9472;&#9472;&#9472;&#9472;&#9472;&#9472;&#9472;&#9472;&#9472;&#9472;&#9472;&#9472;&#9472;&#9472;&#9472;&#9472;&#9516;&#9472;&#9472;&#9472;&#9472;&#9472;&#9472;&#9472;&#9472;&#9472;&#9472;&#9472;&#9472;&#9472;&#9472;&#9472;&#9472;&#9472;&#9472;&#9472;&#9472;&#9472;&#9472;&#9472;&#9472;&#9472;&#9488;

&#9474; Handle created, before connecting &#9474; &#10060;
error &#9474; 
&#9474; Connecting &#9474; &#10060; error &#9474; 
&#9474; Connecting & handshaking (opt_mode) &#9474;
&#10060; error &#9474; 
&#9474; Connected to the server &#9474; &#9989; allowed
&#9474; 
&#9474; Connection shut down &#9474; &#10060; error &#9474;

&#9474; Handle dead &#9474; &#10060; error &#9474; 

&#9492;&#9472;&#9472;&#9472;&#9472;&#9472;&#9472;&#9472;&#9472;&#9472;&#9472;&#9472;&#9472;&#9472;&#9472;&#9472;&#9472;&#9472;&#9472;&#9472;&#9472;&#9472;&#9472;&#9472;&#9472;&#9472;&#9472;&#9472;&#9472;&#9472;&#9472;&#9472;&#9472;&#9472;&#9472;&#9472;&#9472;&#9472;&#9524;&#9472;&#9472;&#9472;&#9472;&#9472;&#9472;&#9472;&#9472;&#9472;&#9472;&#9472;&#9472;&#9472;&#9472;&#9472;&#9472;&#9472;&#9472;&#9472;&#9472;&#9472;&#9472;&#9472;&#9472;&#9472;&#9496;

VERSION

This function
first appeared in libnbd 1.0.

If you need to
test if this function is available at compile time check if
the following macro is defined:

#define
LIBNBD_HAVE_NBD_PWRITE 1

EXAMPLE

This example is
also available as examples/reads-and-writes.c in the
libnbd source code.

/* This example
shows how to do synchronous reads 
* and writes randomly over the first megabyte of an 
* NBD server. Note this will destroy any existing 
* content on the NBD server. 
* 
* To test it with nbdkit and a RAM disk: 
* 
* nbdkit -U - memory 1M \ 
* --run './simple-reads-and-writes $unixsocket' 
*/ 
#include  
#include  
#include  
#include  
#include  
#include  
#include  
int 
main (int argc, char *argv[]) 
{ 
struct nbd_handle *nbd; 
char buf[512]; 
size_t i; 
int64_t exportsize; 
uint64_t offset; 
srand (time (NULL)); 
if (argc != 2) { 
fprintf (stderr, "%s socket\n", argv[0]); 
exit (EXIT_FAILURE); 
} 
/* Create the libnbd handle. */ 
nbd = nbd_create (); 
if (nbd == NULL) { 
fprintf (stderr, "%s\n", nbd_get_error ()); 
exit (EXIT_FAILURE); 
} 
/* Connect to the NBD server over a 
* Unix domain socket. 
*/ 
if (nbd_connect_unix (nbd, argv[1]) == -1) { 
fprintf (stderr, "%s\n", nbd_get_error ()); 
exit (EXIT_FAILURE); 
} 
/* Get the size of the disk and check 
* it's large enough. 
*/ 
exportsize = nbd_get_size (nbd); 
if (exportsize == -1) { 
fprintf (stderr, "%s\n", nbd_get_error ()); 
exit (EXIT_FAILURE); 
} 
assert (exportsize >= sizeof buf); 
/* Check that the server is writable. */ 
if (nbd_is_read_only (nbd) == 1) { 
fprintf (stderr, "%s: " 
"error: this NBD export is read-only\n", 
argv[0]); 
exit (EXIT_FAILURE); 
} 
for (i = 0; i 
buf[i] = rand (); 
/* 1000 writes. */ 
for (i = 0; i 
offset = rand () % (exportsize - sizeof buf); 
if (nbd_pwrite (nbd, buf, sizeof buf, 
offset, 0) == -1) { 
fprintf (stderr, "%s\n", nbd_get_error ()); 
exit (EXIT_FAILURE); 
} 
} 
/* 1000 reads and writes. */ 
for (i = 0; i 
offset = rand () % (exportsize - sizeof buf); 
if (nbd_pread (nbd, buf, sizeof buf, 
offset, 0) == -1) { 
fprintf (stderr, "%s\n", nbd_get_error ()); 
exit (EXIT_FAILURE); 
} 
offset = rand () % (exportsize - sizeof buf); 
if (nbd_pwrite (nbd, buf, sizeof buf, 
offset, 0) == -1) { 
fprintf (stderr, "%s\n", nbd_get_error ()); 
exit (EXIT_FAILURE); 
} 
} 
/* Sends a graceful shutdown to the server. */ 
if (nbd_shutdown (nbd, 0) == -1) { 
fprintf (stderr, "%s\n", nbd_get_error ()); 
exit (EXIT_FAILURE); 
} 
nbd_close (nbd); 
exit (EXIT_SUCCESS); 
}

SEE ALSO

nbd_aio_pwrite(3),
nbd_can_fua(3), nbd_create(3),
nbd_get_block_size(3), nbd_is_read_only(3),
nbd_set_strict_mode(3), libnbd(3).

AUTHORS

Eric Blake

Richard W.M.
Jones

COPYRIGHT

Copyright Red
Hat

LICENSE

This library is
free software; you can redistribute it and/or modify it
under the terms of the GNU Lesser General Public License as
published by the Free Software Foundation; either version 2
of the License, or (at your option) any later version.

This library is
distributed in the hope that it will be useful, but WITHOUT
ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
GNU Lesser General Public License for more details.

You should have
received a copy of the GNU Lesser General Public License
along with this library; if not, write to the Free Software
Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston,
MA 02110-1301 USA