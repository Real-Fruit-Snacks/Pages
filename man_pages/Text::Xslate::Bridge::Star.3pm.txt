Text::Xslate::Bridge::User(Contributed Perl DocText::Xslate::Bridge::Star(3pm)

NAME
       Text::Xslate::Bridge::Star - Selection of common utilities for
       templates

SYNOPSIS
           use Text::Xslate;

           my $tx = Text::Xslate->new(
               module => ['Text::Xslate::Bridge::Star'],
           );

DESCRIPTION
       This module provides a selection of utilities for templates.

FUNCTIONS
   "lc($str)"
       Returns a lower-cased version of $str.  The same as "CORE::lc()", but
       returns undef if $str is undef.

       See "lc" in perldoc for details.

   "uc($str)"
       Returns a upper-cased version of $str.  The same as "CORE::uc()", but
       returns undef if $str is undef.

       See "uc" in perldoc for details.

   "substr($str, $offset, $len)"
       Extracts a substring out of $str and returns it.  The same as
       "CORE::substr()", but returns undef if $str is undef.

       See "substr" in perldoc for details.

   "sprintf($fmt, args...)"
       Returns a string formatted by the "CORE::sprintf()".  $fmt must be a
       defined value.

       See "sprintf" in perldoc for details.

   "rx($regex_pattern)"
       Compiles $regex_patter as a regular expression and return the regex
       object. You can pass a regex object to "match()" or "replace()"
       described below.  The same as "qr//" operator in Perl.

   "match($str, $pattern)"
       Tests if $str matches $pattern. $pattern may be a string or a regex
       object.

       Like "$str =~ $pattern" in Perl but you have to pass a regex object
       explicitly if you can use regular expressions.

       Examples:

           : match("foo bar baz", "foo")     ? "true" : "false" # true
           : match("foo bar baz", "f..")     ? "true" : "false" # false
           : match("foo bar baz", rx("f..")) ? "true" : "false" # true

   "replace($str, $pattern, $replacement)"
       Replaces all the $patterns in $str with $replacements.  Like as "$str
       =~ s/$pattern/$replacement/g" but you have to pass a regex object
       explicitly if you can use regular expressions.

   "split($str [, $pattern [, $limit]])"
       Splits the string $str into a list of strings and returns the list.

SEE ALSO
       Text::Xslate

       Text::Xslate::Bridge

       perlfunc

perl v5.36.0                      2022-10-20   Text::Xslate::Bridge::Star(3pm)
