NAME

podman-kube-play
- Create containers, pods and volumes based on Kubernetes
YAML

SYNOPSIS

podman kube
play [options]
file.yml|-|https://website.io/file.yml

DESCRIPTION

podman
kube play reads in a structured file of Kubernetes
YAML. It recreates the containers, pods, or volumes
described in the YAML. Containers within a pod are then
started, and the ID of the new Pod or the name of the new
Volume is output. If the YAML file is specified as
"-", then podman kube play reads the YAML
file from stdin. The input can also be a URL that points to
a YAML file such as https://podman.io/demo.yml. podman
kube play reads the YAML from the URL and create pods
and containers from it.

Using the
--down command line option, it is also capable of
tearing down the pods created by a previous run of podman
kube play.

Using the
--replace command line option, it tears down the
pods(if any) created by a previous run of podman kube
play and recreate the pods with the Kubernetes YAML
file.

Ideally the
input file is created by Podman (see
podman-kube-generate(1)). This guarantees a smooth import
and expected results.

Currently, the
supported Kubernetes kinds are:

&bull;

Pod

&bull;

Deployment

&bull;

PersistentVolumeClaim

&bull;

ConfigMap

&bull;

Secret

&bull;

DaemonSet

Kubernetes
Pods or Deployments

Only three
volume types are supported by kube play, the
hostPath, emptyDir, and
persistentVolumeClaim volume types.

&bull;

When using the hostPath
volume type, only the default (empty),
DirectoryOrCreate, Directory,
FileOrCreate, File, Socket,
CharDevice and BlockDevice subtypes are
supported. Podman interprets the value of hostPath
path as a file path when it contains at least one
forward slash, otherwise Podman treats the value as the name
of a named volume.

&bull;

When using a persistentVolumeClaim, the value for
claimName is the name for the Podman named
volume. 

&bull;

When using an emptyDir volume, Podman creates an
anonymous volume that is attached the containers running
inside the pod and is deleted once the pod is removed.

Note: The
default restart policy for containers is always. You
can change the default by setting the restartPolicy
field in the spec.

Note: When
playing a kube YAML with init containers, the init container
is created with init type value once. To change the
default type, use the
io.podman.annotations.init.container.type annotation
to set the type to always.

Note:
hostPath volume types created by kube play is given
an SELinux shared label (z), bind mounts are not relabeled
(use chcon -t container_file_t -R
).

Note: If the
:latest tag is used, Podman attempts to pull the
image from a registry. If the image was built locally with
Podman or Buildah, it has localhost as the domain, in
that case, Podman uses the image from the local store even
if it has the :latest tag.

Note: The
command podman play kube is an alias of podman
kube play, and performs the same function.

Note: The
command podman kube down can be used to stop and
remove pods or containers based on the same Kubernetes YAML
used by podman kube play to create them.

Note: To
customize the name of the infra container created during
podman kube play, use the
io.podman.annotations.infra.name annotation in the
pod definition. This annotation is automatically set when
generating a kube yaml from a pod that was created with the
--infra-name flag set.

Kubernetes
PersistentVolumeClaims

A Kubernetes
PersistentVolumeClaim represents a Podman named volume. Only
the PersistentVolumeClaim name is required by Podman to
create a volume. Kubernetes annotations can be used to make
use of the available options for Podman volumes.

&bull;

volume.podman.io/driver

&bull;

volume.podman.io/device

&bull;

volume.podman.io/type

&bull;

volume.podman.io/uid

&bull;

volume.podman.io/gid

&bull;

volume.podman.io/mount-options

&bull;

volume.podman.io/import-source

Use
volume.podman.io/import-source to import the contents
of the tarball (.tar, .tar.gz, .tgz, .bzip, .tar.xz, .txz)
specified in the annotation&rsquo;s value into the created
Podman volume

Kube play is
capable of building images on the fly given the correct
directory layout and Containerfiles. This option is not
available for remote clients, including Mac and Windows
(excluding WSL2) machines, yet. Consider the following
excerpt from a YAML file:

apiVersion: v1

kind: Pod 
metadata: 
... 
spec: 
containers: 
- name: container 
image: foobar 
...

If there is a
directory named foobar in the current working
directory with a file named Containerfile or
Dockerfile, Podman kube play builds that image and
name it foobar. An example directory structure for
this example looks like:

|- mykubefiles

|- myplayfile.yaml 
|- foobar 
|- Containerfile

The build
considers foobar to be the context directory for the
build. If there is an image in local storage called
foobar, the image is not built unless the
--build flag is used. Use --build=false to
completely disable builds.

Kubernetes
ConfigMap

Kubernetes
ConfigMap can be referred as a source of environment
variables or volumes in Pods or Deployments. ConfigMaps
aren&rsquo;t a standalone object in Podman; instead, when a
container uses a ConfigMap, Podman creates environment
variables or volumes as needed.

For example,
the following YAML document defines a ConfigMap and then
uses it in a Pod:

apiVersion: v1

kind: ConfigMap 
metadata: 
name: foo 
data: 
FOO: bar 
--- 
apiVersion: v1 
kind: Pod 
metadata: 
name: foobar 
spec: 
containers: 
- name: container-1 
image: foobar 
envFrom: 
- configMapRef: 
name: foo 
optional: false

and as a result
environment variable FOO is set to bar for
container container-1.

Kubernetes
Secret

Kubernetes
Secret represents a Podman named secret. The Kubernetes
Secret is saved as a whole and may be referred to as a
source of environment variables or volumes in Pods or
Deployments.

For example,
the following YAML document defines a Secret and then uses
it in a Pod:

kind: Secret

apiVersion: v1 
metadata: 
name: foo 
data: 
foo: YmFy # base64 for bar 
--- 
apiVersion: v1 
kind: Pod 
metadata: 
name: foobar 
spec: 
containers: 
- name: container-1 
image: foobar 
env: 
- name: FOO 
valueFrom: 
secretKeyRef: 
name: foo 
key: foo

and as a result
environment variable FOO is set to bar for
container container-1.

OPTIONS

--annotation=key=value

Add an annotation to the container or pod. This option can
be set multiple times.

--authfile=path

Path of the authentication file. Default is
${XDG_RUNTIME_DIR}/containers/auth.json on Linux, and
$HOME/.config/containers/auth.json on Windows/macOS.
The file is created by podman login. If the
authorization state is not found there,
$HOME/.docker/config.json is checked, which is set
using docker login.

Note: There is
also the option to override the default path of the
authentication file by setting the REGISTRY_AUTH_FILE
environment variable. This can be done with export
REGISTRY_AUTH_FILE=path.

--build

Build images even if they are found in the local storage.
Use --build=false to completely disable builds. (This
option is not available with the remote Podman client)

Note: You can
also override the default isolation type by setting the
BUILDAH_ISOLATION environment variable. export
BUILDAH_ISOLATION=oci. See podman-build.1.md for more
information.

--cert-dir=path

Use certificates at path (*.crt, *.cert, *.key) to
connect to the registry. (Default: /etc/containers/certs.d)
For details, see containers-certs.d(5). (This option
is not available with the remote Podman client, including
Mac and Windows (excluding WSL2) machines)

--configmap=path

Use Kubernetes configmap YAML at path to provide a source
for environment variable values within the containers of the
pod. (This option is not available with the remote Podman
client)

Note: The
--configmap option can be used multiple times or a
comma-separated list of paths can be used to pass multiple
Kubernetes configmap YAMLs. The YAML file may be in a
multi-doc YAML format. But, it must container only
configmaps

--context-dir=path

Use path as the build context directory for each
image. Requires --build option be true. (This option is not
available with the remote Podman client)

--creds=[username[:password]]

The [username[:password]] to use to authenticate with the
registry, if required. If one or both values are not
supplied, a command line prompt appears and the value can be
entered. The password is entered without echo.

Note that the
specified credentials are only used to authenticate against
target registries. They are not used for mirrors or when the
registry gets rewritten (see
containers-registries.conf(5)); to authenticate
against those consider using a
containers-auth.json(5) file.

--force

Tear down the volumes linked to the PersistentVolumeClaims
as part of --down

--help,
-h 
Print usage statement

--ip=IP
address 
Assign a static ip address to the pod. This option can be
specified several times when kube play creates more than one
pod. Note: When joining multiple networks use the
--network name:ip= syntax.

--log-driver=driver

Set logging driver for all created containers.

--log-opt=name=value

Logging driver specific options.

Set custom
logging configuration. The following *name*s are
supported:

path:
specify a path to the log file 
(e.g. --log-opt
path=/var/log/container/mycontainer.json);

max-size:
specify a max size of the log file 
(e.g. --log-opt max-size=10mb);

tag:
specify a custom log tag for the container 
(e.g. --log-opt tag="{{.ImageName}}". It
supports the same keys as podman inspect --format.
This option is currently supported only by the
journald log driver.

--mac-address=MAC
address 
Assign a static mac address to the pod. This option can be
specified several times when kube play creates more than one
pod. Note: When joining multiple networks use the
--network name:mac= syntax.

--network=mode,
--net 
Set the network mode for the pod.

Valid
mode values are:

&bull;

bridge[:OPTIONS,...]:
Create a network stack on the default bridge. This is the
default for rootful containers. It is possible to specify
these additional options:

&bull;

alias=name: Add
network-scoped alias for the container.

&bull;

ip=IPv4: Specify a static ipv4 address for this
container. 

&bull;

ip=IPv6: Specify a static ipv6 address for this
container. 

&bull;

mac=MAC: Specify a static mac address for this
container. 

&bull;

interface_name: Specify a name for the created
network interface inside the container.

For example to
set a static ipv4 address and a static mac address, use
--network
bridge:ip=10.88.0.10,mac=44:33:22:11:00:99.

&bull;

[:OPTIONS,...]: Connect to a user-defined network;
this is the network name or ID from a network created by
podman network create. Using the network name implies
the bridge network mode. It is possible to specify the same
options described under the bridge mode above. Use the
--network option multiple times to specify additional
networks. For backwards compatibility it is also possible to
specify networks comma separated on the first
--network argument, however this prevents you from
using the options described under the bridge section
above. 

&bull;

none: Create a network namespace for the
container but do not configure network interfaces for it,
thus the container has no network connectivity.

&bull;

container:id: Reuse another
container&rsquo;s network stack.

&bull;

host: Do not create a network namespace, the
container uses the host&rsquo;s network. Note: The host mode
gives the container full access to local system services
such as D-bus and is therefore considered insecure.

&bull;

ns:path: Path to a network namespace to
join. 

&bull;

private: Create a new namespace for the
container. This uses the bridge mode for rootful
containers and slirp4netns for rootless ones.

&bull;

slirp4netns[:OPTIONS,...]: use
slirp4netns(1) to create a user network stack. This
is the default for rootless containers. It is possible to
specify these additional options, they can also be set with
network_cmd_options in containers.conf:

&bull;

allow_host_loopback=true|false:
Allow slirp4netns to reach the host loopback IP (default is
10.0.2.2 or the second IP from slirp4netns cidr subnet when
changed, see the cidr option below). The default is
false. 

&bull;

mtu=MTU: Specify the MTU to use for this network.
(Default is 65520).

&bull;

cidr=CIDR: Specify ip range to use for this
network. (Default is 10.0.2.0/24).

&bull;

enable_ipv6=true|false: Enable IPv6. Default is
true. (Required for outbound_addr6).

&bull;

outbound_addr=INTERFACE: Specify the outbound
interface slirp binds to (ipv4 traffic only).

&bull;

outbound_addr=IPv4: Specify the outbound ipv4
address slirp binds to.

&bull;

outbound_addr6=INTERFACE: Specify the outbound
interface slirp binds to (ipv6 traffic only).

&bull;

outbound_addr6=IPv6: Specify the outbound ipv6
address slirp binds to.

&bull;

port_handler=rootlesskit: Use rootlesskit for
port forwarding. Default. Note: Rootlesskit changes the
source IP address of incoming packets to an IP address in
the container network namespace, usually 10.0.2.100.
If the application requires the real source IP address, e.g.
web server logs, use the slirp4netns port handler. The
rootlesskit port handler is also used for rootless
containers when connected to user-defined networks.

&bull;

port_handler=slirp4netns: Use the slirp4netns
port forwarding, it is slower than rootlesskit but preserves
the correct source IP address. This port handler cannot be
used for user-defined networks.

&bull;

pasta[:OPTIONS,...]:
use pasta(1) to create a user-mode networking stack.

This is only supported in rootless mode. 
By default, IPv4 and IPv6 addresses and routes, as well as
the pod interface name, are copied from the host. If port
forwarding isn&rsquo;t configured, ports are forwarded
dynamically as services are bound on either side (init
namespace or container namespace). Port forwarding preserves
the original source IP address. Options described in
pasta(1) can be specified as comma-separated arguments. 
In terms of pasta(1) options, --config-net is given
by default, in order to configure networking when the
container is started, and --no-map-gw is also assumed
by default, to avoid direct access from container to host
using the gateway address. The latter can be overridden by
passing --map-gw in the pasta-specific options
(despite not being an actual pasta(1) option). 
Also, -t none and -u none are passed if,
respectively, no TCP or UDP port forwarding from host to
container is configured, to disable automatic port
forwarding based on bound ports. Similarly, -T none
and -U none are given to disable the same
functionality from container to host. 
Some examples:

&bull;

pasta:--map-gw: Allow the
container to directly reach the host using the gateway
address. 

&bull;

pasta:--mtu,1500: Specify a 1500 bytes MTU for
the tap interface in the container.

&bull;

pasta:--ipv4-only,-a,10.0.2.0,-n,24,-g,10.0.2.2,--dns-forward,10.0.2.3,-m,1500,--no-ndp,--no-dhcpv6,--no-dhcp,
equivalent to default slirp4netns(1) options: disable IPv6,
assign 10.0.2.0/24 to the tap0 interface in
the container, with gateway 10.0.2.3, enable DNS
forwarder reachable at 10.0.2.3, set MTU to 1500
bytes, disable NDP, DHCPv6 and DHCP support.

&bull;

pasta:-I,tap0,--ipv4-only,-a,10.0.2.0,-n,24,-g,10.0.2.2,--dns-forward,10.0.2.3,--no-ndp,--no-dhcpv6,--no-dhcp,
equivalent to default slirp4netns(1) options with Podman
overrides: same as above, but leave the MTU to 65520
bytes 

&bull;

pasta:-t,auto,-u,auto,-T,auto,-U,auto: enable
automatic port forwarding based on observed bound ports from
both host and container sides

&bull;

pasta:-T,5201: enable forwarding of TCP port 5201
from container to host, using the loopback interface instead
of the tap interface for improved performance

NOTE: For
backward compatibility reasons, if there is an existing
network named pasta, Podman uses it instead of the
pasta mode."?

When no network
option is specified and host network mode is not
configured in the YAML file, a new network stack is created
and pods are attached to it making possible pod to pod
communication.

--no-hosts

Do not create /etc/hosts for the pod. By default,
Podman manages /etc/hosts, adding the
container&rsquo;s own IP address and any hosts from
--add-host. --no-hosts disables this, and the
image&rsquo;s /etc/hosts is preserved unmodified.

This option
conflicts with host added in the Kubernetes YAML.

--no-trunc

Use annotations that are not truncated to the Kubernetes
maximum length of 63 characters

--publish=[[ip:][hostPort]:]containerPort[/protocol]

Define or override a port definition in the YAML file.

The lists of
ports in the YAML file and the command line are merged.
Matching is done by using the containerPort field. If
containerPort exists in both the YAML file and the
option, the latter takes precedence.

--publish-all

Setting this option to true will expose all ports to
the host, even if only specified via containerPort in
the K8 YAML. In terms of which port will be exposed,
--publish has higher priority than hostPort,
has higher priority than containerPort.

If set to
false (which is the default), only ports defined via
hostPort or --publish are published on the
host.

--quiet,
-q 
Suppress output information when pulling images

--replace

Tears down the pods created by a previous run of kube
play and recreates the pods. This option is used to keep
the existing pods up to date based upon the Kubernetes
YAML.

--seccomp-profile-root=path

Directory path for seccomp profiles (default:
"/var/lib/kubelet/seccomp"). (This option is not
available with the remote Podman client, including Mac and
Windows (excluding WSL2) machines)

--start

Start the pod after creating it, set to false to only create
it.

--tls-verify

Require HTTPS and verify certificates when contacting
registries (default: true). If explicitly set to
true, TLS verification is used. If set to
false, TLS verification is not used. If not
specified, TLS verification is used unless the target
registry is listed as an insecure registry in
containers-registries.conf(5)

--userns=mode

Set the user namespace mode for the container.

If
--userns is not set, the default value is determined
as follows. - If --pod is set, --userns is
ignored and the user namespace of the pod is used. - If the
environment variable PODMAN_USERNS is set its value
is used. - If userns is specified in
containers.conf this value is used. - Otherwise,
--userns=host is assumed.

--userns=""
(i.e., an empty string) is an alias for
--userns=host.

This option is
incompatible with --gidmap, --uidmap,
--subuidname and --subgidname.

Rootless user
--userns=Key mappings:

Valid mode values
are:

auto[:OPTIONS,...]:
automatically create a unique user namespace.

&bull;

rootful mode: The
--userns=auto flag requires that the user name
containers be specified in the /etc/subuid and
/etc/subgid files, with an unused range of subordinate user
IDs that Podman containers are allowed to allocate.

Example:
containers:2147483647:2147483648.

&bull;

rootless mode: The users
range from the /etc/subuid and /etc/subgid files will be
used. Note running a single container without using
--userns=auto will use the entire range of UIDs and not
allow further subdividing. See subuid(5).

Podman
allocates unique ranges of UIDs and GIDs from the
containers subordinate user IDs. The size of the
ranges is based on the number of UIDs required in the image.
The number of UIDs and GIDs can be overridden with the
size option.

The option
--userns=keep-id uses all the subuids and subgids of
the user. The option --userns=nomap uses all the
subuids and subgids of the user except the user&rsquo;s own
ID. Using --userns=auto when starting new containers
does not work as long as any containers exist that were
started with --userns=keep-id or
--userns=nomap.

Valid
auto options:

&bull;

gidmapping=CONTAINER_GID:HOST_GID:SIZE:
to force a GID mapping to be present in the user
namespace. 

&bull;

size=SIZE: to specify an explicit size for
the automatic user namespace. e.g.
--userns=auto:size=8192. If size is not
specified, auto estimates a size for the user
namespace. 

&bull;

uidmapping=CONTAINER_UID:HOST_UID:SIZE: to
force a UID mapping to be present in the user namespace.

container:id:
join the user namespace of the specified container.

host or
"" (empty string): run in the user
namespace of the caller. The processes running in the
container have the same privileges on the host as any other
process launched by the calling user.

keep-id:
creates a user namespace where the current user&rsquo;s
UID:GID are mapped to the same values in the container. For
containers created by root, the current mapping is created
into a new user namespace.

Valid
keep-id options:

&bull;

uid=UID: override the UID
inside the container that is used to map the current user
to. 

&bull;

gid=GID: override the GID inside the container
that is used to map the current user to.

nomap:
creates a user namespace where the current rootless
user&rsquo;s UID:GID are not mapped into the container. This
option is not allowed for containers created by the root
user.

ns:namespace:
run the pod in the given existing user namespace.

--wait,
-w 
Run pods and containers in the foreground. Default is
false.

At any time you
can run podman pod ps in another shell to view a list
of the running pods and containers.

When attached
in the tty mode, you can kill the pods and containers by
pressing Ctrl-C or receiving any other interrupt
signals.

All pods,
containers, and volumes created with podman kube play
is removed upon exit.

EXAMPLES

Recreate the
pod and containers as described in a file called
demo.yml

$ podman kube
play demo.yml 

52182811df2b1e73f36476003a66ec872101ea59034ac0d4d3a7b40903b955a6

Recreate the
pod and containers as described in a file demo.yml
sent to stdin

$ cat demo.yml
| podman kube play - 

52182811df2b1e73f36476003a66ec872101ea59034ac0d4d3a7b40903b955a6

Teardown the
pod and containers as described in a file
demo.yml

$ podman kube
play --down demo.yml 
Pods stopped: 

52182811df2b1e73f36476003a66ec872101ea59034ac0d4d3a7b40903b955a6

Pods removed: 

52182811df2b1e73f36476003a66ec872101ea59034ac0d4d3a7b40903b955a6

Provide
configmap-foo.yml and configmap-bar.yml as
sources for environment variables within the containers.

$ podman kube
play demo.yml --configmap
configmap-foo.yml,configmap-bar.yml 

52182811df2b1e73f36476003a66ec872101ea59034ac0d4d3a7b40903b955a6

$ podman kube
play demo.yml --configmap configmap-foo.yml --configmap
configmap-bar.yml 

52182811df2b1e73f36476003a66ec872101ea59034ac0d4d3a7b40903b955a6

Create a pod
connected to two networks (called net1 and net2) with a
static ip

$ podman kube
play demo.yml --network net1:ip=10.89.1.5 --network
net2:ip=10.89.10.10 

52182811df2b1e73f36476003a66ec872101ea59034ac0d4d3a7b40903b955a6

Please take
into account that networks must be created first using
podman-network-create(1).

Create and
teardown from a URL pointing to a YAML file

$ podman kube
play https://podman.io/demo.yml 

52182811df2b1e73f36476003a66ec872101ea59034ac0d4d3a7b40903b955a6

$ podman kube
play --down https://podman.io/demo.yml 
Pods stopped: 

52182811df2b1e73f36476003a66ec872101ea59034ac0d4d3a7b40903b955a6

Pods removed: 

52182811df2b1e73f36476003a66ec872101ea59034ac0d4d3a7b40903b955a6

podman kube
play --down does not work with a URL if the YAML file
the URL points to has been changed or altered.

Podman Kube Play Support

This document
outlines the kube yaml fields that are currently supported
by the podman kube play command.

Note:
N/A means that the option cannot be supported in a
single-node Podman environment.

Pod Fields

Container Fields

PersistentVolumeClaim Fields

ConfigMap Fields

Deployment Fields

DaemonSet Fields

SEE ALSO

podman(1),
podman-kube(1), podman-kube-down(1),
podman-network-create(1),
podman-kube-generate(1), podman-build(1),
containers-certs.d(5)