NAME

preap &minus;
force a defunct process to be reaped by its parent

SYNOPSIS

preap
[-F] pid...

DESCRIPTION

A defunct (or
zombie) process is one whose exit status has yet to be
reaped by its parent. The exit status is reaped via the
wait(2), waitid(2), or waitpid(2)
system call. In the normal course of system operation,
zombies may occur, but are typically short-lived. This may
happen if a parent exits without having reaped the exit
status of some or all of its children. In that case, those
children are reparented to PID 1. See
init(1M), which periodically reaps such
processes.

An
irresponsible parent process may not exit for a very long
time and thus leave zombies on the system. Since the
operating system destroys nearly all components of a process
before it becomes defunct, such defunct processes do not
normally impact system operation. However, they do consume a
small amount of system memory.

preap
forces the parent of the process specified by pid to
waitid(2) for pid, if pid represents a
defunct process.

preap
will attempt to prevent the administrator from unwisely
reaping a child process which might soon be reaped by the
parent, if:

&bull;

The process is a child of init(1M).

&bull;

The parent process is stopped and might wait on the
child when it is again allowed to run.

&bull;

The process has been defunct for less than one
minute. 

OPTIONS

The following
option is supported:

-F

Forces the parent to reap the
child, overriding safety checks.

OPERANDS

The following
operand is supported:

pid

Process ID list.

EXIT STATUS

The following
exit values are returned by preap, which prints the
exit status of each target process reaped:

0

Successfully operation.

non-zero

Failure, such as no such
process, permission denied, or invalid option.

ATTRIBUTES

See
attributes(5) for descriptions of the following
attributes:

SEE ALSO

proc(1),
init(1M), wait(2), waitid(2),
waitpid(2), proc(4), attributes(5)

WARNINGS

preap
should be applied sparingly and only in situations in which
the administrator or developer has confirmed that defunct
processes will not be reaped by the parent process.
Otherwise, applying preap may damage the parent
process in unpredictable ways.