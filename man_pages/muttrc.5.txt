NAME

muttrc -
Configuration file for the Mutt Mail User Agent

DESCRIPTION

A mutt
configuration file consists of a series of
&ldquo;commands&rdquo;. Each line of the file may contain
one or more commands. When multiple commands are used, they
must be separated by a semicolon
(&ldquo;;&rdquo;).

The hash mark,
or pound sign (&ldquo;#&rdquo;), is used as a
&ldquo;comment&rdquo; character. You can use it to annotate
your initialization file. All text after the comment
character to the end of the line is ignored.

Single quotes
(&ldquo;&rsquo;&rdquo;) and double quotes
(&ldquo;"&rdquo;) can be used to quote strings
which contain spaces or other special characters. The
difference between the two types of quotes is similar to
that of many popular shell programs, namely that a single
quote is used to specify a literal string (one that is not
interpreted for shell variables or quoting with a backslash
[see next paragraph]), while double quotes indicate a string
which should be evaluated. For example, backticks are
evaluated inside of double quotes, but not single
quotes.

\ quotes
the next character, just as in shells such as bash and zsh.
For example, if want to put quotes
(&ldquo;"&rdquo;) inside of a string, you can
use &ldquo;\&rdquo; to force the next character to be
a literal instead of interpreted character.

&ldquo;\\&rdquo;
means to insert a literal &ldquo;\&rdquo; into the
line. &ldquo;\n&rdquo; and &ldquo;\r&rdquo;
have their usual C meanings of linefeed and carriage-return,
respectively.

A
&ldquo;\&rdquo; at the end of a line can be used to
split commands over multiple lines, provided that the split
points don&rsquo;t appear in the middle of command
names.

It is also
possible to substitute the output of a Unix command in an
initialization file. This is accomplished by enclosing the
command in backticks
(&rsquo;command&rsquo;).

UNIX
environment variables can be accessed like the way it is
done in shells like sh and bash: Prepend the name of the
variable by a dollar (&ldquo;$&rdquo;) sign.

COMMANDS

alias
[-group name [...]] key address
[, address [ ... ]] 
unalias [ * | key ]

alias
defines an alias key for the given addresses. Each
address will be resolved into either an email address
(user [AT] example.com) or a named email address (User Name
user [AT] example.com>). The address may be specified in
either format, or in the format &ldquo;user [AT] example.com
(User Name)&rdquo;. unalias removes the alias
corresponding to the given key or all aliases when
&ldquo;*&rdquo; is used as an argument. The optional
-group argument to alias causes the aliased
address(es) to be added to the named group.

group
[-group name] [-rx EXPR [
... ]] [-addr address [ ... ]]

ungroup [-group name ] [ * |
[[-rx EXPR [ ... ]] [-addr
address [ ... ]]]

group is
used to directly add either addresses or regular expressions
to the specified group or groups. The different categories
of arguments to the group command can be in any
order. The flags -rx and -addr specify what
the following strings (that cannot begin with a hyphen)
should be interpreted as: either a regular expression or an
email address, respectively. ungroup is used to
remove addresses or regular expressions from the specified
group or groups. The syntax is similar to the group
command, however the special character * can be used
to empty a group of all of its contents.

These address
groups can also be created implicitly by the alias,
lists, subscribe and alternates
commands by specifying the optional -group
option.

Once defined,
these address groups can be used in patterns to search for
and limit the display to messages matching a group.

alternates
[-group name] regexp [ regexp [
... ]] 
unalternates [ * | regexp [ regexp
[ ... ]] ]

alternates
is used to inform mutt about alternate addresses where you
receive mail; you can use regular expressions to specify
alternate addresses. This affects mutt&rsquo;s idea about
messages from you, and messages addressed to you.
unalternates removes a regular expression from the
list of known alternates. The -group flag causes all
of the subsequent regular expressions to be added to the
named group.

alternative_order
type[/subtype] [ ... ] 
unalternative_order [ * |
type/subtype] [...]

alternative_order
command permits you to define an order of preference which
is used by mutt to determine which part of a
multipart/alternative body to display. A subtype of
&ldquo;*&rdquo; matches any subtype, as does an empty
subtype. unalternative_order removes entries from the
ordered list or deletes the entire list when
&ldquo;*&rdquo; is used as an argument.

attachments
[ + | - ]disposition mime-type 
unattachments [ + | - ]disposition
mime-type 
attachments ? 
unattachments *

attachments
specifies what kinds of attachments are used for
Mutt&rsquo;s attachment counting and searching support.

disposition
is the attachment&rsquo;s Content-Disposition type - either
inline or attachment. You can abbreviate this to I or A.

The first part
of a message or multipart group, if inline, is counted
separately than other inline parts. Specify root or R for
disposition to count these as attachments. If this first
part is of type multipart/alternative, note that its
top-level inline parts are also counted via root disposition
(if $count_alternatives is set).

disposition
is prefixed by either a + symbol or a -
symbol. If it&rsquo;s a +, you&rsquo;re saying that
you want to allow this disposition and MIME type to qualify.
If it&rsquo;s a -, you&rsquo;re saying that this
disposition and MIME type is an exception to previous
+ rules.

mime-type
is the MIME type of the attachment you want the command to
affect. A MIME type is always of the format major/minor,
where major describes the broad category of document
you&rsquo;re looking at, and minor describes the specific
type within that category. The major part of mime-type must
be literal text (or the special token *), but the
minor part may be a regular expression. (Therefore,
*/.* matches any MIME type.)

The MIME types
you give to the attachments directive are a kind of pattern.
When you use the attachments directive, the patterns you
specify are added to a list. When you use unattachments, the
pattern is removed from the list. The patterns are not
expanded and matched to specific MIME types at this time -
they&rsquo;re just text in a list. They&rsquo;re only
matched when actually evaluating a message.

auto_view
type[/subtype] [ ... ] 
unauto_view type[/subtype] [ ...
]

This commands
permits you to specify that mutt should automatically
convert the given MIME types to text/plain when displaying
messages. For this to work, there must be a
mailcap(5) entry for the given MIME type with the
copiousoutput flag set. A subtype of
&ldquo;*&rdquo; matches any subtype, as does an empty
subtype.

mime_lookup
type[/subtype] [ ... ] 
unmime_lookup type[/subtype] [ ...
]

This command
permits you to define a list of "data" MIME
content types for which mutt will try to determine the
actual file type from the file name, and not use a
mailcap(5) entry given for the original MIME type.
For instance, you may add the
application/octet-stream MIME type to this list.

bind map1,map2,...
key function

This command binds the given
key for the given map or maps to the given
function. Multiple maps may be specified by
separating them with commas (no whitespace is allowed).

Valid maps are:
generic, alias, attach, browser,
editor, index, compose, pager,
pgp, postpone, mix.

For more
information on keys and functions, please consult the Mutt
Manual. Note that the function name is to be specified
without angle brackets.

account-hook
[!]regexp command

This hook is executed whenever
you access a remote mailbox. Useful to adjust configuration
settings to different IMAP or POP servers.

charset-hook alias
charset

This command defines an alias
for a character set. This is useful to properly display
messages which are tagged with a character set name not
known to mutt.

iconv-hook charset
local-charset

This command defines a
system-specific name for a character set. This is useful
when your system&rsquo;s iconv(3) implementation does
not understand MIME character set names (such as
iso-8859-1), but instead insists on being fed with
implementation-specific character set names (such as
8859-1). In this specific case, you&rsquo;d put this
into your configuration file:

iconv-hook
iso-8859-1 8859-1

message-hook
[!]pattern command

Before mutt displays (or
formats for replying or forwarding) a message which matches
the given pattern (or, when it is preceded by an
exclamation mark, does not match the pattern), the
given command is executed. When multiple
message-hooks match, they are executed in the order
in which they occur in the configuration file.

folder-hook
[!]regexp command

When mutt enters a folder which
matches regexp (or, when regexp is preceded by
an exclamation mark, does not match regexp), the
given command is executed.

When several
folder-hooks match a given mail folder, they are
executed in the order given in the configuration file.

macro map key
sequence [ description ]

This command binds the given
sequence of keys to the given key in the given
map or maps. For valid maps, see bind. To
specify multiple maps, put only a comma between the
maps.

color
object [ attribute ... ] foreground
background [ regexp ] 
color index [ attribute ... ] foreground
background [ pattern ] 
color compose composeobject [ attribute
... ] foreground background 
uncolor index pattern [ pattern ... ]

If your
terminal supports color, these commands can be used to
assign foreground/background combinations to
certain objects. Valid objects are: attachment,
body, bold, error, header,
hdrdefault, index, indicator,
markers, message, normal,
prompt, quoted, quotedN,
search, signature, status,
tilde, tree, underline. If the sidebar
is enabled the following objects are also valid:
sidebar_divider, sidebar_flagged,
sidebar_highlight, sidebar_indicator,
sidebar_new, sidebar_spoolfile. The
body and header objects allow you to restrict
the colorization to a regular expression. The index
object permits you to select colored messages by
pattern.

Valid
composeobjects include header,
security_encrypt, security_sign,
security_both, security_none.

Valid colors
include: white, black, green,
magenta, blue, cyan, yellow,
red, default, colorN.

Valid
attributes include: none, bold,
underline, reverse, and standout.

mono
object attribute [ regexp ] 
mono index attribute [ pattern ]

For terminals
which don&rsquo;t support color, you can still assign
attributes to objects.

[un]ignore
pattern [ pattern ... ]

The ignore command
permits you to specify header fields which you usually
don&rsquo;t wish to see. Any header field whose tag
begins with an &ldquo;ignored&rdquo; pattern will be
ignored.

The
unignore command permits you to define exceptions
from the above mentioned list of ignored headers.

lists
[-group name] regexp [ regexp
... ] 
unlists regexp [ regexp ... ] 
subscribe [-group name] regexp [
regexp ... ] 
unsubscribe regexp [ regexp ... ]

Mutt maintains
two lists of mailing list address patterns, a list of
subscribed mailing lists, and a list of known mailing lists.
All subscribed mailing lists are known. Patterns use regular
expressions.

The
lists command adds a mailing list address to the list
of known mailing lists. The unlists command removes a
mailing list from the lists of known and subscribed mailing
lists. The subscribe command adds a mailing list to
the lists of known and subscribed mailing lists. The
unsubscribe command removes it from the list of
subscribed mailing lists. The -group flag adds all of
the subsequent regular expressions to the named group.

mbox-hook
[!]regexp mailbox

When mutt changes to a mail
folder which matches regexp, mailbox will be
used as the &ldquo;mbox&rdquo; folder, i.e., read messages
will be moved to that folder when the mail folder is
left.

The first
matching mbox-hook applies.

mailboxes
[[-notify | -nonotify] 
[-poll | -nopoll] 
[[-label label] | -nolabel] 
filename] [ ... ] 
unmailboxes [ * | filename ... ]

The
mailboxes specifies folders which can receive mail
and which will be checked for new messages. When changing
folders, pressing space will cycle through folders with new
mail. The unmailboxes command is used to remove a
file name from the list of folders which can receive mail.
If "*" is specified as the file name, the
list is emptied.

my_hdr
string 
unmy_hdr field

Using
my_hdr, you can define headers which will be added to
the messages you compose. unmy_hdr will remove the
given user-defined headers.

hdr_order header1
header2 [ ... ]

With this command, you can
specify an order in which mutt will attempt to present
headers to you when viewing messages.

save-hook
[!]pattern filename

When a message matches
pattern, the default file name when saving it will be
the given filename.

fcc-hook
[!]pattern filename

When an outgoing message
matches pattern, the default file name for storing a
copy (fcc) will be the given filename.

fcc-save-hook
[!]pattern filename

This command is an abbreviation
for identical fcc-hook and save-hook
commands.

send-hook
[!]pattern command

When composing a message
matching pattern, command is executed. When
multiple send-hooks match, they are executed in the
order in which they occur in the configuration file.

send2-hook
[!]pattern command

Whenever a message matching
pattern is changed (either by editing it or by using
the compose menu), command is executed. When multiple
send2-hooks match, they are executed in the order in
which they occur in the configuration file. Possible
applications include setting the $sendmail variable when a
message&rsquo;s from header is changed.

send2-hook
execution is not triggered by use of enter-command
from the compose menu.

reply-hook
[!]pattern command

When replying to a message
matching pattern, command is executed. When
multiple reply-hooks match, they are executed in the
order in which they occur in the configuration file, but all
reply-hooks are matched and executed before
send-hooks, regardless of their order in the
configuration file.

crypt-hook regexp
key-id

The crypt-hook command provides
a method by which you can specify the ID of the public key
to be used when encrypting messages to a certain recipient.
The meaning of "key ID" is to be taken broadly:
This can be a different e-mail address, a numerical key ID,
or even just an arbitrary search string. You may use
multiple crypt-hooks with the same regexp;
multiple matching crypt-hooks result in the use of
multiple key-ids for a recipient.

index-format-hook
name [!]pattern format-string

This command is used to inject
format strings dynamically into $index_format based on
pattern matching against the current message.

The
$index_format expando %@name@ specifies a placeholder
for the injection. Index-format-hooks with the same
name are matched using pattern against the
current message. Matching is done in the order specified in
the .muttrc, with the first match being used. The
hook&rsquo;s format-string is then substituted and
evaluated.

open-hook
regexp "command" 
close-hook regexp "command"

append-hook regexp "command"

These commands
provide a way to handle compressed folders. The given
regexp specifies which folders are taken as
compressed (e.g. "\\.gz$"). The commands
tell Mutt how to uncompress a folder (open-hook),
compress a folder (close-hook) or append a compressed
mail to a compressed folder (append-hook). The
command string is the printf(3) like format
string, and it should accept two parameters: %f,
which is replaced with the (compressed) folder name, and
%t which is replaced with the name of the temporary
folder to which to write.

push
string 
exec function [ ... ]

push
adds the named string to the keyboard buffer.
&ldquo;exec function&rdquo; is equivalent to &ldquo;push
&rdquo;.

run MuttLisp

The run
command evaluates the MuttLisp argument. The output
of the MuttLisp is then executed as a Mutt command,
as if it were typed in the muttrc instead.

score
pattern value 
unscore [ * | pattern ... ]

The
score commands adds value to a message&rsquo;s
score if pattern matches it. The unscore
command removes score entries from the list.

set
[no|inv|&|?]variable[=value]
[ ... ] 
toggle variable [ ... ] 
unset variable [ ... ] 
reset variable [ ... ]

These commands
are used to set and manipulate configuration variables.

Mutt knows four
basic types of variables: boolean, number, string and
quadoption. Boolean variables can be set (true),
unset (false), or toggled. Number variables
can be assigned a positive integer value.

String
variables consist of any number of printable characters.
Strings must be enclosed in quotes if they contain spaces or
tabs. You may also use the &ldquo;C&rdquo; escape sequences
\n and \t for newline and tab,
respectively.

Quadoption
variables are used to control whether or not to be prompted
for certain actions, or to specify a default action. A value
of yes will cause the action to be carried out
automatically as if you had answered yes to the question.
Similarly, a value of no will cause the action to be
carried out as if you had answered &ldquo;no.&rdquo; A value
of ask-yes will cause a prompt with a default answer
of &ldquo;yes&rdquo; and ask-no will provide a
default answer of &ldquo;no.&rdquo;

The
reset command resets all given variables to the
compile time defaults. If you reset the special variable
all, all variables will reset to their compile time
defaults.

setenv
[?]variable [ value ] 
unsetenv variable

These alter the
environment that Mutt passes on to its child processes. You
can also query current environment values by prefixing a
&ldquo;?&rdquo; character.

sidebar_whitelist
mailbox [ mailbox ...] 
unsidebar_whitelist [ * | mailbox ...
]

sidebar_whitelist
specifies mailboxes that will always be displayed in the
sidebar, even if $sidebar_new_mail_only is set and the
mailbox does not contain new mail.

unsidebar_whitelist
is used to remove a mailbox from the list of whitelisted
mailboxes. Use unsidebar_whitelist * to remove all
mailboxes.

source
filename

The given file will be
evaluated as a configuration file.

spam
pattern format 
nospam pattern

These commands
define spam-detection patterns from external spam filters,
so that mutt can sort, limit, and search on
&rsquo;&rsquo;spam tags&rsquo;&rsquo; or &rsquo;&rsquo;spam
attributes&rsquo;&rsquo;, or display them in the index. See
the Mutt manual for details.

subjectrx
pattern replacement 
unsubjectrx [ * | pattern ]

subjectrx
specifies a regular expression pattern which, if
detected in a message subject, causes the subject to be
replaced with the replacement value. The
replacement is subject to substitutions in the same
way as for the spam command: %L for the text to the
left of the match, %R for text to the right of the match,
and %1 for the first subgroup in the match (etc). If you
simply want to erase the match, set it to
&ldquo;%L%R&rdquo;. Any number of subjectrx commands
may coexist.

Note this well:
the replacement value replaces the entire subject,
not just the match!

unsubjectrx
removes a given subjectrx from the substitution list.
If * is used as the pattern, all substitutions will
be removed.

unhook [ * |
hook-type ]

This command will remove all
hooks of a given type, or all hooks when
&ldquo;*&rdquo; is used as an argument.
hook-type can be any of the -hook commands
documented above.

mailto_allow
header-field [ ... ] 
unmailto_allow [ * | header-field ...
]

These commands
allow the user to modify the list of allowed header fields
in a mailto: URL that Mutt will include in the the
generated message. By default the list contains only
subject and body, as specified by RFC2368.

echo message

Prints message to the
message window. After printing the message, echo will pause
for the number of seconds specified by $sleep_time.

cd directory

Changes the current working
directory.

PATTERNS

In various
places with mutt, including some of the above mentioned
hook commands, you can specify patterns to match
messages.

Constructing
Patterns 
A simple pattern consists of a modifier of the form
&ldquo;~character&rdquo;, possibly followed by
a parameter against which mutt is supposed to match the
object specified by this modifier. For some
characters, the ~ may be replaced by another
character to alter the behavior of the match. These are
described in the list of modifiers, below.

With some of
these modifiers, the object to be matched consists of
several e-mail addresses. In these cases, the object is
matched if at least one of these e-mail addresses matches.
You can prepend a hat (&ldquo;^&rdquo;) character to
such a pattern to indicate that all addresses must
match in order to match the object.

You can
construct complex patterns by combining simple patterns with
logical operators. Logical AND is specified by simply
concatenating two simple patterns, for instance &ldquo;~C
mutt-dev ~s bug&rdquo;. Logical OR is specified by inserting
a vertical bar (&ldquo;|&rdquo;) between two
patterns, for instance &ldquo;~C mutt-dev | ~s bug&rdquo;.
Additionally, you can negate a pattern by prepending a bang
(&ldquo;!&rdquo;) character. For logical grouping,
use braces (&ldquo;()&rdquo;). Example: &ldquo;!(~t mutt|~c
mutt) ~f elkins&rdquo;.

Simple
Patterns 
Mutt understands the following simple patterns:

~A

all messages

~b EXPR

messages which contain EXPR in the message
body. 

=b STRING

If IMAP is enabled, like ~b but searches for
STRING on the server, rather than downloading each
message and searching it locally.

~B EXPR

messages which contain EXPR in the whole
message. 

=B STRING

If IMAP is enabled, like ~B but searches for
STRING on the server, rather than downloading each
message and searching it locally.

~c EXPR

messages carbon-copied to EXPR

%c GROUP

messages carbon-copied to any member of GROUP

~C EXPR

messages either to: or cc: EXPR

%C GROUP

messages either to: or cc: to any member of
GROUP 

~d MIN-MAX

messages with &ldquo;date-sent&rdquo; in a Date
range 

~D

deleted messages

~e EXPR

messages which contain EXPR in the
&ldquo;Sender&rdquo; field

%e GROUP

messages which contain a member of GROUP in the
&ldquo;Sender&rdquo; field

~E

expired messages

~f EXPR

messages originating from EXPR

%f GROUP

messages originating from any member of GROUP

~F

flagged messages

~g

PGP signed messages

~G

PGP encrypted messages

~h EXPR

messages which contain EXPR in the message
header 

=h STRING

If IMAP is enabled, like ~h but searches for
STRING on the server, rather than downloading each
message and searching it locally. STRING must be of
the form &ldquo;header: substring&rdquo;

~H EXPR

messages with spam tags matching EXPR

~i EXPR

messages which match EXPR in the
&ldquo;Message-ID&rdquo; field

~k

messages containing PGP key material

~l

messages addressed to a known mailing list (defined by
either subscribe or list)

~L EXPR

messages either originated or received by
EXPR 

%L GROUP

messages either originated or received by any member of
GROUP 

~m MIN-MAX

message in the range MIN to MAX

~M EXPR

messages which contain a mime Content-Type matching
EXPR 

~n MIN-MAX

messages with a score in the range MIN to
MAX 

~N

new messages

~O

old messages

~p

messages addressed to you (consults $from,
alternates, and local account/hostname
information) 

~P

messages from you (consults $from, alternates,
and local account/hostname information)

~Q

messages which have been replied to

~r MIN-MAX

messages with &ldquo;date-received&rdquo; in a Date
range 

~R

read messages

~s EXPR

messages having EXPR in the &ldquo;Subject&rdquo;
field. 

~S

superseded messages

~t EXPR

messages addressed to EXPR

~T

tagged messages

~u

messages addressed to a subscribed mailing list (defined
by subscribe commands)

~U

unread messages

~v

message is part of a collapsed thread.

~V

cryptographically verified messages

~x EXPR

messages which contain EXPR in the
&ldquo;References&rdquo; or &ldquo;In-Reply-To&rdquo;
field 

~X MIN-MAX

messages with MIN - MAX attachments

~y EXPR

messages which contain EXPR in the
&ldquo;X-Label&rdquo; field

~z MIN-MAX

messages with a size in the range MIN to
MAX 

~=

duplicated messages (see $duplicate_threads)

~$

unreferenced message (requires threaded view)

~(PATTERN)

messages in threads containing messages matching a
certain pattern, e.g. all threads containing messages from
you: ~(~P)

~

messages whose immediate parent matches PATTERN, e.g.
replies to your messages: ~

~>(PATTERN)

messages having an immediate child matching PATTERN,
e.g. messages you replied to: ~>(~P)

In the above,
EXPR is a regular expression.

With the
~d, ~m, ~n, ~r, ~X, and
~z modifiers, you can also specify ranges in the
forms MAX, >MIN,
MIN-, and -MAX.

With the
~z modifier, the suffixes &ldquo;K&rdquo; and
&ldquo;M&rdquo; are allowed to specify kilobyte and megabyte
respectively.

The ~b,
~B, ~h, ~M, and ~X modifiers
require reading each message in, which can be much
slower.

You can force
Mutt to treat EXPR as a simple string instead of a
regular expression by using = instead of ~ in the pattern
name.

Matching
dates 
The ~d and ~r modifiers are used to match date
ranges, which are interpreted to be given in your local time
zone.

A date is of
the form
DD[/MM[/[cc]YY]],
that is, a two-digit date, optionally followed by a
two-digit month, optionally followed by a year
specifications. Omitted fields default to the current month
and year.

Mutt
understands either two or four digit year specifications.
When given a two-digit year, mutt will interpret values less
than 70 as lying in the 21st century (i.e., &ldquo;38&rdquo;
means 2038 and not 1938, and &ldquo;00&rdquo; is interpreted
as 2000), and values greater than or equal to 70 as lying in
the 20th century.

Note that this
behavior is Y2K compliant, but that mutt does
have a Y2.07K problem.

Alternatively,
you may use YYYYMMDD to specify a date.

If a date range
consists of a single date, the modifier in question will
match that precise date. If the date range consists of a
dash (&ldquo;-&rdquo;), followed by a date, this
range will match any date before and up to the date given.
Similarly, a date followed by a dash matches the date given
and any later point of time. Two dates, separated by a dash,
match any date which lies in the given range of time.

You can also
modify any absolute date by giving an error range. An error
range consists of one of the characters +, -,
*, followed by a positive number, followed by one of
the unit characters y, m, w, or
d, specifying a unit of years, months, weeks, or
days. + increases the maximum date matched by the
given interval of time, - decreases the minimum date
matched by the given interval of time, and *
increases the maximum date and decreases the minimum date
matched by the given interval of time. It is possible to
give multiple error margins, which cumulate. Example:
1/1/2001-1w+2w*3d

You can also
specify offsets relative to the current date. An offset is
specified as one of the characters , >,
=, followed by a positive number, followed by one of
the unit characters y, m, w, d,
H, M, or S. > matches dates
which are older than the specified amount of time, an offset
which begins with the character  matches dates
which are more recent than the specified amount of time, and
an offset which begins with the character = matches
points of time which are precisely the given amount of time
ago.

CONFIGURATION VARIABLES

abort_noattach

Type: quadoption 
Default: no

When the body
of the message matches $abort_noattach_regexp and there are
no attachments, this quadoption controls whether to abort
sending the message.

abort_noattach_regexp

Type: regular expression 
Default: &ldquo;attach&rdquo;

Specifies a
regular expression to match against the body of the message,
to determine if an attachment was mentioned but mistakenly
forgotten. If it matches, $abort_noattach will be consulted
to determine if message sending will be aborted.

Like other
regular expressions in Mutt, the search is case sensitive if
the pattern contains at least one upper case letter, and
case insensitive otherwise.

abort_nosubject

Type: quadoption 
Default: ask-yes

If set to
yes, when composing messages and no subject is given
at the subject prompt, composition will be aborted. If set
to no, composing messages with no subject given at
the subject prompt will never be aborted.

abort_unmodified

Type: quadoption 
Default: yes

If set to
yes, composition will automatically abort after
editing the message body if no changes are made to the file
(this check only happens after the first edit of the
file). When set to no, composition will never be
aborted.

alias_file

Type: path 
Default: &ldquo;~/.muttrc&rdquo;

The default
file in which to save aliases created by the
 function. Entries added to this
file are encoded in the character set specified by
$config_charset if it is set or the current character
set otherwise.

Note:
Mutt will not automatically source this file; you must
explicitly use the &ldquo;source&rdquo; command for it to be
executed in case this option points to a dedicated alias
file.

The default for
this option is the currently used muttrc file, or
&ldquo;~/.muttrc&rdquo; if no user muttrc was found.

alias_format

Type: string 
Default: &ldquo;%4n %2f %t %-10a %r&rdquo;

Specifies the
format of the data displayed for the &ldquo;alias&rdquo;
menu. The following printf(3)-style sequences are
available:

%a

alias name

%f

flags - currently, a &ldquo;d&rdquo; for an alias marked
for deletion

%n

index number

%r

address which alias expands to

%t

character which indicates if the alias is tagged for
inclusion 

allow_8bit

Type: boolean 
Default: yes

Controls
whether 8-bit data is converted to 7-bit using either
Quoted- Printable or Base64 encoding when sending mail.

allow_ansi

Type: boolean 
Default: no

Controls
whether ANSI color codes in messages (and color tags in rich
text messages) are to be interpreted. Messages containing
these codes are rare, but if this option is set,
their text will be colored accordingly. Note that this may
override your color choices, and even present a security
problem, since a message could include a line like

[-- PGP output
follows ...

and give it the
same color as your attachment color (see also
$crypt_timestamp).

arrow_cursor

Type: boolean 
Default: no

When
set, an arrow (&ldquo;->&rdquo;) will be used to
indicate the current entry in menus instead of highlighting
the whole line. On slow network or modem links this will
make response faster because there is less that has to be
redrawn on the screen when moving to the next or previous
entries in the menu.

ascii_chars

Type: boolean 
Default: no

If set,
Mutt will use plain ASCII characters when displaying thread
and attachment trees, instead of the default ACS
characters.

askbcc

Type: boolean

Default: no

If set,
Mutt will prompt you for blind-carbon-copy (Bcc) recipients
before editing an outgoing message.

askcc

Type: boolean

Default: no

If set,
Mutt will prompt you for carbon-copy (Cc) recipients before
editing the body of an outgoing message.

assumed_charset

Type: string 
Default: &ldquo;&rdquo;

This variable
is a colon-separated list of character encoding schemes for
messages without character encoding indication. Header field
values and message body content without character encoding
indication would be assumed that they are written in one of
this list. By default, all the header fields and message
body without any charset indication are assumed to be in
&ldquo;us-ascii&rdquo;.

For example,
Japanese users might prefer this:

set
assumed_charset=&rdquo;iso-2022-jp:euc-jp:shift_jis:utf-8&rdquo;

However, only
the first content is valid for the message body.

attach_charset

Type: string 
Default: &ldquo;&rdquo;

This variable
is a colon-separated list of character encoding schemes for
text file attachments. Mutt uses this setting to guess which
encoding files being attached are encoded in to convert them
to a proper character set given in $send_charset.

If
unset, the value of $charset will be used instead.
For example, the following configuration would work for
Japanese text handling:

set
attach_charset=&rdquo;iso-2022-jp:euc-jp:shift_jis:utf-8&rdquo;

Note: for
Japanese users, &ldquo;iso-2022-*&rdquo; must be put at the
head of the value as shown above if included.

attach_format

Type: string 
Default: &ldquo;%u%D%I %t%4n %T%.40d%> [%.7m/%.10M,
%.6e%?C?, %C?, %s] &rdquo;

This variable
describes the format of the &ldquo;attachment&rdquo; menu.
The following printf(3)-style sequences are
understood:

%C

charset

%c

requires charset conversion (&ldquo;n&rdquo; or
&ldquo;c&rdquo;) 

%D

deleted flag

%d

description (if none, falls back to %F)

%e

MIME content-transfer-encoding

%F

filename in content-disposition header (if none, falls
back to %f)

%f

filename

%I

disposition (&ldquo;I&rdquo; for inline, &ldquo;A&rdquo;
for attachment)

%m

major MIME type

%M

MIME subtype

%n

attachment number

%Q

&ldquo;Q&rdquo;, if MIME part qualifies for attachment
counting 

%s

size (see formatstrings-size)

%t

tagged flag

%T

graphic tree characters

%u

unlink (=to delete) flag

%X

number of qualifying MIME parts in this part and its
children (please see the &ldquo;attachments&rdquo; section
for possible speed effects)

%>X

right justify the rest of the string and pad with
character &ldquo;X&rdquo;

%|X

pad to the end of the line with character
&ldquo;X&rdquo; 

%*X

soft-fill with character &ldquo;X&rdquo; as pad

For an
explanation of &ldquo;soft-fill&rdquo;, see the
$index_format documentation.

attach_save_charset_convert

Type: quadoption 
Default: ask-yes

When saving
received text-type attachments, this quadoption prompts to
convert the character set if the encoding of the attachment
(or $assumed_charset if none is specified) differs from
charset.

attach_save_dir

Type: path 
Default: &ldquo;&rdquo;

The default
directory to save attachments from the
&ldquo;attachment&rdquo; menu. If it doesn&rsquo;t exist,
Mutt will prompt to create the directory before saving.

If the path is
invalid (e.g. not a directory, or cannot be chdir&rsquo;ed
to), Mutt will fall back to using the current directory.

attach_sep

Type: string 
Default: &ldquo;\n&rdquo;

The separator
to add between attachments when operating (saving, printing,
piping, etc) on a list of tagged attachments.

attach_split

Type: boolean 
Default: yes

If this
variable is unset, when operating (saving, printing,
piping, etc) on a list of tagged attachments, Mutt will
concatenate the attachments and will operate on them as a
single attachment. The $attach_sep separator is added after
each attachment. When set, Mutt will operate on the
attachments one by one.

attribution

Type: string (localized) 
Default: &ldquo;On %d, %n wrote:&rdquo;

This is the
string that will precede a message which has been included
in a reply. For a full listing of defined
printf(3)-like sequences see the section on
$index_format.

attribution_locale

Type: string 
Default: &ldquo;&rdquo;

The locale used
by strftime(3) to format dates in the attribution
string. Legal values are the strings your system accepts for
the locale environment variable $LC_TIME.

This variable
is to allow the attribution date format to be customized by
recipient or folder using hooks. By default, Mutt will use
your locale environment, so there is no need to set this
except to override that default.

auto_subscribe

Type: boolean 
Default: no

When
set, Mutt assumes the presence of a List-Post header
means the recipient is subscribed to the list. Unless the
mailing list is in the &ldquo;unsubscribe&rdquo; or
&ldquo;unlist&rdquo; lists, it will be added to the
&ldquo;subscribe&rdquo; list. Parsing and checking these
things slows header reading down, so this option is disabled
by default.

auto_tag

Type: boolean 
Default: no

When
set, functions in the index menu which affect
a message will be applied to all tagged messages (if there
are any). When unset, you must first use the
 function (bound to &ldquo;;&rdquo;
by default) to make the next function apply to all tagged
messages.

autocrypt

Type: boolean 
Default: no

When
set, enables autocrypt, which provides passive
encryption protection with keys exchanged via headers. See
&ldquo;autocryptdoc&rdquo; for more details. (Autocrypt
only)

autocrypt_acct_format

Type: string 
Default: &ldquo;%4n %-30a %20p %10s&rdquo;

This variable
describes the format of the &ldquo;autocrypt account&rdquo;
menu. The following printf(3)-style sequences are
understood

%a

email address

%k

gpg keyid

%n

current entry number

%p

prefer-encrypt flag

%s

status flag (active/inactive)

(Autocrypt
only)

autocrypt_dir

Type: path 
Default: &ldquo;~/.mutt/autocrypt&rdquo;

This variable
sets where autocrypt files are stored, including the GPG
keyring and sqlite database. See &ldquo;autocryptdoc&rdquo;
for more details. (Autocrypt only)

autocrypt_reply

Type: boolean 
Default: yes

When
set, replying to an autocrypt email automatically
enables autocrypt in the reply. You may want to unset this
if you&rsquo;re using the same key for autocrypt as normal
web-of-trust, so that autocrypt isn&rsquo;t forced on for
all encrypted replies. (Autocrypt only)

autoedit

Type: boolean 
Default: no

When set
along with $edit_headers, Mutt will skip the initial
send-menu (prompting for subject and recipients) and allow
you to immediately begin editing the body of your message.
The send-menu may still be accessed once you have finished
editing the body of your message.

Note:
when this option is set, you cannot use send-hooks
that depend on the recipients when composing a new
(non-reply) message, as the initial list of recipients is
empty.

Also see
$fast_reply.

background_edit

Type: boolean 
Default: no

When
set, Mutt will run $editor in the background during
message composition. A landing page will display, waiting
for the $editor to exit. The landing page may be exited,
allowing perusal of the mailbox, or even for other messages
to be composed. Backgrounded sessions may be returned to via
the  function.

For background
editing to work properly, $editor must be set to an editor
that does not try to use the Mutt terminal: for example a
graphical editor, or a script launching (and waiting for)
the editor in another Gnu Screen window.

For more
details, see &ldquo;bgedit&rdquo; (&rdquo;Background
Editing&rdquo; in the manual).

background_confirm_quit

Type: boolean 
Default: yes

When
set, if there are any background edit sessions, you
will be prompted to confirm exiting Mutt, in addition to the
$quit prompt.

background_format

Type: string 
Default: &ldquo;%10S %7p %s&rdquo;

This variable
describes the format of the &ldquo;background compose&rdquo;
menu. The following printf(3)-style sequences are
understood:

%i

parent message id (for replies and forwarded
messages) 

%n

the running number on the menu

%p

pid of the $editor process

%r

comma separated list of &ldquo;To:&rdquo; recipients

%R

comma separated list of &ldquo;Cc:&rdquo; recipients

%s

subject of the message

%S

status of the $editor process: running/finished

beep

Type: boolean

Default: yes

When this
variable is set, mutt will beep when an error
occurs.

beep_new

Type: boolean 
Default: no

When this
variable is set, mutt will beep whenever it prints a
message notifying you of new mail. This is independent of
the setting of the $beep variable.

bounce

Type: quadoption

Default: ask-yes

Controls
whether you will be asked to confirm bouncing messages. If
set to yes you don&rsquo;t get asked if you want to
bounce a message. Setting this variable to no is not
generally useful, and thus not recommended, because you are
unable to bounce messages.

bounce_delivered

Type: boolean 
Default: yes

When this
variable is set, mutt will include Delivered-To
headers when bouncing messages. Postfix users may wish to
unset this variable.

braille_friendly

Type: boolean 
Default: no

When this
variable is set, mutt will place the cursor at the
beginning of the current line in menus, even when the
$arrow_cursor variable is unset, making it easier for
blind persons using Braille displays to follow these menus.
The option is unset by default because many visual
terminals don&rsquo;t permit making the cursor
invisible.

browser_abbreviate_mailboxes

Type: boolean 
Default: yes

When this
variable is set, mutt will abbreviate mailbox names
in the browser mailbox list, using &rsquo;~&rsquo; and
&rsquo;=&rsquo; shortcuts.

The default
&rdquo;alpha&rdquo; setting of $sort_browser uses
locale-based sorting (using strcoll(3)), which
ignores some punctuation. This can lead to some situations
where the order doesn&rsquo;t make intuitive sense. In those
cases, it may be desirable to unset this
variable.

browser_sticky_cursor

Type: boolean 
Default: yes

When this
variable is set, the browser will attempt to keep the
cursor on the same mailbox when performing various
functions. These include moving up a directory, toggling
between mailboxes and directory listing, creating/renaming a
mailbox, toggling subscribed mailboxes, and entering a new
mask.

certificate_file

Type: path 
Default: &ldquo;~/.mutt_certificates&rdquo;

This variable
specifies the file where the certificates you trust are
saved. When an unknown certificate is encountered, you are
asked if you accept it or not. If you accept it, the
certificate can also be saved in this file and further
connections are automatically accepted.

You can also
manually add CA certificates in this file. Any server
certificate that is signed with one of these CA certificates
is also automatically accepted.

Example:

set
certificate_file=~/.mutt/certificates

(OpenSSL and
GnuTLS only)

change_folder_next

Type: boolean 
Default: no

When this
variable is set, the 
function mailbox suggestion will start at the next folder in
your &ldquo;mailboxes&rdquo; list, instead of starting at
the first folder in the list.

charset

Type: string 
Default: &ldquo;&rdquo;

Character set
your terminal uses to display and enter textual data. It is
also the fallback for $send_charset.

Upon startup
Mutt tries to derive this value from environment variables
such as $LC_CTYPE or $LANG.

Note: It
should only be set in case Mutt isn&rsquo;t able to
determine the character set used correctly.

check_mbox_size

Type: boolean 
Default: no

When this
variable is set, mutt will use file size attribute
instead of access time when checking for new mail in mbox
and mmdf folders.

This variable
is unset by default and should only be enabled when
new mail detection for these folder types is unreliable or
doesn&rsquo;t work.

Note that
enabling this variable should happen before any
&ldquo;mailboxes&rdquo; directives occur in configuration
files regarding mbox or mmdf folders because mutt needs to
determine the initial new mail status of such a mailbox by
performing a fast mailbox scan when it is defined.
Afterwards the new mail status is tracked by file size
changes.

check_new

Type: boolean 
Default: yes

Note:
this option only affects maildir and MH style
mailboxes.

When
set, Mutt will check for new mail delivered while the
mailbox is open. Especially with MH mailboxes, this
operation can take quite some time since it involves
scanning the directory and checking each file to see if it
has already been looked at. If this variable is
unset, no check for new mail is performed while the
mailbox is open.

collapse_unread

Type: boolean 
Default: yes

When
unset, Mutt will not collapse a thread if it contains
any unread messages.

compose_confirm_detach_first

Type: boolean 
Default: yes

When
set, Mutt will prompt for confirmation when trying to
use  on the first entry in the
compose menu. This is to help prevent irreversible loss of
the typed message by accidentally hitting &rsquo;D&rsquo; in
the menu.

Note: Mutt only
prompts for the first entry. It doesn&rsquo;t keep track of
which message is the typed message if the entries are
reordered, or if the first entry was already deleted.

compose_format

Type: string (localized) 
Default: &ldquo;-- Mutt: Compose [Approx. msg size: %l Atts:
%a]%>-&rdquo;

Controls the
format of the status line displayed in the
&ldquo;compose&rdquo; menu. This string is similar to
$status_format, but has its own set of printf(3)-like
sequences:

%a

total number of attachments

%h

local hostname

%l

approximate size (in bytes) of the current message (see
formatstrings-size) 

%v

Mutt version string

See the text
describing the $status_format option for more information on
how to set $compose_format.

config_charset

Type: string 
Default: &ldquo;&rdquo;

When defined,
Mutt will recode commands in rc files from this encoding to
the current character set as specified by $charset and
aliases written to $alias_file from the current character
set.

Please note
that if setting $charset it must be done before setting
$config_charset.

Recoding should
be avoided as it may render unconvertable characters as
question marks which can lead to undesired side effects (for
example in regular expressions).

confirmappend

Type: boolean 
Default: yes

When
set, Mutt will prompt for confirmation when appending
messages to an existing mailbox.

confirmcreate

Type: boolean 
Default: yes

When
set, Mutt will prompt for confirmation when saving
messages to a mailbox which does not yet exist before
creating it.

connect_timeout

Type: number 
Default: 30

Causes Mutt to
timeout a network connection (for IMAP, POP or SMTP) after
this many seconds if the connection is not able to be
established. A negative value causes Mutt to wait
indefinitely for the connection attempt to succeed.

content_type

Type: string 
Default: &ldquo;text/plain&rdquo;

Sets the
default Content-Type for the body of newly composed
messages.

copy

Type: quadoption

Default: yes

This variable
controls whether or not copies of your outgoing messages
will be saved for later references. Also see $record,
$save_name, $force_name and &ldquo;fcc-hook&rdquo;.

copy_decode_weed

Type: boolean 
Default: no

Controls
whether Mutt will weed headers when invoking the
 or 
functions.

count_alternatives

Type: boolean 
Default: no

When
set, Mutt will recurse inside multipart/alternatives
while performing attachment searching and counting (see
attachments).

Traditionally,
multipart/alternative parts have simply represented
different encodings of the main content of the email.
Unfortunately, some mail clients have started to place email
attachments inside one of alternatives. Setting this will
allow Mutt to find and count matching attachments hidden
there, and include them in the index via %X or through ~X
pattern matching.

cursor_overlay

Type: boolean 
Default: no

When
set, Mutt will overlay the indicator, tree,
sidebar_highlight, and sidebar_indicator colors onto the
currently selected line. This will allow default
colors in those to be overridden, and for attributes to be
merged between the layers.

crypt_autoencrypt

Type: boolean 
Default: no

Setting this
variable will cause Mutt to always attempt to PGP encrypt
outgoing messages. This is probably only useful in
connection to the &ldquo;send-hook&rdquo; command. It can be
overridden by use of the pgp menu, when encryption is not
required or signing is requested as well. If
$smime_is_default is set, then OpenSSL is used
instead to create S/MIME messages and settings can be
overridden by use of the smime menu instead. (Crypto
only)

crypt_autopgp

Type: boolean 
Default: yes

This variable
controls whether or not mutt may automatically enable PGP
encryption/signing for messages. See also
$crypt_autoencrypt, $crypt_replyencrypt, $crypt_autosign,
$crypt_replysign and $smime_is_default.

crypt_autosign

Type: boolean 
Default: no

Setting this
variable will cause Mutt to always attempt to
cryptographically sign outgoing messages. This can be
overridden by use of the pgp menu, when signing is not
required or encryption is requested as well. If
$smime_is_default is set, then OpenSSL is used
instead to create S/MIME messages and settings can be
overridden by use of the smime menu instead of the pgp menu.
(Crypto only)

crypt_autosmime

Type: boolean 
Default: yes

This variable
controls whether or not mutt may automatically enable S/MIME
encryption/signing for messages. See also
$crypt_autoencrypt, $crypt_replyencrypt, $crypt_autosign,
$crypt_replysign and $smime_is_default.

crypt_confirmhook

Type: boolean 
Default: yes

If set, then
you will be prompted for confirmation of keys when using the
crypt-hook command. If unset, no such confirmation
prompt will be presented. This is generally considered
unsafe, especially where typos are concerned.

crypt_opportunistic_encrypt

Type: boolean 
Default: no

Setting this
variable will cause Mutt to automatically enable and disable
encryption, based on whether all message recipient keys can
be located by Mutt.

When this
option is enabled, Mutt will enable/disable encryption each
time the TO, CC, and BCC lists are edited. If $edit_headers
is set, Mutt will also do so each time the message is
edited.

While this is
set, encryption can&rsquo;t be manually enabled/disabled.
The pgp or smime menus provide a selection to temporarily
disable this option for the current message.

If
$crypt_autoencrypt or $crypt_replyencrypt enable encryption
for a message, this option will be disabled for that
message. It can be manually re-enabled in the pgp or smime
menus. (Crypto only)

crypt_opportunistic_encrypt_strong_keys

Type: boolean 
Default: no

When set, this
modifies the behavior of $crypt_opportunistic_encrypt to
only search for &rdquo;strong keys&rdquo;, that is, keys
with full validity according to the web-of-trust algorithm.
A key with marginal or no validity will not enable
opportunistic encryption.

For S/MIME, the
behavior depends on the backend. Classic S/MIME will filter
for certificates with the &rsquo;t&rsquo; (trusted) flag in
the .index file. The GPGME backend will use the same filters
as with OpenPGP, and depends on GPGME&rsquo;s logic for
assigning the GPGME_VALIDITY_FULL and
GPGME_VALIDITY_ULTIMATE validity flag.

crypt_protected_headers_read

Type: boolean 
Default: yes

When set, Mutt
will display protected headers in the pager, and will update
the index and header cache with revised headers. Protected
headers are stored inside the encrypted or signed part of an
an email, to prevent disclosure or tampering. For more
information see
https://github.com/autocrypt/protected-headers. Currently
Mutt only supports the Subject header.

Encrypted
messages using protected headers often substitute the
exposed Subject header with a dummy value (see
$crypt_protected_headers_subject). Mutt will update its
concept of the correct subject after the message is
opened, i.e. via the 
function. If you reply to a message before opening it, Mutt
will end up using the dummy Subject header, so be sure to
open such a message first. (Crypto only)

crypt_protected_headers_save

Type: boolean 
Default: no

When
$crypt_protected_headers_read is set, and a message with a
protected Subject is opened, Mutt will save the updated
Subject into the header cache by default. This allows
searching/limiting based on the protected Subject header if
the mailbox is re-opened, without having to re-open the
message each time. However, for mbox/mh mailbox types, or if
header caching is not set up, you would need to re-open the
message each time the mailbox was reopened before you could
see or search/limit on the protected subject again.

When this
variable is set, Mutt additionally saves the protected
Subject back in the clear-text message headers. This
provides better usability, but with the tradeoff of reduced
security. The protected Subject header, which may have
previously been encrypted, is now stored in clear-text in
the message headers. Copying the message elsewhere, via Mutt
or external tools, could expose this previously encrypted
data. Please make sure you understand the consequences of
this before you enable this variable. (Crypto only)

crypt_protected_headers_subject

Type: string 
Default: &ldquo;...&rdquo;

When
$crypt_protected_headers_write is set, and the message is
marked for encryption, this will be substituted into the
Subject field in the message headers. To prevent a subject
from being substituted, unset this variable, or set it to
the empty string. (Crypto only)

crypt_protected_headers_write

Type: boolean 
Default: no

When set, Mutt
will generate protected headers for signed and encrypted
emails. Protected headers are stored inside the encrypted or
signed part of an an email, to prevent disclosure or
tampering. For more information see
https://github.com/autocrypt/protected-headers. Currently
Mutt only supports the Subject header. (Crypto only)

crypt_replyencrypt

Type: boolean 
Default: yes

If set,
automatically PGP or OpenSSL encrypt replies to messages
which are encrypted. (Crypto only)

crypt_replysign

Type: boolean 
Default: no

If set,
automatically PGP or OpenSSL sign replies to messages which
are signed.

Note:
this does not work on messages that are encrypted and
signed! (Crypto only)

crypt_replysignencrypted

Type: boolean 
Default: no

If set,
automatically PGP or OpenSSL sign replies to messages which
are encrypted. This makes sense in combination with
$crypt_replyencrypt, because it allows you to sign all
messages which are automatically encrypted. This works
around the problem noted in $crypt_replysign, that mutt is
not able to find out whether an encrypted message is also
signed. (Crypto only)

crypt_timestamp

Type: boolean 
Default: yes

If set,
mutt will include a time stamp in the lines surrounding PGP
or S/MIME output, so spoofing such lines is more difficult.
If you are using colors to mark these lines, and rely on
these, you may unset this setting. (Crypto only)

crypt_use_gpgme

Type: boolean 
Default: no

This variable
controls the use of the GPGME-enabled crypto backends. If it
is set and Mutt was built with gpgme support, the
gpgme code for S/MIME and PGP will be used instead of the
classic code. Note that you need to set this option in
.muttrc; it won&rsquo;t have any effect when used
interactively.

Note that the
GPGME backend does not support creating old-style inline
(traditional) PGP encrypted or signed messages (see
$pgp_autoinline).

crypt_use_pka

Type: boolean 
Default: no

Controls
whether mutt uses PKA (see
http://www.g10code.de/docs/pka-intro.de.pdf) during
signature verification (only supported by the GPGME
backend).

crypt_verify_sig

Type: quadoption 
Default: yes

If
&ldquo;yes&rdquo;, always attempt to verify PGP or
S/MIME signatures. If &ldquo;ask-*&rdquo;, ask
whether or not to verify the signature. If
&ldquo;no&rdquo;, never attempt to verify
cryptographic signatures. (Crypto only)

date_format

Type: string 
Default: &ldquo;!%a, %b %d, %Y at %I:%M:%S%p %Z&rdquo;

This variable
controls the format of the date printed by the
&ldquo;%d&rdquo; sequence in $index_format. This is passed
to the strftime(3) function to process the date, see
the man page for the proper syntax.

Unless the
first character in the string is a bang (&ldquo;!&rdquo;),
the month and week day names are expanded according to the
locale. If the first character in the string is a bang, the
bang is discarded, and the month and week day names in the
rest of the string are expanded in the C locale (that
is in US English).

default_hook

Type: string 
Default: &ldquo;~f %s !~P | (~P ~C %s)&rdquo;

This variable
controls how &ldquo;message-hook&rdquo;,
&ldquo;reply-hook&rdquo;, &ldquo;send-hook&rdquo;,
&ldquo;send2-hook&rdquo;, &ldquo;save-hook&rdquo;, and
&ldquo;fcc-hook&rdquo; will be interpreted if they are
specified with only a simple regexp, instead of a matching
pattern. The hooks are expanded when they are declared, so a
hook will be interpreted according to the value of this
variable at the time the hook is declared.

The default
value matches if the message is either from a user matching
the regular expression given, or if it is from you (if the
from address matches &ldquo;alternates&rdquo;) and is to or
cc&rsquo;ed to a user matching the given regular
expression.

delete

Type: quadoption

Default: ask-yes

Controls
whether or not messages are really deleted when closing or
synchronizing a mailbox. If set to yes, messages
marked for deleting will automatically be purged without
prompting. If set to no, messages marked for deletion
will be kept in the mailbox.

This option is
ignored for maildir-style mailboxes when $maildir_trash is
set.

delete_untag

Type: boolean 
Default: yes

If this option
is set, mutt will untag messages when marking them
for deletion. This applies when you either explicitly delete
a message, or when you save it to another folder.

digest_collapse

Type: boolean 
Default: yes

If this option
is set, mutt&rsquo;s received-attachments menu will
not show the subparts of individual messages in a
multipart/digest. To see these subparts, press
&ldquo;v&rdquo; on that menu.

display_filter

Type: path 
Default: &ldquo;&rdquo;

When set,
specifies a command used to filter messages. When a message
is viewed it is passed as standard input to $display_filter,
and the filtered message is read from the standard
output.

dotlock_program

Type: path 
Default: &ldquo;/usr/bin/mutt_dotlock&rdquo;

Contains the
path of the mutt_dotlock(1) binary to be used by
mutt.

dsn_notify

Type: string 
Default: &ldquo;&rdquo;

This variable
sets the request for when notification is returned. The
string consists of a comma separated list (no spaces!) of
one or more of the following: never, to never request
notification, failure, to request notification on
transmission failure, delay, to be notified of
message delays, success, to be notified of successful
transmission.

Example:

set
dsn_notify=&rdquo;failure,delay&rdquo;

Note:
when using $sendmail for delivery, you should not enable
this unless you are either using Sendmail 8.8.x or greater
or a MTA providing a sendmail(1)-compatible interface
supporting the -N option for DSN. For SMTP delivery,
DSN support is auto-detected so that it depends on the
server whether DSN will be used or not.

dsn_return

Type: string 
Default: &ldquo;&rdquo;

This variable
controls how much of your message is returned in DSN
messages. It may be set to either hdrs to return just
the message header, or full to return the full
message.

Example:

set
dsn_return=hdrs

Note:
when using $sendmail for delivery, you should not enable
this unless you are either using Sendmail 8.8.x or greater
or a MTA providing a sendmail(1)-compatible interface
supporting the -R option for DSN. For SMTP delivery,
DSN support is auto-detected so that it depends on the
server whether DSN will be used or not.

duplicate_threads

Type: boolean 
Default: yes

This variable
controls whether mutt, when $sort is set to threads,
threads messages with the same Message-Id together. If it is
set, it will indicate that it thinks they are
duplicates of each other with an equals sign in the thread
tree.

edit_headers

Type: boolean 
Default: no

This option
allows you to edit the header of your outgoing messages
along with the body of your message.

Although the
compose menu may have localized header labels, the labels
passed to your editor will be standard RFC 2822 headers,
(e.g. To:, Cc:, Subject:). Headers added in your editor must
also be RFC 2822 headers, or one of the pseudo headers
listed in &ldquo;edit-header&rdquo;. Mutt will not
understand localized header labels, just as it would not
when parsing an actual email.

Note
that changes made to the References: and Date: headers are
ignored for interoperability reasons.

editor

Type: path

Default: &ldquo;&rdquo;

This variable
specifies which editor is used by mutt. It defaults to the
value of the $VISUAL, or $EDITOR, environment
variable, or to the string &ldquo;vi&rdquo; if neither of
those are set.

The
$editor string may contain a %s escape, which
will be replaced by the name of the file to be edited. If
the %s escape does not appear in $editor, a
space and the name to be edited are appended.

The resulting
string is then executed by running

sh -c
&rsquo;string&rsquo;

where
string is the expansion of $editor described
above.

encode_from

Type: boolean 
Default: no

When
set, mutt will quoted-printable encode messages when
they contain the string &ldquo;From &rdquo; (note the
trailing space) in the beginning of a line. This is useful
to avoid the tampering certain mail delivery and transport
agents tend to do with messages (in order to prevent tools
from misinterpreting the line as a mbox message
separator).

entropy_file

Type: path 
Default: &ldquo;&rdquo;

The file which
includes random data that is used to initialize SSL library
functions. (OpenSSL only)

envelope_from_address

Type: e-mail address 
Default: &ldquo;&rdquo;

Manually sets
the envelope sender for outgoing messages. This value
is ignored if $use_envelope_from is unset.

error_history

Type: number 
Default: 30

This variable
controls the size (in number of strings remembered) of the
error messages displayed by mutt. These can be shown with
the  function. The history is
cleared each time this variable is set.

escape

Type: string

Default: &ldquo;~&rdquo;

Escape
character to use for functions in the built-in editor.

fast_reply

Type: boolean 
Default: no

When
set, the initial prompt for recipients and subject
are skipped when replying to messages, and the initial
prompt for subject is skipped when forwarding messages.

Note:
this variable has no effect when the $autoedit variable is
set.

fcc_attach

Type: quadoption 
Default: yes

This variable
controls whether or not attachments on outgoing messages are
saved along with the main body of your message.

Note:
$fcc_before_send forces the default (set) behavior of this
option.

fcc_before_send

Type: boolean 
Default: no

When this
variable is set, FCCs will occur before sending the
message. Before sending, the message cannot be manipulated,
so it will be stored the exact same as sent: $fcc_attach and
$fcc_clear will be ignored (using their default values).

When
unset, the default, FCCs will occur after sending.
Variables $fcc_attach and $fcc_clear will be respected,
allowing it to be stored without attachments or
encryption/signing if desired.

fcc_clear

Type: boolean 
Default: no

When this
variable is set, FCCs will be stored unencrypted and
unsigned, even when the actual message is encrypted and/or
signed.

Note:
$fcc_before_send forces the default (unset) behavior of this
option. (PGP only)

See also
$pgp_self_encrypt, $smime_self_encrypt.

fcc_delimiter

Type: string 
Default: &ldquo;&rdquo;

When specified,
this allows the ability to Fcc to more than one mailbox. The
fcc value will be split by this delimiter and Mutt will
evaluate each part as a mailbox separately.

See $record,
&ldquo;fcc-hook&rdquo;, and &ldquo;fcc-save-hook&rdquo;.

flag_safe

Type: boolean 
Default: no

If set, flagged
messages cannot be deleted.

folder

Type: path

Default:
&ldquo;~/Mail&rdquo;

Specifies the
default location of your mailboxes. A &ldquo;+&rdquo; or
&ldquo;=&rdquo; at the beginning of a pathname will be
expanded to the value of this variable. Note that if you
change this variable (from the default) value you need to
make sure that the assignment occurs before you use
&ldquo;+&rdquo; or &ldquo;=&rdquo; for any other variables
since expansion takes place when handling the
&ldquo;mailboxes&rdquo; command.

folder_format

Type: string 
Default: &ldquo;%2C %t %N %F %2l %-8.8u %-8.8g %8s %d
%f&rdquo;

This variable
allows you to customize the file browser display to your
personal taste. This string is similar to $index_format, but
has its own set of printf(3)-like sequences:

%C

current file number

%d

date/time folder was last modified

%D

date/time folder was last modified using
$date_format. 

%f

filename (&ldquo;/&rdquo; is appended to directory
names, &ldquo;@&rdquo; to symbolic links and &ldquo;*&rdquo;
to executable files)

%F

file permissions

%g

group name (or numeric gid, if missing)

%l

number of hard links

%m

number of messages in the mailbox *

%n

number of unread messages in the mailbox *

%N

N if mailbox has new mail, blank otherwise

%s

size in bytes (see formatstrings-size)

%t

&ldquo;*&rdquo; if the file is tagged, blank
otherwise 

%u

owner name (or numeric uid, if missing)

%>X

right justify the rest of the string and pad with
character &ldquo;X&rdquo;

%|X

pad to the end of the line with character
&ldquo;X&rdquo; 

%*X

soft-fill with character &ldquo;X&rdquo; as pad

For an
explanation of &ldquo;soft-fill&rdquo;, see the
$index_format documentation.

* = can be
optionally printed if nonzero

%m, %n, and %N
only work for monitored mailboxes. %m requires
$mail_check_stats to be set. %n requires $mail_check_stats
to be set (except for IMAP mailboxes).

followup_to

Type: boolean 
Default: yes

Controls
whether or not the &ldquo;Mail-Followup-To:&rdquo; header
field is generated when sending mail. When set, Mutt
will generate this field when you are replying to a known
mailing list, specified with the &ldquo;subscribe&rdquo; or
&ldquo;lists&rdquo; commands.

This field has
two purposes. First, preventing you from receiving duplicate
copies of replies to messages which you send to mailing
lists, and second, ensuring that you do get a reply
separately for any messages sent to known lists to which you
are not subscribed.

The header will
contain only the list&rsquo;s address for subscribed lists,
and both the list address and your own email address for
unsubscribed lists. Without this header, a group reply to
your message sent to a subscribed list will be sent to both
the list and your address, resulting in two copies of the
same email for you.

force_name

Type: boolean 
Default: no

This variable
is similar to $save_name, except that Mutt will store a copy
of your outgoing message by the username of the address you
are sending to even if that mailbox does not exist.

Also see the
$record variable.

forward_attachments

Type: quadoption 
Default: ask-yes

When forwarding
inline (i.e. $mime_forward unset or answered with
&ldquo;no&rdquo; and $forward_decode set),
attachments which cannot be decoded in a reasonable manner
will be attached to the newly composed message if this
quadoption is set or answered with
&ldquo;yes&rdquo;.

forward_attribution_intro

Type: string (localized) 
Default: &ldquo;----- Forwarded message from %f
-----&rdquo;

This is the
string that will precede a message which has been forwarded
in the main body of a message (when $mime_forward is unset).
For a full listing of defined printf(3)-like
sequences see the section on $index_format. See also
$attribution_locale.

forward_attribution_trailer

Type: string (localized) 
Default: &ldquo;----- End forwarded message -----&rdquo;

This is the
string that will follow a message which has been forwarded
in the main body of a message (when $mime_forward is unset).
For a full listing of defined printf(3)-like
sequences see the section on $index_format. See also
$attribution_locale.

forward_decode

Type: boolean 
Default: yes

Controls the
decoding of complex MIME messages into text/plain
when forwarding a message. The message header is also
RFC2047 decoded. This variable is only used, if
$mime_forward is unset, otherwise
$mime_forward_decode is used instead.

forward_decrypt

Type: quadoption 
Default: yes

This quadoption
controls the handling of encrypted messages when forwarding
or attaching a message. When set to or answered
&ldquo;yes&rdquo;, the outer layer of encryption is stripped
off.

This variable
is used if $mime_forward is set and
$mime_forward_decode is unset. It is also used when
attaching a message via  in the
compose menu. (PGP only)

forward_edit

Type: quadoption 
Default: yes

This quadoption
controls whether or not the user is automatically placed in
the editor when forwarding messages. For those who always
want to forward with no modification, use a setting of
&ldquo;no&rdquo;.

forward_format

Type: string 
Default: &ldquo;[%a: %s]&rdquo;

This variable
controls the default subject when forwarding a message. It
uses the same format sequences as the $index_format
variable.

forward_quote

Type: boolean 
Default: no

When
set, forwarded messages included in the main body of
the message (when $mime_forward is unset) will be
quoted using $indent_string.

from

Type: e-mail address

Default: &ldquo;&rdquo;

When
set, this variable contains a default from address.
It can be overridden using &ldquo;my_hdr&rdquo; (including
from a &ldquo;send-hook&rdquo;) and $reverse_name. This
variable is ignored if $use_from is unset.

This setting
defaults to the contents of the environment variable
$EMAIL.

gecos_mask

Type: regular expression 
Default: &ldquo;^[^,]*&rdquo;

A regular
expression used by mutt to parse the GECOS field of a
password entry when expanding the alias. The default value
will return the string up to the first &ldquo;,&rdquo;
encountered. If the GECOS field contains a string like
&ldquo;lastname, firstname&rdquo; then you should set it to
&ldquo;.*&rdquo;.

This can be
useful if you see the following behavior: you address an
e-mail to user ID &ldquo;stevef&rdquo; whose full name is
&ldquo;Steve Franklin&rdquo;. If mutt expands
&ldquo;stevef&rdquo; to &ldquo;&rdquo;Franklin&rdquo;
stevef [AT] foo.bar&rdquo; then you should set the $gecos_mask to
a regular expression that will match the whole name so mutt
will expand &ldquo;Franklin&rdquo; to &ldquo;Franklin,
Steve&rdquo;.

hdrs

Type: boolean

Default: yes

When
unset, the header fields normally added by the
&ldquo;my_hdr&rdquo; command are not created. This variable
must be unset before composing a new message or
replying in order to take effect. If set, the user
defined header fields are added to every new message.

header

Type: boolean

Default: no

When
set, this variable causes Mutt to include the header
of the message you are replying to into the edit buffer. The
$weed setting applies.

header_cache

Type: path 
Default: &ldquo;&rdquo;

This variable
points to the header cache database. If pointing to a
directory Mutt will contain a header cache database file per
folder, if pointing to a file that file will be a single
global header cache. By default it is unset so no
header caching will be used. If pointing to a directory, it
must be created in advance.

Header caching
can greatly improve speed when opening POP, IMAP MH or
Maildir folders, see &ldquo;caching&rdquo; for details.

header_cache_compress

Type: boolean 
Default: yes

When mutt is
compiled with qdbm, tokyocabinet, or kyotocabinet as header
cache backend, this option determines whether the database
will be compressed. Compression results in database files
roughly being one fifth of the usual diskspace, but the
decompression can result in a slower opening of cached
folder(s) which in general is still much faster than opening
non header cached folders.

header_cache_pagesize

Type: number (long) 
Default: 16384

When mutt is
compiled with either gdbm or bdb4 as the header cache
backend, this option changes the database page size. Too
large or too small values can waste space, memory, or CPU
time. The default should be more or less optimal for most
use cases.

header_color_partial

Type: boolean 
Default: no

When
set, color header regexps behave like color body
regexps: color is applied to the exact text matched by the
regexp. When unset, color is applied to the entire
header.

One use of this
option might be to apply color to just the header
labels.

See
&ldquo;color&rdquo; for more details.

help

Type: boolean

Default: yes

When
set, help lines describing the bindings for the major
functions provided by each menu are displayed on the first
line of the screen.

Note:
The binding will not be displayed correctly if the function
is bound to a sequence rather than a single keystroke. Also,
the help line may not be updated if a binding is changed
while Mutt is running. Since this variable is primarily
aimed at new users, neither of these should present a major
problem.

hidden_host

Type: boolean 
Default: no

When
set, mutt will skip the host name part of $hostname
variable when adding the domain part to addresses. This
variable does not affect the generation of Message-IDs, and
it will not lead to the cut-off of first-level domains.

hide_limited

Type: boolean 
Default: no

When
set, mutt will not show the presence of messages that
are hidden by limiting, in the thread tree.

hide_missing

Type: boolean 
Default: yes

When
set, mutt will not show the presence of missing
messages in the thread tree.

hide_thread_subject

Type: boolean 
Default: yes

When
set, mutt will not show the subject of messages in
the thread tree that have the same subject as their parent
or closest previously displayed sibling.

hide_top_limited

Type: boolean 
Default: no

When
set, mutt will not show the presence of messages that
are hidden by limiting, at the top of threads in the thread
tree. Note that when $hide_limited is set, this
option will have no effect.

hide_top_missing

Type: boolean 
Default: yes

When
set, mutt will not show the presence of missing
messages at the top of threads in the thread tree. Note that
when $hide_missing is set, this option will have no
effect.

history

Type: number 
Default: 10

This variable
controls the size (in number of strings remembered) of the
string history buffer per category. The buffer is cleared
each time the variable is set.

history_file

Type: path 
Default: &ldquo;~/.mutthistory&rdquo;

The file in
which Mutt will save its history.

Also see
$save_history.

history_remove_dups

Type: boolean 
Default: no

When
set, all of the string history will be scanned for
duplicates when a new entry is added. Duplicate entries in
the $history_file will also be removed when it is
periodically compacted.

honor_disposition

Type: boolean 
Default: no

When
set, Mutt will not display attachments with a
disposition of &ldquo;attachment&rdquo; inline even if it
could render the part to plain text. These MIME parts can
only be viewed from the attachment menu.

If
unset, Mutt will render all MIME parts it can
properly transform to plain text.

honor_followup_to

Type: quadoption 
Default: yes

This variable
controls whether or not a Mail-Followup-To header is honored
when group-replying to a message.

hostname

Type: string 
Default: &ldquo;&rdquo;

Specifies the
fully-qualified hostname of the system mutt is running on
containing the host&rsquo;s name and the DNS domain it
belongs to. It is used as the domain part (after
&ldquo;@&rdquo;) for local email addresses as well as
Message-Id headers.

Its value is
determined at startup as follows: the node&rsquo;s hostname
is first determined by the uname(3) function. The
domain is then looked up using the gethostname(2) and
getaddrinfo(3) functions. If those calls are unable
to determine the domain, the full value returned by uname is
used. Optionally, Mutt can be compiled with a fixed domain
name in which case a detected one is not used.

Starting in
Mutt 2.0, the operations described in the previous paragraph
are performed after the muttrc is processed, instead of
beforehand. This way, if the DNS operations are creating
delays at startup, you can avoid those by manually setting
the value in your muttrc.

Also see
$use_domain and $hidden_host.

idn_decode

Type: boolean 
Default: yes

When
set, Mutt will show you international domain names
decoded. Note: You can use IDNs for addresses even if this
is unset. This variable only affects decoding. (IDN
only)

idn_encode

Type: boolean 
Default: yes

When
set, Mutt will encode international domain names
using IDN. Unset this if your SMTP server can handle newer
(RFC 6531) UTF-8 encoded domains. (IDN only)

ignore_linear_white_space

Type: boolean 
Default: no

This option
replaces linear-white-space between encoded-word and text to
a single space to prevent the display of MIME-encoded
&ldquo;Subject:&rdquo; field from being divided into
multiple lines.

ignore_list_reply_to

Type: boolean 
Default: no

Affects the
behavior of the  function when replying
to messages from mailing lists (as defined by the
&ldquo;subscribe&rdquo; or &ldquo;lists&rdquo; commands).
When set, if the &ldquo;Reply-To:&rdquo; field is set
to the same value as the &ldquo;To:&rdquo; field, Mutt
assumes that the &ldquo;Reply-To:&rdquo; field was set by
the mailing list to automate responses to the list, and will
ignore this field. To direct a response to the mailing list
when this option is set, use the
 function;
 will reply to both the sender and
the list.

imap_authenticators

Type: string 
Default: &ldquo;&rdquo;

This is a
colon-delimited list of authentication methods mutt may
attempt to use to log in to an IMAP server, in the order
mutt should try them. Authentication methods are either
&ldquo;login&rdquo; or the right side of an IMAP
&ldquo;AUTH=xxx&rdquo; capability string, e.g.
&ldquo;digest-md5&rdquo;, &ldquo;gssapi&rdquo; or
&ldquo;cram-md5&rdquo;. This option is case-insensitive. If
it&rsquo;s unset (the default) mutt will try all
available methods, in order from most-secure to
least-secure.

Example:

set
imap_authenticators=&rdquo;gssapi:cram-md5:login&rdquo;

Note:
Mutt will only fall back to other authentication methods if
the previous methods are unavailable. If a method is
available but authentication fails, mutt will not connect to
the IMAP server.

imap_check_subscribed

Type: boolean 
Default: no

When
set, mutt will fetch the set of subscribed folders
from your server on connection, and add them to the set of
mailboxes it polls for new mail just as if you had issued
individual &ldquo;mailboxes&rdquo; commands.

imap_condstore

Type: boolean 
Default: no

When
set, mutt will use the CONDSTORE extension (RFC 7162)
if advertised by the server. Mutt&rsquo;s current
implementation is basic, used only for initial message
fetching and flag updates.

For some IMAP
servers, enabling this will slightly speed up downloading
initial messages. Unfortunately, Gmail is not one those, and
displays worse performance when enabled. Your mileage may
vary.

imap_deflate

Type: boolean 
Default: no

When
set, mutt will use the COMPRESS=DEFLATE extension
(RFC 4978) if advertised by the server.

In general a
good compression efficiency can be achieved, which speeds up
reading large mailboxes also on fairly good connections.

imap_delim_chars

Type: string 
Default: &ldquo;/.&rdquo;

This contains
the list of characters which you would like to treat as
folder separators for displaying IMAP paths. In particular
it helps in using the &ldquo;=&rdquo; shortcut for your
folder variable.

imap_fetch_chunk_size

Type: number (long) 
Default: 0

When set to a
value greater than 0, new headers will be downloaded in
groups of this many headers per request. If you have a very
large mailbox, this might prevent a timeout and disconnect
when opening the mailbox, by sending a FETCH per set of this
many headers, instead of a single FETCH for all new
headers.

imap_headers

Type: string 
Default: &ldquo;&rdquo;

Mutt requests
these header fields in addition to the default headers
(&ldquo;Date:&rdquo;, &ldquo;From:&rdquo;,
&ldquo;Sender:&rdquo;, &ldquo;Subject:&rdquo;,
&ldquo;To:&rdquo;, &ldquo;Cc:&rdquo;,
&ldquo;Message-Id:&rdquo;, &ldquo;References:&rdquo;,
&ldquo;Content-Type:&rdquo;,
&ldquo;Content-Description:&rdquo;,
&ldquo;In-Reply-To:&rdquo;, &ldquo;Reply-To:&rdquo;,
&ldquo;Lines:&rdquo;, &ldquo;List-Post:&rdquo;,
&ldquo;X-Label:&rdquo;) from IMAP servers before displaying
the index menu. You may want to add more headers for spam
detection.

Note:
This is a space separated list, items should be uppercase
and not contain the colon, e.g. &ldquo;X-BOGOSITY
X-SPAM-STATUS&rdquo; for the &ldquo;X-Bogosity:&rdquo; and
&ldquo;X-Spam-Status:&rdquo; header fields.

imap_idle

Type: boolean 
Default: no

When
set, mutt will attempt to use the IMAP IDLE extension
to check for new mail in the current mailbox. Some servers
(dovecot was the inspiration for this option) react badly to
mutt&rsquo;s implementation. If your connection seems to
freeze up periodically, try unsetting this.

imap_keepalive

Type: number 
Default: 300

This variable
specifies the maximum amount of time in seconds that mutt
will wait before polling open IMAP connections, to prevent
the server from closing them before mutt has finished with
them. The default is well within the RFC-specified minimum
amount of time (30 minutes) before a server is allowed to do
this, but in practice the RFC does get violated every now
and then. Reduce this number if you find yourself getting
disconnected from your IMAP server due to inactivity.

imap_list_subscribed

Type: boolean 
Default: no

This variable
configures whether IMAP folder browsing will look for only
subscribed folders or all folders. This can be toggled in
the IMAP browser with the 
function.

imap_login

Type: string 
Default: &ldquo;&rdquo;

Your login name
on the IMAP server.

This variable
defaults to the value of $imap_user.

imap_oauth_refresh_command

Type: string 
Default: &ldquo;&rdquo;

The command to
run to generate an OAUTH refresh token for authorizing your
connection to your IMAP server. This command will be run on
every connection attempt that uses the OAUTHBEARER
authentication mechanism. See &ldquo;oauth&rdquo; for
details.

imap_pass

Type: string 
Default: &ldquo;&rdquo;

Specifies the
password for your IMAP account. If unset, Mutt will
prompt you for your password when you invoke the
 function or try to open an
IMAP folder.

Warning:
you should only use this option when you are on a fairly
secure machine, because the superuser can read your muttrc
even if you are the only one who can read the file.

imap_passive

Type: boolean 
Default: yes

When
set, mutt will not open new IMAP connections to check
for new mail. Mutt will only check for new mail over
existing IMAP connections. This is useful if you don&rsquo;t
want to be prompted for user/password pairs on mutt
invocation, or if opening the connection is slow.

imap_peek

Type: boolean 
Default: yes

When
set, mutt will avoid implicitly marking your mail as
read whenever you fetch a message from the server. This is
generally a good thing, but can make closing an IMAP folder
somewhat slower. This option exists to appease speed
freaks.

imap_pipeline_depth

Type: number 
Default: 15

Controls the
number of IMAP commands that may be queued up before they
are sent to the server. A deeper pipeline reduces the amount
of time mutt must wait for the server, and can make IMAP
servers feel much more responsive. But not all servers
correctly handle pipelined commands, so if you have problems
you might want to try setting this variable to 0.

Note:
Changes to this variable have no effect on open
connections.

imap_poll_timeout

Type: number 
Default: 15

This variable
specifies the maximum amount of time in seconds that mutt
will wait for a response when polling IMAP connections for
new mail, before timing out and closing the connection. Set
to 0 to disable timing out.

imap_qresync

Type: boolean 
Default: no

When
set, mutt will use the QRESYNC extension (RFC 7162)
if advertised by the server. Mutt&rsquo;s current
implementation is basic, used only for initial message
fetching and flag updates.

Note: this
feature is currently experimental. If you experience strange
behavior, such as duplicate or missing messages please file
a bug report to let us know.

imap_servernoise

Type: boolean 
Default: yes

When
set, mutt will display warning messages from the IMAP
server as error messages. Since these messages are often
harmless, or generated due to configuration problems on the
server which are out of the users&rsquo; hands, you may wish
to suppress them at some point.

imap_user

Type: string 
Default: &ldquo;&rdquo;

The name of the
user whose mail you intend to access on the IMAP server.

This variable
defaults to your user name on the local machine.

implicit_autoview

Type: boolean 
Default: no

If set to
&ldquo;yes&rdquo;, mutt will look for a mailcap entry with
the &ldquo;copiousoutput&rdquo; flag set for
every MIME attachment it doesn&rsquo;t have an
internal viewer defined for. If such an entry is found, mutt
will use the viewer defined in that entry to convert the
body part to text form.

include

Type: quadoption 
Default: ask-yes

Controls
whether or not a copy of the message(s) you are replying to
is included in your reply.

include_encrypted

Type: boolean 
Default: no

Controls
whether or not Mutt includes separately encrypted attachment
contents when replying.

This variable
was added to prevent accidental exposure of encrypted
contents when replying to an attacker. If a previously
encrypted message were attached by the attacker, they could
trick an unwary recipient into decrypting and including the
message in their reply.

include_onlyfirst

Type: boolean 
Default: no

Controls
whether or not Mutt includes only the first attachment of
the message you are replying.

indent_string

Type: string 
Default: &ldquo;> &rdquo;

Specifies the
string to prepend to each line of text quoted in a message
to which you are replying. You are strongly encouraged not
to change this value, as it tends to agitate the more
fanatical netizens.

The value of
this option is ignored if $text_flowed is set, because the
quoting mechanism is strictly defined for format=flowed.

This option is
a format string, please see the description of $index_format
for supported printf(3)-style sequences.

index_format

Type: string 
Default: &ldquo;%4C %Z %{%b %d} %-15.15L (%?l?%4l&%4c?)
%s&rdquo;

This variable
allows you to customize the message index display to your
personal taste.

&ldquo;Format
strings&rdquo; are similar to the strings used in the C
function printf(3) to format output (see the man page
for more details). For an explanation of the %? construct,
see the $status_format description. The following sequences
are defined in Mutt:

%a

address of the author

%A

reply-to address (if present; otherwise: address of
author) 

%b

filename of the original message folder (think
mailbox) 

%B

the list to which the letter was sent, or else the
folder name (%b).

%c

number of characters (bytes) in the message (see
formatstrings-size) 

%C

current message number

%d

date and time of the message in the format specified by
$date_format converted to sender&rsquo;s time zone

%D

date and time of the message in the format specified by
$date_format converted to the local time zone

%e

current message number in thread

%E

number of messages in current thread

%f

sender (address + real name), either From: or
Return-Path: 

%F

author name, or recipient name if the message is from
you 

%H

spam attribute(s) of this message

%i

message-id of the current message

%l

number of lines in the unprocessed message (may not work
with maildir, mh, and IMAP folders)

%L

If an address in the &ldquo;To:&rdquo; or
&ldquo;Cc:&rdquo; header field matches an address defined by
the users &ldquo;subscribe&rdquo; command, this displays
&rdquo;To &rdquo;, otherwise the same as
%F. 

%m

total number of message in the mailbox

%M

number of hidden messages if the thread is
collapsed. 

%N

message score

%n

author&rsquo;s real name (or address if missing)

%O

original save folder where mutt would formerly have
stashed the message: list name or recipient name if not sent
to a list

%P

progress indicator for the built-in pager (how much of
the file has been displayed)

%r

comma separated list of &ldquo;To:&rdquo; recipients

%R

comma separated list of &ldquo;Cc:&rdquo; recipients

%s

subject of the message

%S

single character status of the message
(&ldquo;N&rdquo;/&ldquo;O&rdquo;/&ldquo;D&rdquo;/&ldquo;d&rdquo;/&ldquo;!&rdquo;/&ldquo;r&rdquo;/&ldquo;*&rdquo;) 

%t

&ldquo;To:&rdquo; field (recipients)

%T

the appropriate character from the $to_chars string

%u

user (login) name of the author

%v

first name of the author, or the recipient if the
message is from you

%X

number of attachments (please see the
&ldquo;attachments&rdquo; section for possible speed
effects) 

%y

&ldquo;X-Label:&rdquo; field, if present

%Y

&ldquo;X-Label:&rdquo; field, if present, and (1)
not at part of a thread tree, (2) at the top of a
thread, or (3) &ldquo;X-Label:&rdquo; is different
from preceding message&rsquo;s &ldquo;X-Label:&rdquo;.

%Z

a three character set of message status flags. the first
character is new/read/replied flags
(&ldquo;n&rdquo;/&ldquo;o&rdquo;/&ldquo;r&rdquo;/&ldquo;O&rdquo;/&ldquo;N&rdquo;).
the second is deleted or encryption flags
(&ldquo;D&rdquo;/&ldquo;d&rdquo;/&ldquo;S&rdquo;/&ldquo;P&rdquo;/&ldquo;s&rdquo;/&ldquo;K&rdquo;).
the third is either tagged/flagged
(&ldquo;*&rdquo;/&ldquo;!&rdquo;), or one of the characters
listed in $to_chars.

%@name@

insert and evaluate
format-string from the matching
&ldquo;index-format-hook&rdquo; command

%{fmt}

the date and time of the message is converted to
sender&rsquo;s time zone, and &ldquo;fmt&rdquo; is expanded
by the library function strftime(3); a leading bang
disables locales

%[fmt]

the date and time of the message is converted to the
local time zone, and &ldquo;fmt&rdquo; is expanded by the
library function strftime(3); a leading bang disables
locales 

%(fmt)

the local date and time when the message was received.
&ldquo;fmt&rdquo; is expanded by the library function
strftime(3); a leading bang disables locales

%

the current local time. &ldquo;fmt&rdquo; is expanded by
the library function strftime(3); a leading bang
disables locales.

%>X

right justify the rest of the string and pad with
character &ldquo;X&rdquo;

%|X

pad to the end of the line with character
&ldquo;X&rdquo; 

%*X

soft-fill with character &ldquo;X&rdquo; as pad

Note that for
mbox/mmdf, &ldquo;%l&rdquo; applies to the unprocessed
message, and for maildir/mh, the value comes from the
&ldquo;Lines:&rdquo; header field when present (the meaning
is normally the same). Thus the value depends on the
encodings used in the different parts of the message and has
little meaning in practice.

&ldquo;Soft-fill&rdquo;
deserves some explanation: Normal right-justification will
print everything to the left of the &ldquo;%>&rdquo;,
displaying padding and whatever lies to the right only if
there&rsquo;s room. By contrast, soft-fill gives priority to
the right-hand side, guaranteeing space to display it and
showing padding only if there&rsquo;s still room. If
necessary, soft-fill will eat text leftwards to make room
for rightward text.

Note that these
expandos are supported in &ldquo;save-hook&rdquo;,
&ldquo;fcc-hook&rdquo;, &ldquo;fcc-save-hook&rdquo;, and
&ldquo;index-format-hook&rdquo;.

They are also
supported in the configuration variables $attribution,
$forward_attribution_intro, $forward_attribution_trailer,
$forward_format, $indent_string, $message_format,
$pager_format, and $post_indent_string.

ispell

Type: path

Default:
&ldquo;/usr/bin/ispell&rdquo;

How to invoke
ispell (GNU&rsquo;s spell-checking software).

keep_flagged

Type: boolean 
Default: no

If set,
read messages marked as flagged will not be moved from your
spool mailbox to your $mbox mailbox, or as a result of a
&ldquo;mbox-hook&rdquo; command.

local_date_header

Type: boolean 
Default: yes

If set,
the date in the Date header of emails that you send will be
in your local timezone. If unset a UTC date will be used
instead to avoid leaking information about your current
location.

mail_check

Type: number 
Default: 5

This variable
configures how often (in seconds) mutt should look for new
mail. Also see the $timeout variable.

mail_check_recent

Type: boolean 
Default: yes

When
set, Mutt will only notify you about new mail that
has been received since the last time you opened the
mailbox. When unset, Mutt will notify you if any new
mail exists in the mailbox, regardless of whether you have
visited it recently.

mail_check_stats

Type: boolean 
Default: no

When
set, mutt will periodically calculate message
statistics of a mailbox while polling for new mail. It will
check for unread, flagged, and total message counts. (Note:
IMAP mailboxes only support unread and total counts).

Because this
operation is more performance intensive, it defaults to
unset, and has a separate option,
$mail_check_stats_interval, to control how often to update
these counts.

Message
statistics can also be explicitly calculated by invoking the
 function.

mail_check_stats_interval

Type: number 
Default: 60

When
$mail_check_stats is set, this variable configures
how often (in seconds) mutt will update message counts.

mailcap_path

Type: string 
Default: &ldquo;&rdquo;

This variable
specifies which files to consult when attempting to display
MIME bodies not directly supported by Mutt. The default
value is generated during startup: see the
&ldquo;mailcap&rdquo; section of the manual.

mailcap_sanitize

Type: boolean 
Default: yes

If set,
mutt will restrict possible characters in mailcap % expandos
to a well-defined set of safe characters. This is the safe
setting, but we are not sure it doesn&rsquo;t break some
more advanced MIME stuff.

DON&rsquo;T
CHANGE THIS SETTING UNLESS YOU ARE REALLY SURE WHAT YOU ARE
DOING!

maildir_header_cache_verify

Type: boolean 
Default: yes

Check for
Maildir unaware programs other than mutt having modified
maildir files when the header cache is in use. This incurs
one stat(2) per message every time the folder is
opened (which can be very slow for NFS folders).

maildir_trash

Type: boolean 
Default: no

If set,
messages marked as deleted will be saved with the maildir
trashed flag instead of unlinked. Note: this only
applies to maildir-style mailboxes. Setting it will have no
effect on other mailbox types.

maildir_check_cur

Type: boolean 
Default: no

If set,
mutt will poll both the new and cur directories of a maildir
folder for new messages. This might be useful if other
programs interacting with the folder (e.g. dovecot) are
moving new messages to the cur directory. Note that setting
this option may slow down polling for new messages in large
folders, since mutt has to scan all cur messages.

mark_macro_prefix

Type: string 
Default: &ldquo;&rsquo;&rdquo;

Prefix for
macros created using mark-message. A new macro automatically
generated with a will be composed
from this prefix and the letter a.

mark_old

Type: boolean 
Default: yes

Controls
whether or not mutt marks new unread messages
as old if you exit a mailbox without reading them.
With this option set, the next time you start mutt,
the messages will show up with an &ldquo;O&rdquo; next to
them in the index menu, indicating that they are old.

markers

Type: boolean 
Default: yes

Controls the
display of wrapped lines in the internal pager. If set, a
&ldquo;+&rdquo; marker is displayed at the beginning of
wrapped lines.

Also see the
$smart_wrap variable.

mask

Type: regular expression

Default:
&ldquo;!^\.[^.]&rdquo;

A regular
expression used in the file browser, optionally preceded by
the not operator &ldquo;!&rdquo;. Only files whose
names match this mask will be shown. The match is always
case-sensitive.

mbox

Type: path

Default:
&ldquo;~/mbox&rdquo;

This specifies
the folder into which read mail in your $spoolfile folder
will be appended.

Also see the
$move variable.

mbox_type

Type: folder magic 
Default: mbox

The default
mailbox type used when creating new folders. May be any of
&ldquo;mbox&rdquo;, &ldquo;MMDF&rdquo;, &ldquo;MH&rdquo; and
&ldquo;Maildir&rdquo;. This is overridden by the -m
command-line option.

menu_context

Type: number 
Default: 0

This variable
controls the number of lines of context that are given when
scrolling through menus. (Similar to $pager_context.)

menu_move_off

Type: boolean 
Default: yes

When
unset, the bottom entry of menus will never scroll up
past the bottom of the screen, unless there are less entries
than lines. When set, the bottom entry may move off
the bottom.

menu_scroll

Type: boolean 
Default: no

When
set, menus will be scrolled up or down one line when
you attempt to move across a screen boundary. If
unset, the screen is cleared and the next or previous
page of the menu is displayed (useful for slow links to
avoid many redraws).

message_cache_clean

Type: boolean 
Default: no

If set,
mutt will clean out obsolete entries from the message cache
when the mailbox is synchronized. You probably only want to
set it every once in a while, since it can be a little slow
(especially for large folders).

message_cachedir

Type: path 
Default: &ldquo;&rdquo;

Set this to a
directory and mutt will cache copies of messages from your
IMAP and POP servers here. You are free to remove entries at
any time.

When setting
this variable to a directory, mutt needs to fetch every
remote message only once and can perform regular expression
searches as fast as for local folders.

Also see the
$message_cache_clean variable.

message_format

Type: string 
Default: &ldquo;%s&rdquo;

This is the
string displayed in the &ldquo;attachment&rdquo; menu for
attachments of type message/rfc822. For a full
listing of defined printf(3)-like sequences see the
section on $index_format.

message_id_format

Type: string 
Default: &ldquo;&rdquo;

This variable
describes the format of the Message-ID generated when
sending messages. Mutt 2.0 introduced a more compact format,
but this variable allows the ability to choose your own
format. The value may end in &ldquo;|&rdquo; to invoke an
external filter. See formatstrings-filters.

Please note
that the Message-ID value follows a strict syntax, and you
are responsible for ensuring correctness if you change this
from the default. In particular, the value must follow the
syntax in RFC 5322: &ldquo;&rdquo;&rdquo;&rdquo;. No
spaces are allowed, and id-left should follow the
dot-atom-text syntax in the RFC. The id-right should
generally be left at %f.

The old
Message-ID format can be used by setting this to:
&ldquo;&rdquo;

The following
printf(3)-style sequences are understood:

%c

step counter looping from &ldquo;A&rdquo; to
&ldquo;Z&rdquo; 

%d

current day of the month (GMT)

%f

$hostname

%H

current hour using a 24-hour clock (GMT)

%m

current month number (GMT)

%M

current minute of the hour (GMT)

%p

pid of the running mutt process

%r

3 bytes of pseudorandom data encoded in Base64

%S

current second of the minute (GMT)

%x

1 byte of pseudorandom data hex encoded (example:
&rsquo;1b&rsquo;) 

%Y

current year using 4 digits (GMT)

%z

4 byte timestamp + 8 bytes of pseudorandom data encoded
in Base64

meta_key

Type: boolean 
Default: no

If set,
forces Mutt to interpret keystrokes with the high bit (bit
8) set as if the user had pressed the Esc key and whatever
key remains after having the high bit removed. For example,
if the key pressed has an ASCII value of 0xf8, then
this is treated as if the user had pressed Esc then
&ldquo;x&rdquo;. This is because the result of removing the
high bit from 0xf8 is 0x78, which is the ASCII
character &ldquo;x&rdquo;.

metoo

Type: boolean

Default: no

If
unset, Mutt will remove your address (see the
&ldquo;alternates&rdquo; command) from the list of
recipients when replying to a message.

mh_purge

Type: boolean 
Default: no

When
unset, mutt will mimic mh&rsquo;s behavior and rename
deleted messages to , in mh
folders instead of really deleting them. This leaves the
message on disk but makes programs reading the folder ignore
it. If the variable is set, the message files will
simply be deleted.

This option is
similar to $maildir_trash for Maildir folders.

mh_seq_flagged

Type: string 
Default: &ldquo;flagged&rdquo;

The name of the
MH sequence used for flagged messages.

mh_seq_replied

Type: string 
Default: &ldquo;replied&rdquo;

The name of the
MH sequence used to tag replied messages.

mh_seq_unseen

Type: string 
Default: &ldquo;unseen&rdquo;

The name of the
MH sequence used for unseen messages.

mime_forward

Type: quadoption 
Default: no

When
set, the message you are forwarding will be attached
as a separate message/rfc822 MIME part instead of
included in the main body of the message. This is useful for
forwarding MIME messages so the receiver can properly view
the message as it was delivered to you. If you like to
switch between MIME and not MIME from mail to mail, set this
variable to &ldquo;ask-no&rdquo; or
&ldquo;ask-yes&rdquo;.

Also see
$forward_decode and $mime_forward_decode.

mime_forward_decode

Type: boolean 
Default: no

Controls the
decoding of complex MIME messages into text/plain
when forwarding a message while $mime_forward is set.
Otherwise $forward_decode is used instead.

mime_forward_rest

Type: quadoption 
Default: yes

When forwarding
multiple attachments of a MIME message from the attachment
menu, attachments which cannot be decoded in a reasonable
manner will be attached to the newly composed message if
this option is set.

mime_type_query_command

Type: string 
Default: &ldquo;&rdquo;

This specifies
a command to run, to determine the mime type of a new
attachment when composing a message. Unless
$mime_type_query_first is set, this will only be run if the
attachment&rsquo;s extension is not found in the mime.types
file.

The string may
contain a &ldquo;%s&rdquo;, which will be substituted with
the attachment filename. Mutt will add quotes around the
string substituted for &ldquo;%s&rdquo; automatically
according to shell quoting rules, so you should avoid adding
your own. If no &ldquo;%s&rdquo; is found in the string,
Mutt will append the attachment filename to the end of the
string.

The command
should output a single line containing the
attachment&rsquo;s mime type.

Suggested
values are &ldquo;xdg-mime query filetype&rdquo; or
&ldquo;file -bi&rdquo;.

mime_type_query_first

Type: boolean 
Default: no

When
set, the $mime_type_query_command will be run before
the mime.types lookup.

mix_entry_format

Type: string 
Default: &ldquo;%4n %c %-16s %a&rdquo;

This variable
describes the format of a remailer line on the mixmaster
chain selection screen. The following printf(3)-like
sequences are supported:

%n

The running number on the menu.

%c

Remailer capabilities.

%s

The remailer&rsquo;s short name.

%a

The remailer&rsquo;s e-mail address.

(Mixmaster
only)

mixmaster

Type: path 
Default: &ldquo;mixmaster&rdquo;

This variable
contains the path to the Mixmaster binary on your system. It
is used with various sets of parameters to gather the list
of known remailers, and to finally send a message through
the mixmaster chain. (Mixmaster only)

move

Type: quadoption

Default: no

Controls
whether or not Mutt will move read messages from your spool
mailbox to your $mbox mailbox, or as a result of a
&ldquo;mbox-hook&rdquo; command.

muttlisp_inline_eval

Type: boolean 
Default: no

If set,
Mutt will evaluate bare parenthesis arguments to commands as
MuttLisp expressions.

narrow_tree

Type: boolean 
Default: no

This variable,
when set, makes the thread tree narrower, allowing
deeper threads to fit on the screen.

net_inc

Type: number 
Default: 10

Operations that
expect to transfer a large amount of data over the network
will update their progress every $net_inc kilobytes. If set
to 0, no progress messages will be displayed.

See also
$read_inc, $write_inc and $net_inc.

new_mail_command

Type: path 
Default: &ldquo;&rdquo;

If set,
Mutt will call this command after a new message is received.
See the $status_format documentation for the values that can
be formatted into this command.

pager

Type: path

Default:
&ldquo;builtin&rdquo;

This variable
specifies which pager you would like to use to view
messages. The value &ldquo;builtin&rdquo; means to use the
built-in pager, otherwise this variable should specify the
pathname of the external pager you would like to use.

The string may
contain a &ldquo;%s&rdquo;, which will be substituted with
the generated message filename. Mutt will add quotes around
the string substituted for &ldquo;%s&rdquo; automatically
according to shell quoting rules, so you should avoid adding
your own. If no &ldquo;%s&rdquo; is found in the string,
Mutt will append the message filename to the end of the
string.

Using an
external pager may have some disadvantages: Additional
keystrokes are necessary because you can&rsquo;t call mutt
functions directly from the pager, and screen resizes cause
lines longer than the screen width to be badly formatted in
the help menu.

When using an
external pager, also see $prompt_after which defaults
set.

pager_context

Type: number 
Default: 0

This variable
controls the number of lines of context that are given when
displaying the next or previous page in the internal pager.
By default, Mutt will display the line after the last one on
the screen at the top of the next page (0 lines of
context).

This variable
also specifies the amount of context given for search
results. If positive, this many lines will be given before a
match, if 0, the match will be top-aligned.

pager_format

Type: string 
Default: &ldquo;-%Z- %C/%m: %-20.20n %s%* -- (%P)&rdquo;

This variable
controls the format of the one-line message
&ldquo;status&rdquo; displayed before each message in either
the internal or an external pager. The valid sequences are
listed in the $index_format section.

pager_index_lines

Type: number 
Default: 0

Determines the
number of lines of a mini-index which is shown when in the
pager. The current message, unless near the top or bottom of
the folder, will be roughly one third of the way down this
mini-index, giving the reader the context of a few messages
before and after the message. This is useful, for example,
to determine how many messages remain to be read in the
current thread. One of the lines is reserved for the status
bar from the index, so a setting of 6 will only show 5 lines
of the actual index. A value of 0 results in no index being
shown. If the number of messages in the current folder is
less than $pager_index_lines, then the index will only use
as many lines as it needs.

pager_skip_quoted_context

Type: number 
Default: 0

Determines the
number of lines of context to show before the unquoted text
when using . When set to a
positive number at most that many lines of the previous
quote are displayed. If the previous quote is shorter the
whole quote is displayed.

pager_stop

Type: boolean 
Default: no

When
set, the internal-pager will not move to the
next message when you are at the end of a message and invoke
the  function.

pattern_format

Type: string 
Default: &ldquo;%2n %-15e %d&rdquo;

This variable
describes the format of the &ldquo;pattern completion&rdquo;
menu. The following printf(3)-style sequences are
understood:

%d

pattern description

%e

pattern expression

%n

index number

pgp_auto_decode

Type: boolean 
Default: no

If set,
mutt will automatically attempt to decrypt traditional PGP
messages whenever the user performs an operation which
ordinarily would result in the contents of the message being
operated on. For example, if the user displays a
pgp-traditional message which has not been manually checked
with the  function, mutt
will automatically check the message for traditional
pgp.

pgp_autoinline

Type: boolean 
Default: no

This option
controls whether Mutt generates old-style inline
(traditional) PGP encrypted or signed messages under certain
circumstances. This can be overridden by use of the pgp
menu, when inline is not required. The GPGME backend does
not support this option.

Note that Mutt
might automatically use PGP/MIME for messages which consist
of more than a single MIME part. Mutt can be configured to
ask before sending PGP/MIME messages when inline
(traditional) would not work.

Also see the
$pgp_mime_auto variable.

Also note that
using the old-style PGP message format is strongly
deprecated. (PGP only)

pgp_check_exit

Type: boolean 
Default: yes

If set,
mutt will check the exit code of the PGP subprocess when
signing or encrypting. A non-zero exit code means that the
subprocess failed. (PGP only)

pgp_check_gpg_decrypt_status_fd

Type: boolean 
Default: yes

If set,
mutt will check the status file descriptor output of
$pgp_decrypt_command and $pgp_decode_command for GnuPG
status codes indicating successful decryption. This will
check for the presence of DECRYPTION_OKAY, absence of
DECRYPTION_FAILED, and that all PLAINTEXT occurs between the
BEGIN_DECRYPTION and END_DECRYPTION status codes.

If
unset, mutt will instead match the status fd output
against $pgp_decryption_okay. (PGP only)

pgp_clearsign_command

Type: string 
Default: &ldquo;&rdquo;

This format is
used to create an old-style &ldquo;clearsigned&rdquo; PGP
message. Note that the use of this format is strongly
deprecated.

This is a
format string, see the $pgp_decode_command command for
possible printf(3)-like sequences. (PGP only)

pgp_decode_command

Type: string 
Default: &ldquo;&rdquo;

This format
strings specifies a command which is used to decode
application/pgp attachments.

The PGP command
formats have their own set of printf(3)-like
sequences:

%p

Expands to PGPPASSFD=0 when a pass phrase is needed, to
an empty string otherwise. Note: This may be used with a %?
construct. 

%f

Expands to the name of a file containing a message.

%s

Expands to the name of a file containing the signature
part 

of a multipart/signed
attachment when verifying it.

%a

The value of $pgp_sign_as if
set, otherwise the value of $pgp_default_key.

%r

One or more key IDs (or fingerprints if available).

For examples on
how to configure these formats for the various versions of
PGP which are floating around, see the pgp and gpg sample
configuration files in the samples/ subdirectory
which has been installed on your system alongside the
documentation. (PGP only)

pgp_decrypt_command

Type: string 
Default: &ldquo;&rdquo;

This command is
used to decrypt a PGP encrypted message.

This is a
format string, see the $pgp_decode_command command for
possible printf(3)-like sequences. (PGP only)

pgp_decryption_okay

Type: regular expression 
Default: &ldquo;&rdquo;

If you assign
text to this variable, then an encrypted PGP message is only
considered successfully decrypted if the output from
$pgp_decrypt_command contains the text. This is used to
protect against a spoofed encrypted message, with
multipart/encrypted headers but containing a block that is
not actually encrypted. (e.g. simply signed and ascii
armored text).

Note that if
$pgp_check_gpg_decrypt_status_fd is set, this variable is
ignored. (PGP only)

pgp_default_key

Type: string 
Default: &ldquo;&rdquo;

This is the
default key-pair to use for PGP operations. It will be used
for encryption (see $postpone_encrypt and
$pgp_self_encrypt).

It will also be
used for signing unless $pgp_sign_as is set.

The (now
deprecated) pgp_self_encrypt_as is an alias for this
variable, and should no longer be used. (PGP only)

pgp_encrypt_only_command

Type: string 
Default: &ldquo;&rdquo;

This command is
used to encrypt a body part without signing it.

This is a
format string, see the $pgp_decode_command command for
possible printf(3)-like sequences. (PGP only)

pgp_encrypt_sign_command

Type: string 
Default: &ldquo;&rdquo;

This command is
used to both sign and encrypt a body part.

This is a
format string, see the $pgp_decode_command command for
possible printf(3)-like sequences. (PGP only)

pgp_entry_format

Type: string 
Default: &ldquo;%4n %t%f %4l/0x%k %-4a %2c %u&rdquo;

This variable
allows you to customize the PGP key selection menu to your
personal taste. This string is similar to $index_format, but
has its own set of printf(3)-like sequences:

%n

number

%k

key id

%u

user id

%a

algorithm

%l

key length

%f

flags

%c

capabilities

%t

trust/validity of the key-uid association

%[]

date of the key where  is an strftime(3)
expression 

(PGP only)

pgp_export_command

Type: string 
Default: &ldquo;&rdquo;

This command is
used to export a public key from the user&rsquo;s key
ring.

This is a
format string, see the $pgp_decode_command command for
possible printf(3)-like sequences. (PGP only)

pgp_getkeys_command

Type: string 
Default: &ldquo;&rdquo;

This command is
invoked whenever Mutt needs to fetch the public key
associated with an email address. Of the sequences supported
by $pgp_decode_command, %r is the only printf(3)-like
sequence used with this format. Note that in this case, %r
expands to the email address, not the public key ID (the key
ID is unknown, which is why Mutt is invoking this command).
(PGP only)

pgp_good_sign

Type: regular expression 
Default: &ldquo;&rdquo;

If you assign a
text to this variable, then a PGP signature is only
considered verified if the output from $pgp_verify_command
contains the text. Use this variable if the exit code from
the command is 0 even for bad signatures. (PGP only)

pgp_ignore_subkeys

Type: boolean 
Default: yes

Setting this
variable will cause Mutt to ignore OpenPGP subkeys. Instead,
the principal key will inherit the subkeys&rsquo;
capabilities. Unset this if you want to play
interesting key selection games. (PGP only)

pgp_import_command

Type: string 
Default: &ldquo;&rdquo;

This command is
used to import a key from a message into the user&rsquo;s
public key ring.

This is a
format string, see the $pgp_decode_command command for
possible printf(3)-like sequences. (PGP only)

pgp_list_pubring_command

Type: string 
Default: &ldquo;&rdquo;

This command is
used to list the public key ring&rsquo;s contents. The
output format must be analogous to the one used by

gpg --list-keys
--with-colons --with-fingerprint

This format is
also generated by the mutt_pgpring utility which
comes with mutt.

Note:
gpg&rsquo;s fixed-list-mode option should not be
used. It produces a different date format which may result
in mutt showing incorrect key generation dates.

This is a
format string, see the $pgp_decode_command command for
possible printf(3)-like sequences. Note that in this
case, %r expands to the search string, which is a list of
one or more quoted values such as email address, name, or
keyid. (PGP only)

pgp_list_secring_command

Type: string 
Default: &ldquo;&rdquo;

This command is
used to list the secret key ring&rsquo;s contents. The
output format must be analogous to the one used by:

gpg --list-keys
--with-colons --with-fingerprint

This format is
also generated by the mutt_pgpring utility which
comes with mutt.

Note:
gpg&rsquo;s fixed-list-mode option should not be
used. It produces a different date format which may result
in mutt showing incorrect key generation dates.

This is a
format string, see the $pgp_decode_command command for
possible printf(3)-like sequences. Note that in this
case, %r expands to the search string, which is a list of
one or more quoted values such as email address, name, or
keyid. (PGP only)

pgp_long_ids

Type: boolean 
Default: yes

If set,
use 64 bit PGP key IDs, if unset use the normal 32
bit key IDs. NOTE: Internally, Mutt has transitioned to
using fingerprints (or long key IDs as a fallback). This
option now only controls the display of key IDs in the key
selection menu and a few other places. (PGP only)

pgp_mime_auto

Type: quadoption 
Default: ask-yes

This option
controls whether Mutt will prompt you for automatically
sending a (signed/encrypted) message using PGP/MIME when
inline (traditional) fails (for any reason).

Also note that
using the old-style PGP message format is strongly
deprecated. (PGP only)

pgp_replyinline

Type: boolean 
Default: no

Setting this
variable will cause Mutt to always attempt to create an
inline (traditional) message when replying to a message
which is PGP encrypted/signed inline. This can be overridden
by use of the pgp menu, when inline is not required. This
option does not automatically detect if the (replied-to)
message is inline; instead it relies on Mutt internals for
previously checked/flagged messages.

Note that Mutt
might automatically use PGP/MIME for messages which consist
of more than a single MIME part. Mutt can be configured to
ask before sending PGP/MIME messages when inline
(traditional) would not work.

Also see the
$pgp_mime_auto variable.

Also note that
using the old-style PGP message format is strongly
deprecated. (PGP only)

pgp_retainable_sigs

Type: boolean 
Default: no

If set,
signed and encrypted messages will consist of nested
multipart/signed and multipart/encrypted body
parts.

This is useful
for applications like encrypted and signed mailing lists,
where the outer layer (multipart/encrypted) can be
easily removed, while the inner multipart/signed part
is retained. (PGP only)

pgp_self_encrypt

Type: boolean 
Default: yes

When
set, PGP encrypted messages will also be encrypted
using the key in $pgp_default_key. (PGP only)

pgp_show_unusable

Type: boolean 
Default: yes

If set,
mutt will display non-usable keys on the PGP key selection
menu. This includes keys which have been revoked, have
expired, or have been marked as &ldquo;disabled&rdquo; by
the user. (PGP only)

pgp_sign_as

Type: string 
Default: &ldquo;&rdquo;

If you have a
different key pair to use for signing, you should set this
to the signing key. Most people will only need to set
$pgp_default_key. It is recommended that you use the keyid
form to specify your key (e.g. 0x00112233). (PGP
only)

pgp_sign_command

Type: string 
Default: &ldquo;&rdquo;

This command is
used to create the detached PGP signature for a
multipart/signed PGP/MIME body part.

This is a
format string, see the $pgp_decode_command command for
possible printf(3)-like sequences. (PGP only)

pgp_sort_keys

Type: sort order 
Default: address

Specifies how
the entries in the pgp menu are sorted. The following are
legal values: 
address

sort alphabetically by user
id

keyid

sort alphabetically by key id

date

sort by key creation date

trust

sort by the trust of the key

If you prefer
reverse order of the above values, prefix it with
&ldquo;reverse-&rdquo;. (PGP only)

pgp_strict_enc

Type: boolean 
Default: yes

If set,
Mutt will automatically encode PGP/MIME signed messages as
quoted-printable. Please note that unsetting this variable
may lead to problems with non-verifyable PGP signatures, so
only change this if you know what you are doing. (PGP
only)

pgp_timeout

Type: number (long) 
Default: 300

The number of
seconds after which a cached passphrase will expire if not
used. (PGP only)

pgp_use_gpg_agent

Type: boolean 
Default: yes

If set,
mutt expects a gpg-agent(1) process will handle
private key passphrase prompts. If unset, mutt will
prompt for the passphrase and pass it via stdin to the pgp
command.

Note that as of
version 2.1, GnuPG automatically spawns an agent and
requires the agent be used for passphrase management. Since
that version is increasingly prevalent, this variable now
defaults set.

Mutt works with
a GUI or curses pinentry program. A TTY pinentry should not
be used.

If you are
using an older version of GnuPG without an agent running, or
another encryption program without an agent, you will need
to unset this variable. (PGP only)

pgp_verify_command

Type: string 
Default: &ldquo;&rdquo;

This command is
used to verify PGP signatures.

This is a
format string, see the $pgp_decode_command command for
possible printf(3)-like sequences. (PGP only)

pgp_verify_key_command

Type: string 
Default: &ldquo;&rdquo;

This command is
used to verify key information from the key selection
menu.

This is a
format string, see the $pgp_decode_command command for
possible printf(3)-like sequences. (PGP only)

pipe_decode

Type: boolean 
Default: no

Used in
connection with the  function.
When unset, Mutt will pipe the messages without any
preprocessing. When set, Mutt will attempt to decode
the messages first.

Also see
$pipe_decode_weed, which controls whether headers will be
weeded when this is set.

pipe_decode_weed

Type: boolean 
Default: yes

For
, when $pipe_decode is set, this
further controls whether Mutt will weed headers.

pipe_sep

Type: string 
Default: &ldquo;\n&rdquo;

The separator
to add between messages when piping a list of tagged
messages to an external Unix command.

pipe_split

Type: boolean 
Default: no

Used in
connection with the  function
following . If this variable is
unset, when piping a list of tagged messages Mutt
will concatenate the messages and will pipe them all
concatenated. When set, Mutt will pipe the messages
one by one. In both cases the messages are piped in the
current sorted order, and the $pipe_sep separator is added
after each message.

pop_auth_try_all

Type: boolean 
Default: yes

If set,
Mutt will try all available authentication methods. When
unset, Mutt will only fall back to other
authentication methods if the previous methods are
unavailable. If a method is available but authentication
fails, Mutt will not connect to the POP server.

pop_authenticators

Type: string 
Default: &ldquo;&rdquo;

This is a
colon-delimited list of authentication methods mutt may
attempt to use to log in to an POP server, in the order mutt
should try them. Authentication methods are either
&ldquo;user&rdquo;, &ldquo;apop&rdquo; or any SASL
mechanism, e.g. &ldquo;digest-md5&rdquo;,
&ldquo;gssapi&rdquo; or &ldquo;cram-md5&rdquo;. This option
is case-insensitive. If this option is unset (the
default) mutt will try all available methods, in order from
most-secure to least-secure.

Example:

set
pop_authenticators=&rdquo;digest-md5:apop:user&rdquo;

pop_checkinterval

Type: number 
Default: 60

This variable
configures how often (in seconds) mutt should look for new
mail in the currently selected mailbox if it is a POP
mailbox.

pop_delete

Type: quadoption 
Default: ask-no

If set,
Mutt will delete successfully downloaded messages from the
POP server when using the 
function. When unset, Mutt will download messages but
also leave them on the POP server.

pop_host

Type: string 
Default: &ldquo;&rdquo;

The name of
your POP server for the  function.
You can also specify an alternative port, username and
password, i.e.:

[pop[s]://][username[:password]@]popserver[:port]

where
&ldquo;[...]&rdquo; denotes an optional part.

pop_last

Type: boolean 
Default: no

If this
variable is set, mutt will try to use the
&ldquo;LAST&rdquo; POP command for retrieving only
unread messages from the POP server when using the
 function.

pop_oauth_refresh_command

Type: string 
Default: &ldquo;&rdquo;

The command to
run to generate an OAUTH refresh token for authorizing your
connection to your POP server. This command will be run on
every connection attempt that uses the OAUTHBEARER
authentication mechanism. See &ldquo;oauth&rdquo; for
details.

pop_pass

Type: string 
Default: &ldquo;&rdquo;

Specifies the
password for your POP account. If unset, Mutt will
prompt you for your password when you open a POP
mailbox.

Warning:
you should only use this option when you are on a fairly
secure machine, because the superuser can read your muttrc
even if you are the only one who can read the file.

pop_reconnect

Type: quadoption 
Default: ask-yes

Controls
whether or not Mutt will try to reconnect to the POP server
if the connection is lost.

pop_user

Type: string 
Default: &ldquo;&rdquo;

Your login name
on the POP server.

This variable
defaults to your user name on the local machine.

post_indent_string

Type: string 
Default: &ldquo;&rdquo;

Similar to the
$attribution variable, Mutt will append this string after
the inclusion of a message which is being replied to. For a
full listing of defined printf(3)-like sequences see
the section on $index_format.

postpone

Type: quadoption 
Default: ask-yes

Controls
whether or not messages are saved in the $postponed mailbox
when you elect not to send immediately.

Also see the
$recall variable.

postponed

Type: path 
Default: &ldquo;~/postponed&rdquo;

Mutt allows you
to indefinitely &ldquo;postpone sending a message&rdquo;
which you are editing. When you choose to postpone a
message, Mutt saves it in the mailbox specified by this
variable.

Also see the
$postpone variable.

postpone_encrypt

Type: boolean 
Default: no

When
set, postponed messages that are marked for
encryption will be self-encrypted. Mutt will first try to
encrypt using the value specified in $pgp_default_key or
$smime_default_key. If those are not set, it will try the
deprecated $postpone_encrypt_as. (Crypto only)

postpone_encrypt_as

Type: string 
Default: &ldquo;&rdquo;

This is a
deprecated fall-back variable for $postpone_encrypt. Please
use $pgp_default_key or $smime_default_key. (Crypto
only)

preconnect

Type: string 
Default: &ldquo;&rdquo;

If set,
a shell command to be executed if mutt fails to establish a
connection to the server. This is useful for setting up
secure connections, e.g. with ssh(1). If the command
returns a nonzero status, mutt gives up opening the server.
Example:

set
preconnect=&rdquo;ssh -f -q -L 1234:mailhost.net:143
mailhost.net \ 
sleep 20  /dev/null&rdquo;

Mailbox
&ldquo;foo&rdquo; on &ldquo;mailhost.net&rdquo; can now be
reached as &ldquo;{localhost:1234}foo&rdquo;.

Note: For this
example to work, you must be able to log in to the remote
machine without having to enter a password.

print

Type: quadoption

Default: ask-no

Controls
whether or not Mutt really prints messages. This is set to
&ldquo;ask-no&rdquo; by default, because some people
accidentally hit &ldquo;p&rdquo; often.

print_command

Type: path 
Default: &ldquo;lpr&rdquo;

This specifies
the command pipe that should be used to print messages.

print_decode

Type: boolean 
Default: yes

Used in
connection with the  function.
If this option is set, the message is decoded before
it is passed to the external command specified by
$print_command. If this option is unset, no
processing will be applied to the message when printing it.
The latter setting may be useful if you are using some
advanced printer filter which is able to properly format
e-mail messages for printing.

Also see
$print_decode_weed, which controls whether headers will be
weeded when this is set.

print_decode_weed

Type: boolean 
Default: yes

For
, when $print_decode is set,
this further controls whether Mutt will weed headers.

print_split

Type: boolean 
Default: no

Used in
connection with the  function.
If this option is set, the command specified by
$print_command is executed once for each message which is to
be printed. If this option is unset, the command
specified by $print_command is executed only once, and all
the messages are concatenated, with a form feed as the
message separator.

Those who use
the enscript(1) program&rsquo;s mail-printing mode
will most likely want to set this option.

prompt_after

Type: boolean 
Default: yes

If you use an
external $pager, setting this variable will cause
Mutt to prompt you for a command when the pager exits rather
than returning to the index menu. If unset, Mutt will
return to the index menu when the external pager exits.

query_command

Type: path 
Default: &ldquo;&rdquo;

This specifies
the command Mutt will use to make external address queries.
The string may contain a &ldquo;%s&rdquo;, which will be
substituted with the query string the user types. Mutt will
add quotes around the string substituted for
&ldquo;%s&rdquo; automatically according to shell quoting
rules, so you should avoid adding your own. If no
&ldquo;%s&rdquo; is found in the string, Mutt will append
the user&rsquo;s query to the end of the string. See
&ldquo;query&rdquo; for more information.

query_format

Type: string 
Default: &ldquo;%4c %t %-25.25a %-25.25n
%?e?(%e)?&rdquo;

This variable
describes the format of the &ldquo;query&rdquo; menu. The
following printf(3)-style sequences are
understood:

%a

destination address

%c

current entry number

%e

extra information *

%n

destination name

%t

&ldquo;*&rdquo; if current entry is tagged, a space
otherwise 

%>X

right justify the rest of the string and pad with
&ldquo;X&rdquo; 

%|X

pad to the end of the line with &ldquo;X&rdquo;

%*X

soft-fill with character &ldquo;X&rdquo; as pad

For an
explanation of &ldquo;soft-fill&rdquo;, see the
$index_format documentation.

* = can be
optionally printed if nonzero, see the $status_format
documentation.

quit

Type: quadoption

Default: yes

This variable
controls whether &ldquo;quit&rdquo; and &ldquo;exit&rdquo;
actually quit from mutt. If this option is set, they
do quit, if it is unset, they have no effect, and if
it is set to ask-yes or ask-no, you are
prompted for confirmation when you try to quit.

quote_regexp

Type: regular expression 
Default: &ldquo;^([ \t]*[|>:}#])+&rdquo;

A regular
expression used in the internal pager to determine quoted
sections of text in the body of a message. Quoted text may
be filtered out using the 
command, or colored according to the &ldquo;color
quoted&rdquo; family of directives.

Higher levels
of quoting may be colored differently (&ldquo;color
quoted1&rdquo;, &ldquo;color quoted2&rdquo;, etc.). The
quoting level is determined by removing the last character
from the matched text and recursively reapplying the regular
expression until it fails to produce a match.

Match detection
may be overridden by the $smileys regular expression.

read_inc

Type: number 
Default: 10

If set to a
value greater than 0, Mutt will display which message it is
currently on when reading a mailbox or when performing
search actions such as search and limit. The message is
printed after this many messages have been read or searched
(e.g., if set to 25, Mutt will print a message when it is at
message 25, and then again when it gets to message 50). This
variable is meant to indicate progress when reading or
searching large mailboxes which may take some time. When set
to 0, only a single message will appear before the reading
the mailbox.

Also see the
$write_inc, $net_inc and $time_inc variables and the
&ldquo;tuning&rdquo; section of the manual for performance
considerations.

read_only

Type: boolean 
Default: no

If set,
all folders are opened in read-only mode.

realname

Type: string 
Default: &ldquo;&rdquo;

This variable
specifies what &ldquo;real&rdquo; or &ldquo;personal&rdquo;
name should be used when sending messages.

By default,
this is the GECOS field from /etc/passwd. Note that
this variable will not be used when the user has set
a real name in the $from variable.

recall

Type: quadoption

Default: ask-yes

Controls
whether or not Mutt recalls postponed messages when
composing a new message.

Setting this
variable to yes is not generally useful, and thus not
recommended. Note that the 
function can be used to manually recall postponed
messages.

Also see
$postponed variable.

record

Type: path

Default:
&ldquo;~/sent&rdquo;

This specifies
the file into which your outgoing messages should be
appended. (This is meant as the primary method for saving a
copy of your messages, but another way to do this is using
the &ldquo;my_hdr&rdquo; command to create a
&ldquo;Bcc:&rdquo; field with your email address in it.)

The value of
$record is overridden by the $force_name and
$save_name variables, and the &ldquo;fcc-hook&rdquo;
command. Also see $copy and $write_bcc.

Multiple
mailboxes may be specified if $fcc_delimiter is set to a
string delimiter.

reflow_space_quotes

Type: boolean 
Default: yes

This option
controls how quotes from format=flowed messages are
displayed in the pager and when replying (with $text_flowed
unset). When set, this option adds spaces after each
level of quote marks, turning &rdquo;>>>foo&rdquo;
into &rdquo;> > > foo&rdquo;.

Note: If
$reflow_text is unset, this option has no effect.
Also, this option does not affect replies when $text_flowed
is set.

reflow_text

Type: boolean 
Default: yes

When
set, Mutt will reformat paragraphs in text/plain
parts marked format=flowed. If unset, Mutt will
display paragraphs unaltered from how they appear in the
message body. See RFC3676 for details on the
format=flowed format.

Also see
$reflow_wrap, and $wrap.

reflow_wrap

Type: number 
Default: 78

This variable
controls the maximum paragraph width when reformatting
text/plain parts when $reflow_text is set. When the
value is 0, paragraphs will be wrapped at the
terminal&rsquo;s right margin. A positive value sets the
paragraph width relative to the left margin. A negative
value set the paragraph width relative to the right
margin.

Also see
$wrap.

reply_regexp

Type: regular expression
(localized) 
Default: &ldquo;^(re)(\[[0-9]+\])*:[ \t]*&rdquo;

A regular
expression used to recognize reply messages when threading
and replying. The default value corresponds to the standard
Latin &rdquo;Re:&rdquo; prefix.

This value may
have been localized by the translator for your locale,
adding other prefixes that are common in the locale. You can
add your own prefixes by appending inside
&rdquo;^(re)&rdquo;. For example:
&rdquo;^(re|se)&rdquo; or
&rdquo;^(re|aw|se)&rdquo;.

The second
parenthesized expression matches zero or more bracketed
numbers following the prefix, such as &rdquo;Re[1]:
&rdquo;. The initial &rdquo;\\[&rdquo; means a
literal left-bracket character. Note the backslash must be
doubled when used inside a double quoted string in the
muttrc. &rdquo;[0-9]+&rdquo; means one or more
numbers. &rdquo;\\]&rdquo; means a literal
right-bracket. Finally the whole parenthesized expression
has a &rdquo;*&rdquo; suffix, meaning it can occur
zero or more times.

The last part
matches a colon followed by an optional space or tab. Note
&rdquo;\t&rdquo; is converted to a literal tab inside
a double quoted string. If you use a single quoted string,
you would have to type an actual tab character, and would
need to convert the double-backslashes to single
backslashes.

Note: the
result of this regexp match against the subject is stored in
the header cache. Mutt isn&rsquo;t smart enough to
invalidate a header cache entry based on changing
$reply_regexp, so if you aren&rsquo;t seeing correct values
in the index, try temporarily turning off the header cache.
If that fixes the problem, then once the variable is set to
your liking, remove your stale header cache files and turn
the header cache back on.

reply_self

Type: boolean 
Default: no

If unset
and you are replying to a message sent by you, Mutt will
assume that you want to reply to the recipients of that
message rather than to yourself.

Also see the
&ldquo;alternates&rdquo; command.

reply_to

Type: quadoption 
Default: ask-yes

If set,
when replying to a message, Mutt will use the address listed
in the Reply-to: header as the recipient of the reply. If
unset, it will use the address in the From: header
field instead. This option is useful for reading a mailing
list that sets the Reply-To: header field to the list
address and you want to send a private message to the author
of a message.

resolve

Type: boolean 
Default: yes

When
set, the cursor will be automatically advanced to the
next (possibly undeleted) message whenever a command that
modifies the current message is executed.

resume_draft_files

Type: boolean 
Default: no

If set,
draft files (specified by -H on the command line) are
processed similarly to when resuming a postponed message.
Recipients are not prompted for; send-hooks are not
evaluated; no alias expansion takes place; user-defined
headers and signatures are not added to the message.

resume_edited_draft_files

Type: boolean 
Default: yes

If set,
draft files previously edited (via -E -H on the
command line) will have $resume_draft_files automatically
set when they are used as a draft file again.

The first time
a draft file is saved, mutt will add a header,
X-Mutt-Resume-Draft to the saved file. The next time the
draft file is read in, if mutt sees the header, it will set
$resume_draft_files.

This option is
designed to prevent multiple signatures, user-defined
headers, and other processing effects from being made
multiple times to the draft file.

reverse_alias

Type: boolean 
Default: no

This variable
controls whether or not Mutt will display the
&ldquo;personal&rdquo; name from your aliases in the index
menu if it finds an alias that matches the message&rsquo;s
sender. For example, if you have the following alias:

alias juser
abd30425 [AT] somewhere.net (Joe User)

and then you
receive mail which contains the following header:

From:
abd30425 [AT] somewhere.net

It would be
displayed in the index menu as &ldquo;Joe User&rdquo;
instead of &ldquo;abd30425 [AT] somewhere.net.&rdquo; This is
useful when the person&rsquo;s e-mail address is not human
friendly.

reverse_name

Type: boolean 
Default: no

It may
sometimes arrive that you receive mail to a certain machine,
move the messages to another machine, and reply to some the
messages from there. If this variable is set, the
default From: line of the reply messages is built
using the address where you received the messages you are
replying to if that address matches your
&ldquo;alternates&rdquo;. If the variable is unset,
or the address that would be used doesn&rsquo;t match your
&ldquo;alternates&rdquo;, the From: line will use
your address on the current machine.

Also see the
&ldquo;alternates&rdquo; command and $reverse_realname.

reverse_realname

Type: boolean 
Default: yes

This variable
fine-tunes the behavior of the $reverse_name feature.

When it is
unset, Mutt will remove the real name part of a
matching address. This allows the use of the email address
without having to also use what the sender put in the real
name field.

When it is
set, Mutt will use the matching address as-is.

In either case,
a missing real name will be filled in afterwards using the
value of $realname.

rfc2047_parameters

Type: boolean 
Default: yes

When this
variable is set, Mutt will decode RFC2047-encoded
MIME parameters. You want to set this variable when mutt
suggests you to save attachments to files named like:

=?iso-8859-1?Q?file=5F=E4=5F991116=2Ezip?=

When this
variable is set interactively, the change won&rsquo;t
be active until you change folders.

Note that this
use of RFC2047&rsquo;s encoding is explicitly prohibited by
the standard, but nevertheless encountered in the wild.

Also note that
setting this parameter will not have the effect that
mutt generates this kind of encoding. Instead, mutt
will unconditionally use the encoding specified in
RFC2231.

save_address

Type: boolean 
Default: no

If set,
mutt will take the sender&rsquo;s full address when choosing
a default folder for saving a mail. If $save_name or
$force_name is set too, the selection of the Fcc
folder will be changed as well.

save_empty

Type: boolean 
Default: yes

When
unset, mailboxes which contain no saved messages will
be removed when closed (the exception is $spoolfile which is
never removed). If set, mailboxes are never
removed.

Note:
This only applies to mbox and MMDF folders, Mutt does not
delete MH and Maildir directories.

save_history

Type: number 
Default: 0

This variable
controls the size of the history (per category) saved in the
$history_file file.

save_name

Type: boolean 
Default: no

This variable
controls how copies of outgoing messages are saved. When
set, a check is made to see if a mailbox specified by
the recipient address exists (this is done by searching for
a mailbox in the $folder directory with the username
part of the recipient address). If the mailbox exists, the
outgoing message will be saved to that mailbox, otherwise
the message is saved to the $record mailbox.

Also see the
$force_name variable.

score

Type: boolean

Default: yes

When this
variable is unset, scoring is turned off. This can be
useful to selectively disable scoring for certain folders
when the $score_threshold_delete variable and related are
used.

score_threshold_delete

Type: number 
Default: -1

Messages which
have been assigned a score equal to or lower than the value
of this variable are automatically marked for deletion by
mutt. Since mutt scores are always greater than or equal to
zero, the default setting of this variable will never mark a
message for deletion.

score_threshold_flag

Type: number 
Default: 9999

Messages which
have been assigned a score greater than or equal to this
variable&rsquo;s value are automatically marked
&rdquo;flagged&rdquo;.

score_threshold_read

Type: number 
Default: -1

Messages which
have been assigned a score equal to or lower than the value
of this variable are automatically marked as read by mutt.
Since mutt scores are always greater than or equal to zero,
the default setting of this variable will never mark a
message read.

search_context

Type: number 
Default: 0

For the pager,
this variable specifies the number of lines shown before
search results. By default, search results will be
top-aligned.

send_charset

Type: string 
Default: &ldquo;us-ascii:iso-8859-1:utf-8&rdquo;

A
colon-delimited list of character sets for outgoing
messages. Mutt will use the first character set into which
the text can be converted exactly. If your $charset is not
&ldquo;iso-8859-1&rdquo; and recipients may not understand
&ldquo;UTF-8&rdquo;, it is advisable to include in the list
an appropriate widely used standard character set (such as
&ldquo;iso-8859-2&rdquo;, &ldquo;koi8-r&rdquo; or
&ldquo;iso-2022-jp&rdquo;) either instead of or after
&ldquo;iso-8859-1&rdquo;.

In case the
text cannot be converted into one of these exactly, mutt
uses $charset as a fallback.

send_multipart_alternative

Type: quadoption 
Default: no

If set,
Mutt will generate a multipart/alternative container and an
alternative part using the filter script specified in
$send_multipart_alternative_filter. See the section
&ldquo;MIME Multipart/Alternative&rdquo;
(alternative-order).

Note that
enabling multipart/alternative is not compatible with inline
PGP encryption. Mutt will prompt to use PGP/MIME in that
case.

send_multipart_alternative_filter

Type: path 
Default: &ldquo;&rdquo;

This specifies
a filter script, which will convert the main (composed)
message of the email to an alternative format. The message
will be piped to the filter&rsquo;s stdin. The expected
output of the filter is the generated mime type, e.g.
text/html, followed by a blank line, and then the converted
content. See the section &ldquo;MIME
Multipart/Alternative&rdquo; (alternative-order).

sendmail

Type: path 
Default: &ldquo;/usr/sbin/sendmail -oem -oi&rdquo;

Specifies the
program and arguments used to deliver mail sent by Mutt.
Mutt expects that the specified program interprets
additional arguments as recipient addresses. Mutt appends
all recipients after adding a -- delimiter (if not
already present). Additional flags, such as for
$use_8bitmime, $use_envelope_from, $dsn_notify, or
$dsn_return will be added before the delimiter.

Note:
This command is invoked differently from most other commands
in Mutt. It is tokenized by space, and invoked directly via
execvp(3) with an array of arguments - so commands or
arguments with spaces in them are not supported. The shell
is not used to run the command, so shell quoting is also not
supported.

See
also: $write_bcc.

sendmail_wait

Type: number 
Default: 0

Specifies the
number of seconds to wait for the $sendmail process to
finish before giving up and putting delivery in the
background.

Mutt interprets
the value of this variable as follows:

>0

number of seconds to wait for sendmail to finish before
continuing 

0

wait forever for sendmail to finish

always put sendmail in the background without
waiting 

Note that if
you specify a value other than 0, the output of the child
process will be put in a temporary file. If there is some
error, you will be informed as to where to find the
output.

shell

Type: path

Default: &ldquo;&rdquo;

Command to use
when spawning a subshell. By default, the user&rsquo;s login
shell from /etc/passwd is used.

sidebar_delim_chars

Type: string 
Default: &ldquo;/.&rdquo;

This contains
the list of characters which you would like to treat as
folder separators for displaying paths in the sidebar.

Local mail is
often arranged in directories:
&rsquo;dir1/dir2/mailbox&rsquo;.

set
sidebar_delim_chars=&rsquo;/&rsquo;

IMAP mailboxes
are often named: &rsquo;folder1.folder2.mailbox&rsquo;.

set
sidebar_delim_chars=&rsquo;.&rsquo;

See
also: $sidebar_short_path, $sidebar_folder_indent,
$sidebar_indent_string.

sidebar_divider_char

Type: string 
Default: &ldquo;|&rdquo;

This specifies
the characters to be drawn between the sidebar (when
visible) and the other Mutt panels. ASCII and Unicode
line-drawing characters are supported.

sidebar_folder_indent

Type: boolean 
Default: no

Set this to
indent mailboxes in the sidebar.

See
also: $sidebar_short_path, $sidebar_indent_string,
$sidebar_delim_chars.

sidebar_format

Type: string 
Default: &ldquo;%B%* %n&rdquo;

This variable
allows you to customize the sidebar display. This string is
similar to $index_format, but has its own set of
printf(3)-like sequences:

%B

Name of the mailbox

%S

* Size of mailbox (total number of messages)

%N

* Number of unread messages in the mailbox

%n

N if mailbox has new mail, blank otherwise

%F

* Number of Flagged messages in the mailbox

%!

&ldquo;!&rdquo; : one flagged message; &ldquo;!!&rdquo;
: two flagged messages; &ldquo;n!&rdquo; : n flagged
messages (for n > 2). Otherwise prints nothing.

%d

* @ Number of deleted messages

%L

* @ Number of messages after limiting

%t

* @ Number of tagged messages

%>X

right justify the rest of the string and pad with
&ldquo;X&rdquo; 

%|X

pad to the end of the line with &ldquo;X&rdquo;

%*X

soft-fill with character &ldquo;X&rdquo; as pad

* = Can be
optionally printed if nonzero @ = Only applicable to the
current folder

In order to use
%S, %N, %F, and %!, $mail_check_stats must be set.
When thus set, a suggested value for this option is
&rdquo;%B%?F? [%F]?%* %?N?%N/?%S&rdquo;.

sidebar_indent_string

Type: string 
Default: &ldquo; &rdquo;

This specifies
the string that is used to indent mailboxes in the sidebar.
It defaults to two spaces.

See
also: $sidebar_short_path, $sidebar_folder_indent,
$sidebar_delim_chars.

sidebar_new_mail_only

Type: boolean 
Default: no

When set, the
sidebar will only display mailboxes containing new, or
flagged, mail.

See
also: sidebar_whitelist.

sidebar_next_new_wrap

Type: boolean 
Default: no

When set, the
 command will not stop and
the end of the list of mailboxes, but wrap around to the
beginning. The  command is
similarly affected, wrapping around to the end of the
list.

sidebar_relative_shortpath_indent

Type: boolean 
Default: no

When set, this
option changes how $sidebar_short_path and
$sidebar_folder_indent perform shortening and indentation:
both will look at the previous sidebar entries and
shorten/indent relative to the most recent parent.

An example of
this option set/unset for mailboxes listed in this order,
with $sidebar_short_path=yes, $sidebar_folder_indent=yes,
and $sidebar_indent_string=&rdquo;&rarr;&rdquo;: 
mailbox

set unset

=a.b

=a.b &rarr;b

=a.b.c.d

&rarr;c.d
&rarr;&rarr;&rarr;d

=a.b.e

&rarr;e &rarr;&rarr;e

The second line
illustrates most clearly. With this option set,
=a.b.c.d is shortened relative to =a.b,
becoming c.d; it is also indented one place relative
to =a.b. With this option unset =a.b.c.d is
always shortened to the last part of the mailbox, d
and is indented three places, with respect to $folder
(represented by &rsquo;=&rsquo;).

When set, the
third line will also be indented and shortened relative to
the first line.

sidebar_short_path

Type: boolean 
Default: no

By default the
sidebar will show the mailbox&rsquo;s path, relative to the
$folder variable. Setting sidebar_shortpath=yes will
shorten the names relative to the previous name.
Here&rsquo;s an example: 
shortpath=no

shortpath=yes shortpath=yes,
folderindent=yes, indentstr=&rdquo;..&rdquo;

fruit

fruit fruit

fruit.apple

apple ..apple

fruit.banana

banana ..banana

fruit.cherry

cherry ..cherry

See
also: $sidebar_delim_chars, $sidebar_folder_indent,
$sidebar_indent_string.

sidebar_sort_method

Type: sort order 
Default: unsorted

Specifies how
to sort mailbox entries in the sidebar. By default, the
entries are sorted alphabetically. Valid values: 
- alpha (alphabetically) 
- count (all message count) 
- flagged (flagged message count) 
- name (alphabetically) 
- new (unread message count) 
- path (alphabetically) 
- unread (unread message count) 
- unsorted

You may
optionally use the &ldquo;reverse-&rdquo; prefix to specify
reverse sorting order (example: &ldquo;set
sidebar_sort_method=reverse-alpha&rdquo;).

sidebar_use_mailbox_shortcuts

Type: boolean 
Default: no

When set,
sidebar mailboxes will be displayed with mailbox shortcut
prefixes &rdquo;=&rdquo; or &rdquo;~&rdquo;.

When unset, the
sidebar will trim off a matching $folder prefix but
otherwise not use mailbox shortcuts.

sidebar_visible

Type: boolean 
Default: no

This specifies
whether or not to show sidebar. The sidebar shows a list of
all your mailboxes.

See
also: $sidebar_format, $sidebar_width

sidebar_width

Type: number 
Default: 30

This controls
the width of the sidebar. It is measured in screen columns.
For example: sidebar_width=20 could display 20 ASCII
characters, or 10 Chinese characters.

sig_dashes

Type: boolean 
Default: yes

If set,
a line containing &ldquo;-- &rdquo; (note the trailing
space) will be inserted before your $signature. It is
strongly recommended that you not unset this
variable unless your signature contains just your name. The
reason for this is because many software packages use
&ldquo;-- \n&rdquo; to detect your signature. For example,
Mutt has the ability to highlight the signature in a
different color in the built-in pager.

sig_on_top

Type: boolean 
Default: no

If set,
the signature will be included before any quoted or
forwarded text. It is strongly recommended that you
do not set this variable unless you really know what you are
doing, and are prepared to take some heat from netiquette
guardians.

signature

Type: path 
Default: &ldquo;~/.signature&rdquo;

Specifies the
filename of your signature, which is appended to all
outgoing messages. If the filename ends with a pipe
(&ldquo;|&rdquo;), it is assumed that filename is a shell
command and input should be read from its standard
output.

simple_search

Type: string 
Default: &ldquo;~f %s | ~s %s&rdquo;

Specifies how
Mutt should expand a simple search into a real search
pattern. A simple search is one that does not contain any of
the &ldquo;~&rdquo; pattern modifiers. See
&ldquo;patterns&rdquo; for more information on search
patterns.

For example, if
you simply type &ldquo;joe&rdquo; at a search or limit
prompt, Mutt will automatically expand it to the value
specified by this variable by replacing &ldquo;%s&rdquo;
with the supplied string. For the default value,
&ldquo;joe&rdquo; would be expanded to: &ldquo;~f joe | ~s
joe&rdquo;.

size_show_bytes

Type: boolean 
Default: no

If set,
message sizes will display bytes for values less than 1
kilobyte. See formatstrings-size.

size_show_fractions

Type: boolean 
Default: yes

If set,
message sizes will be displayed with a single decimal value
for sizes from 0 to 10 kilobytes and 1 to 10 megabytes. See
formatstrings-size.

size_show_mb

Type: boolean 
Default: yes

If set,
message sizes will display megabytes for values greater than
or equal to 1 megabyte. See formatstrings-size.

size_units_on_left

Type: boolean 
Default: no

If set,
message sizes units will be displayed to the left of the
number. See formatstrings-size.

sleep_time

Type: number 
Default: 1

Specifies time,
in seconds, to pause while displaying certain informational
messages, while moving from folder to folder and after
expunging messages from the current folder. The default is
to pause one second, so a value of zero for this option
suppresses the pause.

smart_wrap

Type: boolean 
Default: yes

Controls the
display of lines longer than the screen width in the
internal pager. If set, long lines are wrapped at a
word boundary. If unset, lines are simply wrapped at
the screen edge. Also see the $markers variable.

smileys

Type: regular expression 
Default: &ldquo;(>From
)|(:[-^]?[][)(>

The
pager uses this variable to catch some common false
positives of $quote_regexp, most notably smileys and not
consider a line quoted text if it also matches $smileys.
This mostly happens at the beginning of a line.

smime_ask_cert_label

Type: boolean 
Default: yes

This flag
controls whether you want to be asked to enter a label for a
certificate about to be added to the database or not. It is
set by default. (S/MIME only)

smime_ca_location

Type: path 
Default: &ldquo;&rdquo;

This variable
contains the name of either a directory, or a file which
contains trusted certificates for use with OpenSSL. (S/MIME
only)

smime_certificates

Type: path 
Default: &ldquo;&rdquo;

Since for
S/MIME there is no pubring/secring as with PGP, mutt has to
handle storage and retrieval of keys by itself. This is very
basic right now, and keys and certificates are stored in two
different directories, both named as the hash-value
retrieved from OpenSSL. There is an index file which
contains mailbox-address keyid pairs, and which can be
manually edited. This option points to the location of the
certificates. (S/MIME only)

smime_decrypt_command

Type: string 
Default: &ldquo;&rdquo;

This format
string specifies a command which is used to decrypt
application/x-pkcs7-mime attachments.

The OpenSSL
command formats have their own set of printf(3)-like
sequences similar to PGP&rsquo;s:

%f

Expands to the name of a file containing a message.

%s

Expands to the name of a file containing the signature
part 

of a multipart/signed
attachment when verifying it.

%k

The key-pair specified with
$smime_default_key 

%c

One or more certificate IDs.

%a

The algorithm used for encryption.

%d

The message digest algorithm specified with
$smime_sign_digest_alg. 

%C

CA location: Depending on whether $smime_ca_location

points to a directory or file,
this expands to 
&ldquo;-CApath $smime_ca_location&rdquo; or &ldquo;-CAfile
$smime_ca_location&rdquo;.

For examples on
how to configure these formats, see the smime.rc in
the samples/ subdirectory which has been installed on
your system alongside the documentation. (S/MIME only)

smime_decrypt_use_default_key

Type: boolean 
Default: yes

If set
(default) this tells mutt to use the default key for
decryption. Otherwise, if managing multiple
certificate-key-pairs, mutt will try to use the
mailbox-address to determine the key to use. It will ask you
to supply a key, if it can&rsquo;t find one. (S/MIME
only)

smime_default_key

Type: string 
Default: &ldquo;&rdquo;

This is the
default key-pair to use for S/MIME operations, and must be
set to the keyid (the hash-value that OpenSSL generates) to
work properly.

It will be used
for encryption (see $postpone_encrypt and
$smime_self_encrypt). If GPGME is enabled, this is the key
id displayed by gpgsm.

It will be used
for decryption unless $smime_decrypt_use_default_key is
unset.

It will also be
used for signing unless $smime_sign_as is set.

The (now
deprecated) smime_self_encrypt_as is an alias for
this variable, and should no longer be used. (S/MIME
only)

smime_encrypt_command

Type: string 
Default: &ldquo;&rdquo;

This command is
used to create encrypted S/MIME messages.

This is a
format string, see the $smime_decrypt_command command for
possible printf(3)-like sequences. (S/MIME only)

smime_encrypt_with

Type: string 
Default: &ldquo;aes256&rdquo;

This sets the
algorithm that should be used for encryption. Valid choices
are &ldquo;aes128&rdquo;, &ldquo;aes192&rdquo;,
&ldquo;aes256&rdquo;, &ldquo;des&rdquo;, &ldquo;des3&rdquo;,
&ldquo;rc2-40&rdquo;, &ldquo;rc2-64&rdquo;,
&ldquo;rc2-128&rdquo;. (S/MIME only)

smime_get_cert_command

Type: string 
Default: &ldquo;&rdquo;

This command is
used to extract X509 certificates from a PKCS7
structure.

This is a
format string, see the $smime_decrypt_command command for
possible printf(3)-like sequences. (S/MIME only)

smime_get_cert_email_command

Type: string 
Default: &ldquo;&rdquo;

This command is
used to extract the mail address(es) used for storing X509
certificates, and for verification purposes (to check
whether the certificate was issued for the sender&rsquo;s
mailbox).

This is a
format string, see the $smime_decrypt_command command for
possible printf(3)-like sequences. (S/MIME only)

smime_get_signer_cert_command

Type: string 
Default: &ldquo;&rdquo;

This command is
used to extract only the signers X509 certificate from a
S/MIME signature, so that the certificate&rsquo;s owner may
get compared to the email&rsquo;s &ldquo;From:&rdquo;
field.

This is a
format string, see the $smime_decrypt_command command for
possible printf(3)-like sequences. (S/MIME only)

smime_import_cert_command

Type: string 
Default: &ldquo;&rdquo;

This command is
used to import a certificate via smime_keys.

This is a
format string, see the $smime_decrypt_command command for
possible printf(3)-like sequences. (S/MIME only)

smime_is_default

Type: boolean 
Default: no

The default
behavior of mutt is to use PGP on all auto-sign/encryption
operations. To override and to use OpenSSL instead this must
be set. However, this has no effect while replying,
since mutt will automatically select the same application
that was used to sign/encrypt the original message. (Note
that this variable can be overridden by unsetting
$crypt_autosmime.) (S/MIME only)

smime_keys

Type: path 
Default: &ldquo;&rdquo;

Since for
S/MIME there is no pubring/secring as with PGP, mutt has to
handle storage and retrieval of keys/certs by itself. This
is very basic right now, and stores keys and certificates in
two different directories, both named as the hash-value
retrieved from OpenSSL. There is an index file which
contains mailbox-address keyid pair, and which can be
manually edited. This option points to the location of the
private keys. (S/MIME only)

smime_pk7out_command

Type: string 
Default: &ldquo;&rdquo;

This command is
used to extract PKCS7 structures of S/MIME signatures, in
order to extract the public X509 certificate(s).

This is a
format string, see the $smime_decrypt_command command for
possible printf(3)-like sequences. (S/MIME only)

smime_self_encrypt

Type: boolean 
Default: yes

When
set, S/MIME encrypted messages will also be encrypted
using the certificate in $smime_default_key. (S/MIME
only)

smime_sign_as

Type: string 
Default: &ldquo;&rdquo;

If you have a
separate key to use for signing, you should set this to the
signing key. Most people will only need to set
$smime_default_key. (S/MIME only)

smime_sign_command

Type: string 
Default: &ldquo;&rdquo;

This command is
used to created S/MIME signatures of type
multipart/signed, which can be read by all mail
clients.

This is a
format string, see the $smime_decrypt_command command for
possible printf(3)-like sequences. NOTE: %c and %k
will default to $smime_sign_as if set, otherwise
$smime_default_key. (S/MIME only)

smime_sign_digest_alg

Type: string 
Default: &ldquo;sha256&rdquo;

This sets the
algorithm that should be used for the signature message
digest. Valid choices are &ldquo;md5&rdquo;,
&ldquo;sha1&rdquo;, &ldquo;sha224&rdquo;,
&ldquo;sha256&rdquo;, &ldquo;sha384&rdquo;,
&ldquo;sha512&rdquo;. (S/MIME only)

smime_sign_opaque_command

Type: string 
Default: &ldquo;&rdquo;

This command is
used to created S/MIME signatures of type
application/x-pkcs7-signature, which can only be
handled by mail clients supporting the S/MIME extension.

This is a
format string, see the $smime_decrypt_command command for
possible printf(3)-like sequences. (S/MIME only)

smime_timeout

Type: number (long) 
Default: 300

The number of
seconds after which a cached passphrase will expire if not
used. (S/MIME only)

smime_verify_command

Type: string 
Default: &ldquo;&rdquo;

This command is
used to verify S/MIME signatures of type
multipart/signed.

This is a
format string, see the $smime_decrypt_command command for
possible printf(3)-like sequences. (S/MIME only)

smime_verify_opaque_command

Type: string 
Default: &ldquo;&rdquo;

This command is
used to verify S/MIME signatures of type
application/x-pkcs7-mime.

This is a
format string, see the $smime_decrypt_command command for
possible printf(3)-like sequences. (S/MIME only)

smtp_authenticators

Type: string 
Default: &ldquo;&rdquo;

This is a
colon-delimited list of authentication methods mutt may
attempt to use to log in to an SMTP server, in the order
mutt should try them. Authentication methods are any SASL
mechanism, e.g. &ldquo;digest-md5&rdquo;,
&ldquo;gssapi&rdquo; or &ldquo;cram-md5&rdquo;. This option
is case-insensitive. If it is &ldquo;unset&rdquo; (the
default) mutt will try all available methods, in order from
most-secure to least-secure.

Example:

set
smtp_authenticators=&rdquo;digest-md5:cram-md5&rdquo;

smtp_oauth_refresh_command

Type: string 
Default: &ldquo;&rdquo;

The command to
run to generate an OAUTH refresh token for authorizing your
connection to your SMTP server. This command will be run on
every connection attempt that uses the OAUTHBEARER
authentication mechanism. See &ldquo;oauth&rdquo; for
details.

smtp_pass

Type: string 
Default: &ldquo;&rdquo;

Specifies the
password for your SMTP account. If unset, Mutt will
prompt you for your password when you first send mail via
SMTP. See $smtp_url to configure mutt to send mail via
SMTP.

Warning:
you should only use this option when you are on a fairly
secure machine, because the superuser can read your muttrc
even if you are the only one who can read the file.

smtp_url

Type: string 
Default: &ldquo;&rdquo;

Defines the
SMTP smarthost where sent messages should relayed for
delivery. This should take the form of an SMTP URL,
e.g.:

smtp[s]://[user[:pass]@]host[:port]

where
&ldquo;[...]&rdquo; denotes an optional part. Setting this
variable overrides the value of the $sendmail variable.

Also see
$write_bcc.

sort

Type: sort order

Default: date

Specifies how
to sort messages in the &ldquo;index&rdquo; menu. Valid
values are: 
- date or date-sent 
- date-received

- from

- mailbox-order (unsorted) 
- score

- size

- spam

- subject 
- threads

- to

You may optionally use the
&ldquo;reverse-&rdquo; prefix to specify reverse sorting
order (example: &ldquo;set
sort=reverse-date-sent&rdquo;).

For values
except &ldquo;threads&rdquo;, this provides the primary sort
method. When two message sort values are equal, $sort_aux
will be used for a secondary sort.

When set to
&ldquo;threads&rdquo;, Mutt threads messages in the index.
It uses the variable $sort_thread_groups to sort between
threads (at the top/root level), and $sort_aux to sort
sub-threads and children.

sort_alias

Type: sort order 
Default: alias

Specifies how
the entries in the &ldquo;alias&rdquo; menu are sorted. The
following are legal values: 
- address (sort alphabetically by email address) 
- alias (sort alphabetically by alias name) 
- unsorted (leave in order specified in .muttrc)

sort_aux

Type: sort order 
Default: date

For
non-threaded mode, this provides a secondary sort for
messages in the &ldquo;index&rdquo; menu, used when the
$sort value is equal for two messages.

When sorting by
threads, this variable controls how the branches of the
thread trees are sorted. This can be set to any value that
$sort can, except &ldquo;threads&rdquo; (in that case, mutt
will just use &ldquo;date-sent&rdquo;). You can also specify
the &ldquo;last-&rdquo; prefix in addition to the
&ldquo;reverse-&rdquo; prefix, but &ldquo;last-&rdquo; must
come after &ldquo;reverse-&rdquo;. The &ldquo;last-&rdquo;
prefix causes messages to be sorted against its siblings by
which has the last descendant, using the rest of $sort_aux
as an ordering. For instance,

set
sort_aux=last-date-received

would mean that
if a new message is received in a sub-thread, that
sub-thread becomes the last one displayed.

Note: For
reversed-threads $sort order, $sort_aux is reversed again
(which is not the right thing to do, but kept to not break
any existing configuration setting).

sort_browser

Type: sort order 
Default: alpha

Specifies how
to sort entries in the file browser. By default, the entries
are sorted alphabetically. Valid values: 
- alpha (alphabetically) 
- count

- date

- size

- unread 
- unsorted

You may
optionally use the &ldquo;reverse-&rdquo; prefix to specify
reverse sorting order (example: &ldquo;set
sort_browser=reverse-date&rdquo;).

sort_browser_mailboxes

Type: sort order 
Default: unsorted

Specifies how
to sort entries in the mailbox browser. By default, the
entries are unsorted, displayed in the same order as listed
in the &ldquo;mailboxes&rdquo; command. Valid values: 
- alpha (alphabetically) 
- count

- date

- size

- unread 
- unsorted

You may
optionally use the &ldquo;reverse-&rdquo; prefix to specify
reverse sorting order (example: &ldquo;set
sort_browser_mailboxes=reverse-alpha&rdquo;).

sort_re

Type: boolean 
Default: yes

This variable
is only useful when sorting by threads with $strict_threads
unset. In that case, it changes the heuristic mutt
uses to thread messages by subject. With $sort_re
set, mutt will only attach a message as the child of
another message by subject if the subject of the child
message starts with a substring matching the setting of
$reply_regexp. With $sort_re unset, mutt will attach
the message whether or not this is the case, as long as the
non-$reply_regexp parts of both messages are identical.

sort_thread_groups

Type: sort order 
Default: aux

When sorting by
threads, this variable controls how threads are sorted in
relation to other threads (at the top/root level). This can
be set to any value that $sort can, except
&ldquo;threads&rdquo;. You can also specify the
&ldquo;last-&rdquo; prefix in addition to the
&ldquo;reverse-&rdquo; prefix, but &ldquo;last-&rdquo; must
come after &ldquo;reverse-&rdquo;. The &ldquo;last-&rdquo;
prefix causes messages to be sorted against its siblings by
which has the last descendant, using the rest of
$sort_thread_groups as an ordering.

For backward
compatibility, the default value is &ldquo;aux&rdquo;, which
means to use $sort_aux for top-level thread sorting too. The
value &ldquo;aux&rdquo; does not respect &ldquo;last-&rdquo;
or &ldquo;reverse-&rdquo; prefixes, it simply delegates
sorting directly to $sort_aux.

Note: For
reversed-threads $sort order, $sort_thread_groups is
reversed again (which is not the right thing to do, but kept
to not break any existing configuration setting).

spam_separator

Type: string 
Default: &ldquo;,&rdquo;

This variable
controls what happens when multiple spam headers are
matched: if unset, each successive header will
overwrite any previous matches value for the spam label. If
set, each successive match will append to the
previous, using this variable&rsquo;s value as a
separator.

spoolfile

Type: path 
Default: &ldquo;&rdquo;

If your spool
mailbox is in a non-default place where Mutt cannot find it,
you can specify its location with this variable. Mutt will
initially set this variable to the value of the environment
variable $MAIL or $MAILDIR if either is
defined.

ssl_ca_certificates_file

Type: path 
Default: &ldquo;&rdquo;

This variable
specifies a file containing trusted CA certificates. Any
server certificate that is signed with one of these CA
certificates is also automatically accepted. (GnuTLS
only)

Example:

set
ssl_ca_certificates_file=/etc/ssl/certs/ca-certificates.crt

ssl_client_cert

Type: path 
Default: &ldquo;&rdquo;

The file
containing a client certificate and its associated private
key.

ssl_force_tls

Type: boolean 
Default: yes

If this
variable is set, Mutt will require that all
connections to remote servers be encrypted. Furthermore it
will attempt to negotiate TLS even if the server does not
advertise the capability, since it would otherwise have to
abort the connection anyway. This option supersedes
$ssl_starttls.

ssl_min_dh_prime_bits

Type: number 
Default: 0

This variable
specifies the minimum acceptable prime size (in bits) for
use in any Diffie-Hellman key exchange. A value of 0 will
use the default from the GNUTLS library. (GnuTLS only)

ssl_starttls

Type: quadoption 
Default: yes

If set
(the default), mutt will attempt to use STARTTLS on
servers advertising the capability. When unset, mutt
will not attempt to use STARTTLS regardless of the
server&rsquo;s capabilities.

Note
that STARTTLS is subject to many kinds of attacks,
including the ability of a machine-in-the-middle to suppress
the advertising of support. Setting $ssl_force_tls is
recommended if you rely on STARTTLS.

ssl_use_sslv2

Type: boolean 
Default: no

If set ,
Mutt will use SSLv2 when communicating with servers that
request it. N.B. As of 2011, SSLv2 is considered
insecure, and using is inadvisable. See
https://tools.ietf.org/html/rfc6176 . (OpenSSL only)

ssl_use_sslv3

Type: boolean 
Default: no

If set ,
Mutt will use SSLv3 when communicating with servers that
request it. N.B. As of 2015, SSLv3 is considered
insecure, and using it is inadvisable. See
https://tools.ietf.org/html/rfc7525 .

ssl_use_tlsv1

Type: boolean 
Default: no

If set ,
Mutt will use TLSv1.0 when communicating with servers that
request it. N.B. As of 2015, TLSv1.0 is considered
insecure, and using it is inadvisable. See
https://tools.ietf.org/html/rfc7525 .

ssl_use_tlsv1_1

Type: boolean 
Default: no

If set ,
Mutt will use TLSv1.1 when communicating with servers that
request it. N.B. As of 2015, TLSv1.1 is considered
insecure, and using it is inadvisable. See
https://tools.ietf.org/html/rfc7525 .

ssl_use_tlsv1_2

Type: boolean 
Default: yes

If set ,
Mutt will use TLSv1.2 when communicating with servers that
request it.

ssl_use_tlsv1_3

Type: boolean 
Default: yes

If set ,
Mutt will use TLSv1.3 when communicating with servers that
request it.

ssl_usesystemcerts

Type: boolean 
Default: yes

If set to
yes, mutt will use CA certificates in the system-wide
certificate store when checking if a server certificate is
signed by a trusted CA. (OpenSSL only)

ssl_verify_dates

Type: boolean 
Default: yes

If set
(the default), mutt will not automatically accept a server
certificate that is either not yet valid or already expired.
You should only unset this for particular known hosts, using
the  function.

ssl_verify_host

Type: boolean 
Default: yes

If set
(the default), mutt will not automatically accept a server
certificate whose host name does not match the host used in
your folder URL. You should only unset this for particular
known hosts, using the 
function.

ssl_verify_host_override

Type: string 
Default: &ldquo;&rdquo;

Defines an
alternate host name to verify the server certificate
against. This should not be set unless you are sure what you
are doing, but it might be useful for connection to a .onion
host without a properly configured host name in the
certificate. See $ssl_verify_host.

ssl_verify_partial_chains

Type: boolean 
Default: no

This option
should not be changed from the default unless you understand
what you are doing.

Setting this
variable to yes will permit verifying partial
certification chains, i. e. a certificate chain where not
the root, but an intermediate certificate CA, or the host
certificate, are marked trusted (in $certificate_file),
without marking the root signing CA as trusted.

(OpenSSL 1.0.2b
and newer only).

ssl_ciphers

Type: string 
Default: &ldquo;&rdquo;

Contains a
colon-separated list of ciphers to use when using SSL. For
OpenSSL, see ciphers(1) for the syntax of the string.

For GnuTLS,
this option will be used in place of &rdquo;NORMAL&rdquo; at
the start of the priority string. See
gnutls_priority_init(3) for the syntax and more details.
(Note: GnuTLS version 2.1.7 or higher is required.)

status_chars

Type: string 
Default: &ldquo;-*%A&rdquo;

Controls the
characters used by the &ldquo;%r&rdquo; indicator in
$status_format. The first character is used when the mailbox
is unchanged. The second is used when the mailbox has been
changed, and it needs to be resynchronized. The third is
used if the mailbox is in read-only mode, or if the mailbox
will not be written when exiting that mailbox (You can
toggle whether to write changes to a mailbox with the
 operation, bound by default to
&ldquo;%&rdquo;). The fourth is used to indicate that the
current folder has been opened in attach- message mode
(Certain operations like composing a new mail, replying,
forwarding, etc. are not permitted in this mode).

status_format

Type: string (localized) 
Default: &ldquo;-%r-Mutt: %f [Msgs:%?M?%M/?%m%?n?
New:%n?%?o? Old:%o?%?d? Del:%d?%?F? Flag:%F?%?t? Tag:%t?%?p?
Post:%p?%?b? Inc:%b?%?B? Back:%B?%?l?
%l?]---(%s/%?T?%T/?%S)-%>-(%P)---&rdquo;

Controls the
format of the status line displayed in the
&ldquo;index&rdquo; menu. This string is similar to
$index_format, but has its own set of printf(3)-like
sequences:

%b

number of mailboxes with new mail *

%B

number of backgrounded editing sessions *

%d

number of deleted messages *

%f

the full pathname of the current mailbox

%F

number of flagged messages *

%h

local hostname

%l

size (in bytes) of the current mailbox (see
formatstrings-size) *

%L

size (in bytes) of the messages shown (i.e., which match
the current limit) (see formatstrings-size) *

%m

the number of messages in the mailbox *

%M

the number of messages shown (i.e., which match the
current limit) *

%n

number of new messages in the mailbox *

%o

number of old unread messages *

%p

number of postponed messages *

%P

percentage of the way through the index

%r

modified/read-only/won&rsquo;t-write/attach-message
indicator, according to $status_chars

%R

number of read messages *

%s

current sorting mode ($sort)

%S

current aux sorting method ($sort_aux)

%t

number of tagged messages *

%T

current thread group sorting method
($sort_thread_groups) *

%u

number of unread messages *

%v

Mutt version string

%V

currently active limit pattern, if any *

%>X

right justify the rest of the string and pad with
&ldquo;X&rdquo; 

%|X

pad to the end of the line with &ldquo;X&rdquo;

%*X

soft-fill with character &ldquo;X&rdquo; as pad

For an
explanation of &ldquo;soft-fill&rdquo;, see the
$index_format documentation.

* = can be
optionally printed if nonzero

Some of the
above sequences can be used to optionally print a string if
their value is nonzero. For example, you may only want to
see the number of flagged messages if such messages exist,
since zero is not particularly meaningful. To optionally
print a string based upon one of the above sequences, the
following construct is used:

%???

where
sequence_char is a character from the table above,
and optional_string is the string you would like
printed if sequence_char is nonzero.
optional_string may contain other sequences as
well as normal text, but you may not nest optional
strings.

Here is an
example illustrating how to optionally print the number of
new messages in a mailbox:

%?n?%n new
messages.?

You can also
switch between two strings using the following
construct:

%??&?

If the value of
sequence_char is non-zero, if_string will be
expanded, otherwise else_string will be expanded.

You can force
the result of any printf(3)-like sequence to be
lowercase by prefixing the sequence character with an
underscore (&ldquo;_&rdquo;) sign. For example, if you want
to display the local hostname in lowercase, you would use:
&ldquo;%_h&rdquo;.

If you prefix
the sequence character with a colon (&ldquo;:&rdquo;)
character, mutt will replace any dots in the expansion by
underscores. This might be helpful with IMAP folders that
don&rsquo;t like dots in folder names.

status_on_top

Type: boolean 
Default: no

Setting this
variable causes the &ldquo;status bar&rdquo; to be displayed
on the first line of the screen rather than near the bottom.
If $help is set, too it&rsquo;ll be placed at the
bottom.

strict_threads

Type: boolean 
Default: no

If set,
threading will only make use of the
&ldquo;In-Reply-To&rdquo; and &ldquo;References:&rdquo;
fields when you $sort by message threads. By default,
messages with the same subject are grouped together in
&ldquo;pseudo threads.&rdquo;. This may not always be
desirable, such as in a personal mailbox where you might
have several unrelated messages with the subjects like
&ldquo;hi&rdquo; which will get grouped together. See also
$sort_re for a less drastic way of controlling this
behavior.

suspend

Type: boolean 
Default: yes

When
unset, mutt won&rsquo;t stop when the user presses
the terminal&rsquo;s susp key, usually
&ldquo;^Z&rdquo;. This is useful if you run mutt inside an
xterm using a command like &ldquo;xterm -e
mutt&rdquo;.

text_flowed

Type: boolean 
Default: no

When
set, mutt will generate &ldquo;format=flowed&rdquo;
bodies with a content type of &ldquo;text/plain;
format=flowed&rdquo;. This format is easier to handle
for some mailing software, and generally just looks like
ordinary text. To actually make use of this format&rsquo;s
features, you&rsquo;ll need support in your editor.

The option only
controls newly composed messages. Postponed messages, resent
messages, and draft messages (via -H on the command line)
will use the content-type of the source message.

Note that
$indent_string is ignored when this option is
set.

thorough_search

Type: boolean 
Default: yes

Affects the
~b, ~B, and ~h search operations
described in section &ldquo;patterns&rdquo;. If set,
the headers and body/attachments of messages to be searched
are decoded before searching. If unset, messages are
searched as they appear in the folder.

Users searching
attachments or for non-ASCII characters should set
this value because decoding also includes MIME
parsing/decoding and possible character set conversions.
Otherwise mutt will attempt to match against the raw message
received (for example quoted-printable encoded or with
encoded headers) which may lead to incorrect search
results.

thread_received

Type: boolean 
Default: no

When
set, mutt uses the date received rather than the date
sent to thread messages by subject.

tilde

Type: boolean

Default: no

When
set, the internal-pager will pad blank lines to the
bottom of the screen with a tilde (&ldquo;~&rdquo;).

time_inc

Type: number 
Default: 0

Along with
$read_inc, $write_inc, and $net_inc, this variable controls
the frequency with which progress updates are displayed. It
suppresses updates less than $time_inc milliseconds apart.
This can improve throughput on systems with slow terminals,
or when running mutt on a remote system.

Also see the
&ldquo;tuning&rdquo; section of the manual for performance
considerations.

timeout

Type: number 
Default: 600

When Mutt is
waiting for user input either idling in menus or in an
interactive prompt, Mutt would block until input is present.
Depending on the context, this would prevent certain
operations from working, like checking for new mail or
keeping an IMAP connection alive.

This variable
controls how many seconds Mutt will at most wait until it
aborts waiting for input, performs these operations and
continues to wait for input.

A value of zero
or less will cause Mutt to never time out.

tmpdir

Type: path

Default: &ldquo;&rdquo;

This variable
allows you to specify where Mutt will place its temporary
files needed for displaying and composing messages. If this
variable is not set, the environment variable $TMPDIR
is used. If $TMPDIR is not set then
&ldquo;/var/tmp&rdquo; is used.

to_chars

Type: string 
Default: &ldquo; +TCFL&rdquo;

Controls the
character used to indicate mail addressed to you. The first
character is the one used when the mail is not
addressed to your address. The second is used when you are
the only recipient of the message. The third is when your
address appears in the &ldquo;To:&rdquo; header field, but
you are not the only recipient of the message. The fourth
character is used when your address is specified in the
&ldquo;Cc:&rdquo; header field, but you are not the only
recipient. The fifth character is used to indicate mail that
was sent by you. The sixth character is used to
indicate when a mail was sent to a mailing-list you
subscribe to.

trash

Type: path

Default: &ldquo;&rdquo;

If set, this
variable specifies the path of the trash folder where the
mails marked for deletion will be moved, instead of being
irremediably purged.

NOTE: When you
delete a message in the trash folder, it is really deleted,
so that you have a way to clean the trash.

ts_icon_format

Type: string (localized) 
Default: &ldquo;M%?n?AIL&ail?&rdquo;

Controls the
format of the icon title, as long as
&ldquo;$ts_enabled&rdquo; is set. This string is identical
in formatting to the one used by
&ldquo;$status_format&rdquo;.

ts_enabled

Type: boolean 
Default: no

Controls
whether mutt tries to set the terminal status line and icon
name. Most terminal emulators emulate the status line in the
window title.

ts_status_format

Type: string (localized) 
Default: &ldquo;Mutt with %?m?%m messages&no
messages?%?n? [%n NEW]?&rdquo;

Controls the
format of the terminal status line (or window title),
provided that &ldquo;$ts_enabled&rdquo; has been set. This
string is identical in formatting to the one used by
&ldquo;$status_format&rdquo;.

tunnel

Type: string

Default: &ldquo;&rdquo;

Setting this
variable will cause mutt to open a pipe to a command instead
of a raw socket. You may be able to use this to set up
preauthenticated connections to your IMAP/POP3/SMTP server.
Example:

set
tunnel=&rdquo;ssh -q mailhost.net
/usr/local/libexec/imapd&rdquo;

Note: For this
example to work you must be able to log in to the remote
machine without having to enter a password.

When set, Mutt
uses the tunnel for all remote connections. Please see
&ldquo;account-hook&rdquo; in the manual for how to use
different tunnel commands per connection.

tunnel_is_secure

Type: boolean 
Default: yes

When
set, Mutt will assume the $tunnel connection does not
need STARTTLS to be enabled. It will also allow IMAP PREAUTH
server responses inside a tunnel to proceed. This is
appropriate if $tunnel uses ssh or directly invokes the
server locally.

When
unset, Mutt will negotiate STARTTLS according to the
ssl_starttls and ssl_force_tls variables. If ssl_force_tls
is set, Mutt will abort connecting if an IMAP server
responds with PREAUTH. This setting is appropriate if
$tunnel does not provide security and could be tampered with
by attackers.

uncollapse_jump

Type: boolean 
Default: no

When
set, Mutt will jump to the next unread message, if
any, when the current thread is uncollapsed.

uncollapse_new

Type: boolean 
Default: yes

When
set, Mutt will automatically uncollapse any collapsed
thread that receives a newly delivered message. When
unset, collapsed threads will remain collapsed. The
presence of the newly delivered message will still affect
index sorting, though.

use_8bitmime

Type: boolean 
Default: no

Warning:
do not set this variable unless you are using a version of
sendmail which supports the -B8BITMIME flag (such as
sendmail 8.8.x) or you may not be able to send mail.

When
set, Mutt will invoke $sendmail with the
-B8BITMIME flag when sending 8-bit messages to enable
ESMTP negotiation.

use_domain

Type: boolean 
Default: yes

When
set, Mutt will qualify all local addresses (ones
without the &ldquo;@host&rdquo; portion) with the value of
$hostname. If unset, no addresses will be
qualified.

use_envelope_from

Type: boolean 
Default: no

When
set, mutt will set the envelope sender of the
message. If $envelope_from_address is set, it will be
used as the sender address. If unset, mutt will
attempt to derive the sender from the &ldquo;From:&rdquo;
header.

Note that this
information is passed to sendmail command using the
-f command line switch. Therefore setting this option
is not useful if the $sendmail variable already contains
-f or if the executable pointed to by $sendmail
doesn&rsquo;t support the -f switch.

use_from

Type: boolean 
Default: yes

When
set, Mutt will generate the &ldquo;From:&rdquo;
header field when sending messages. If unset, no
&ldquo;From:&rdquo; header field will be generated unless
the user explicitly sets one using the &ldquo;my_hdr&rdquo;
command.

use_ipv6

Type: boolean 
Default: yes

When
set, Mutt will look for IPv6 addresses of hosts it
tries to contact. If this option is unset, Mutt will
restrict itself to IPv4 addresses. Normally, the default
should work.

user_agent

Type: boolean 
Default: no

When
set, mutt will add a &ldquo;User-Agent:&rdquo; header
to outgoing messages, indicating which version of mutt was
used for composing them.

visual

Type: path

Default: &ldquo;&rdquo;

Specifies the
visual editor to invoke when the &ldquo;~v&rdquo;
command is given in the built-in editor.

wait_key

Type: boolean 
Default: yes

Controls
whether Mutt will ask you to press a key after an external
command has been invoked by these functions:
, ,
, , and
 commands.

It is also used
when viewing attachments with &ldquo;auto_view&rdquo;,
provided that the corresponding mailcap entry has a
needsterminal flag, and the external program is
interactive.

When
set, Mutt will always ask for a key. When
unset, Mutt will wait for a key only if the external
command returned a non-zero status.

weed

Type: boolean

Default: yes

When
set, mutt will weed headers when displaying,
forwarding, or replying to messages.

Also see
$copy_decode_weed, $pipe_decode_weed,
$print_decode_weed.

wrap

Type: number

Default: 0

When set to a
positive value, mutt will wrap text at $wrap characters.
When set to a negative value, mutt will wrap text so that
there are $wrap characters of empty space on the right side
of the terminal. Setting it to zero makes mutt wrap at the
terminal width.

Also see
$reflow_wrap.

wrap_headers

Type: number 
Default: 78

This option
specifies the number of characters to use for wrapping an
outgoing message&rsquo;s headers. Allowed values are between
78 and 998 inclusive.

Note:
This option usually shouldn&rsquo;t be changed. RFC5233
recommends a line length of 78 (the default), so please
only change this setting when you know what you&rsquo;re
doing.

wrap_search

Type: boolean 
Default: yes

Controls
whether searches wrap around the end.

When
set, searches will wrap around the first (or last)
item. When unset, incremental searches will not
wrap.

wrapmargin

Type: number 
Default: 0

(DEPRECATED)
Equivalent to setting $wrap with a negative value.

write_bcc

Type: boolean 
Default: no

Controls
whether mutt writes out the &ldquo;Bcc:&rdquo; header when
preparing messages to be sent. Some MTAs, such as Exim and
Courier, do not strip the &ldquo;Bcc:&rdquo; header; so it
is advisable to leave this unset unless you have a
particular need for the header to be in the sent
message.

If mutt is set
to deliver directly via SMTP (see $smtp_url), this option
does nothing: mutt will never write out the
&ldquo;Bcc:&rdquo; header in this case.

Note this
option only affects the sending of messages. Fcc&rsquo;ed
copies of a message will always contain the
&ldquo;Bcc:&rdquo; header if one exists.

write_inc

Type: number 
Default: 10

When writing a
mailbox, a message will be printed every $write_inc messages
to indicate progress. If set to 0, only a single message
will be displayed before writing a mailbox.

Also see the
$read_inc, $net_inc and $time_inc variables and the
&ldquo;tuning&rdquo; section of the manual for performance
considerations.

SEE ALSO

iconv(1),
iconv(3), mailcap(5), maildir(5),
mbox(5), mutt(1), printf(3),
regex(7), strftime(3)

The Mutt
Manual

The Mutt home
page: http://www.mutt.org/

AUTHOR

Michael Elkins,
and others. Use mutt-dev [AT] mutt.org> to contact the
developers.