NAME

nbdkit-streaming-plugin
- nbdkit streaming plugin

SYNOPSIS

 nbdkit streaming write=PIPE [size=SIZE]
 nbdkit streaming read=PIPE [size=SIZE]

DEPRECATED

The
streaming plugin is deprecated in nbdkit &ge; 1.26
and will be removed in nbdkit 1.30.

A suggested
replacement is the libnbd program nbdcopy(1) which is
able to stream to and from pipes, sockets and stdio. For
example to stream from a qcow2 file to another program over
a pipe, use:

 nbdcopy -- [ qemu-nbd -f qcow2 file.qcow2 ] - | hexdump -C

There are
further examples in the nbdcopy(1) manual.

DESCRIPTION

"nbdkit-streaming-plugin"
is a plugin for nbdkit(1) that can stream in or out
of a local pipe or socket. An alternate tool which can do
something similar to this is nbdcopy(1). To turn an
NBD export into a local file use
nbdfuse(1).

If the
NBD client opens the NBD port
and writes from the start to the end of the disk
without seeking backwards, then you can turn that into a
stream of data on a local pipe or socket using:

 nbdkit streaming write=./pipe

This can be
visualised as:

               &#9484;&#9472;&#9472;&#9472;&#9472;&#9472;&#9472;&#9472;&#9472;&#9472;&#9472;&#9472;&#9488;
 NBD           &#9474; nbdkit    &#9474;        plugin streams
 client &#9472;&#9472;&#9472;&#9472;&#9472;&#9472;&#9654;&#9474; streaming &#9474;&#9472;&#9472;&#9472;&#9472;&#9472;&#9472;&#9654; data to ./pipe
 writes        &#9474; plugin    &#9474;
               &#9492;&#9472;&#9472;&#9472;&#9472;&#9472;&#9472;&#9472;&#9472;&#9472;&#9472;&#9472;&#9496;

If the
NBD client opens the NBD port
and reads from the start to the end of the disk
without seeking backwards, then you can turn a local pipe or
socket into a stream of data for that client:

 nbdkit streaming read=./pipe

This can be
visualised as:

                  &#9484;&#9472;&#9472;&#9472;&#9472;&#9472;&#9472;&#9472;&#9472;&#9472;&#9472;&#9472;&#9488;
 plugin streams   &#9474; nbdkit    &#9474;        NBD
 data from &#9472;&#9472;&#9472;&#9472;&#9472;&#9472;&#9654;&#9474; streaming &#9474;&#9472;&#9472;&#9472;&#9472;&#9472;&#9472;&#9654; client
 ./pipe           &#9474; plugin    &#9474;        reads
                  &#9492;&#9472;&#9472;&#9472;&#9472;&#9472;&#9472;&#9472;&#9472;&#9472;&#9472;&#9472;&#9496;

Note that
./pipe (or the local socket) sees raw data, it is not
using the NBD protocol. If you want to
forward NBD to a local socket connected to
another NBD server, use
nbdkit-nbd-plugin(1).

Combining
this plugin with qemu tools 
Typical usage is with qemu tools. The following command does
not work because the output is a pipe or socket:

 $ mkfifo pipe
 $ qemu-img convert -n input -O raw ./pipe
 qemu-img: Could not open './pipe': A regular file was expected by
 the 'file' driver, but something else was given

However this
will work:

 nbdkit -U - streaming write=./pipe \
        --run ' qemu-img convert -n input -O raw $nbd '
              &#9484;&#9472;&#9472;&#9472;&#9472;&#9472;&#9472;&#9472;&#9472;&#9472;&#9472;&#9472;&#9488;       &#9484;&#9472;&#9472;&#9472;&#9472;&#9472;&#9472;&#9472;&#9472;&#9472;&#9472;&#9472;&#9488;
 reads        &#9474; qemu-img  &#9474;       &#9474; nbdkit    &#9474;        plugin streams
 input &#9472;&#9472;&#9472;&#9472;&#9472;&#9472;&#9654;&#9474; convert   &#9474;&#9472;&#9472;&#9472;&#9472;&#9472;&#9472;&#9654;&#9474; streaming &#9474;&#9472;&#9472;&#9472;&#9472;&#9472;&#9472;&#9654; data to ./pipe
 file         &#9474; command   &#9474;       &#9474; plugin    &#9474;
              &#9492;&#9472;&#9472;&#9472;&#9472;&#9472;&#9472;&#9472;&#9472;&#9472;&#9472;&#9472;&#9496;      &uarr;&#9492;&#9472;&#9472;&#9472;&#9472;&#9472;&#9472;&#9472;&#9472;&#9472;&#9472;&#9472;&#9496;
                              Unix domain socket (-U -)

This only works
because the output format is raw and qemu-img can write that
linearly (without seeking backwards or writing blocks out of
order). This approach cannot work for other formats such as
qcow2 since those contain metadata that must be updated by
seeking back to the start of the file which is not possible
if the output is a pipe.

The reverse is
to get qemu-img to read from a pipe:

 nbdkit -U - streaming read=./pipe \
        --run ' qemu-img convert -f raw $nbd -O qcow2 output.qcow2 '

For use of the
--run and -U - options, see
nbdkit-captive(1).

PARAMETERS

Either
"read" or "write" is
required, but not both. 
read= FILENAME

(nbdkit &ge; 1.22)

Read data
stream from the named pipe or socket. If the pipe or socket
does not exist, then it is created (as a named
FIFO ), otherwise the existing pipe or socket
is opened and used.

write=
FILENAME

Write data stream to the named
pipe or socket. If the pipe or socket does not exist, then
it is created (as a named FIFO ), otherwise
the existing pipe or socket is opened and used.

pipe=
FILENAME

For backwards compatibility
with nbdkit &le; 1.20 this is a synonym for
"write=FILENAME".

size=
SIZE

Specify the virtual size of the
stream.

This parameter
is optional. If not specified, then the virtual disk appears
to the client to be very large (effectively infinite).
Whether you need to specify this parameter depends on the
client. Some clients don&rsquo;t check the size and just
write/stream, others do checks or calculations based on the
apparent size. It is not possible for the plugin to work out
the size itself since it doesn&rsquo;t see the whole stream
until it has all been streamed.

FILES

$plugindir/nbdkit-streaming-plugin.so

The plugin.

Use
"nbdkit --dump-config" to find the
location of $plugindir.

VERSION

"nbdkit-streaming-plugin"
first appeared in nbdkit 1.2.

SEE ALSO

nbdkit(1),
nbdkit-file-plugin(1), nbdkit-nbd-plugin(1),
nbdkit-plugin(3), nbdkit-captive(1),
nbdcopy(1), nbdfuse(1),
qemu-img(1).

AUTHORS

Richard W.M.
Jones

COPYRIGHT

Copyright (C)
2014-2020 Red Hat Inc.

LICENSE

Redistribution
and use in source and binary forms, with or without
modification, are permitted provided that the following
conditions are met:

&bull;

Redistributions of source code must retain the above
copyright notice, this list of conditions and the following
disclaimer. 

&bull;

Redistributions in binary form must reproduce the above
copyright notice, this list of conditions and the following
disclaimer in the documentation and/or other materials
provided with the distribution.

&bull;

Neither the name of Red Hat nor the names of its
contributors may be used to endorse or promote products
derived from this software without specific prior written
permission. 

THIS
SOFTWARE IS PROVIDED BY RED HAT AND CONTRIBUTORS
&rsquo;&rsquo; AS IS &rsquo;&rsquo;
AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT
NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY
AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO
EVENT SHALL RED HAT OR CONTRIBUTORS BE LIABLE FOR ANY
DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
CONSEQUENTIAL DAMAGES ( INCLUDING, BUT NOT
LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR
SERVICES ; LOSS OF USE, DATA, OR
PROFITS ; OR BUSINESS INTERRUPTION )
HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,
WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (
INCLUDING NEGLIGENCE OR OTHERWISE )
ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
EVEN IF ADVISED OF THE POSSIBILITY OF SUCH
DAMAGE.