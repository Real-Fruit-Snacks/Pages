Y0(3POSIX)                 POSIX Programmer's Manual                Y0(3POSIX)

PROLOG
       This  manual  page is part of the POSIX Programmer's Manual.  The Linux
       implementation of this interface may differ (consult the  corresponding
       Linux  manual page for details of Linux behavior), or the interface may
       not be implemented on Linux.

NAME
       y0, y1, yn — Bessel functions of the second kind

SYNOPSIS
       #include <math.h>

       double y0(double x);
       double y1(double x);
       double yn(int n, double x);

DESCRIPTION
       The y0(), y1(), and yn() functions shall compute Bessel functions of  x
       of the second kind of orders 0, 1, and n, respectively.

       An  application  wishing to check for error situations should set errno
       to zero and  call  feclearexcept(FE_ALL_EXCEPT)  before  calling  these
       functions. On return, if errno is non-zero or fetestexcept(FE_INVALID |
       FE_DIVBYZERO | FE_OVERFLOW | FE_UNDERFLOW) is non-zero,  an  error  has
       occurred.

RETURN VALUE
       Upon  successful  completion, these functions shall return the relevant
       Bessel value of x of the second kind.

       If x is NaN, NaN shall be returned.

       If the x argument to these functions  is  negative,  -HUGE_VAL  or  NaN
       shall be returned, and a domain error may occur.

       If x is 0.0, -HUGE_VAL shall be returned and a pole error may occur.

       If  the correct result would cause underflow, 0.0 shall be returned and
       a range error may occur.

       If the correct result would cause overflow, -HUGE_VAL or 0.0  shall  be
       returned and a range error may occur.

ERRORS
       These functions may fail if:

       Domain Error
                   The value of x is negative.

                   If  the  integer expression (math_errhandling & MATH_ERRNO)
                   is non-zero, then errno shall be set to [EDOM].  If the in‐
                   teger  expression  (math_errhandling  &  MATH_ERREXCEPT) is
                   non-zero, then the invalid floating-point  exception  shall
                   be raised.

       Pole Error  The value of x is zero.

                   If  the  integer expression (math_errhandling & MATH_ERRNO)
                   is non-zero, then errno shall be set to [ERANGE].   If  the
                   integer  expression  (math_errhandling & MATH_ERREXCEPT) is
                   non-zero, then the divide-by-zero floating-point  exception
                   shall be raised.

       Range Error The correct result would cause overflow.

                   If  the  integer expression (math_errhandling & MATH_ERRNO)
                   is non-zero, then errno shall be set to [ERANGE].   If  the
                   integer  expression  (math_errhandling & MATH_ERREXCEPT) is
                   non-zero, then the overflow floating-point exception  shall
                   be raised.

       Range Error The  value  of  x is too large in magnitude, or the correct
                   result would cause underflow.

                   If the integer expression (math_errhandling  &  MATH_ERRNO)
                   is  non-zero,  then errno shall be set to [ERANGE].  If the
                   integer expression (math_errhandling &  MATH_ERREXCEPT)  is
                   non-zero, then the underflow floating-point exception shall
                   be raised.

       The following sections are informative.

EXAMPLES
       None.

APPLICATION USAGE
       On error, the expressions (math_errhandling & MATH_ERRNO) and (math_er‐
       rhandling & MATH_ERREXCEPT) are independent of each other, but at least
       one of them must be non-zero.

RATIONALE
       None.

FUTURE DIRECTIONS
       None.

SEE ALSO
       feclearexcept(), fetestexcept(), isnan(), j0()

       The Base Definitions volume of POSIX.1‐2017, Section 4.20, Treatment of
       Error Conditions for Mathematical Functions, <math.h>

COPYRIGHT
       Portions  of  this text are reprinted and reproduced in electronic form
       from IEEE Std 1003.1-2017, Standard for Information Technology --  Por‐
       table  Operating System Interface (POSIX), The Open Group Base Specifi‐
       cations Issue 7, 2018 Edition, Copyright (C) 2018 by the  Institute  of
       Electrical  and  Electronics Engineers, Inc and The Open Group.  In the
       event of any discrepancy between this version and the original IEEE and
       The  Open Group Standard, the original IEEE and The Open Group Standard
       is the referee document. The original Standard can be  obtained  online
       at http://www.opengroup.org/unix/online.html .

       Any  typographical  or  formatting  errors that appear in this page are
       most likely to have been introduced during the conversion of the source
       files  to  man page format. To report such errors, see https://www.ker‐
       nel.org/doc/man-pages/reporting_bugs.html .

IEEE/The Open Group                  2017                           Y0(3POSIX)
