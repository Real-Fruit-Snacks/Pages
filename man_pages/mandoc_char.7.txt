NAME

mandoc_char
- mandoc special characters

DESCRIPTION

This page
documents the roff(7) escape sequences accepted by mandoc(1)
to represent special characters in mdoc(7) and man(7)
documents.

The rendering
depends on the mandoc(1) output mode; it can be inspected by
calling man(1) on the mandoc_char manual page with
different -T arguments. In ASCII output, the
rendering of some characters may be hard to interpret for
the reader. Many are rendered as descriptive strings like
"", "", or
"", which may look ugly, and many are
replaced by similar ASCII characters. In particular,
accented characters are usually shown without the accent.
For that reason, try to avoid using any of the special
characters documented here except those discussed in the
DESCRIPTION, unless they are essential for explaining
the subject matter at hand, for example when documenting
complicated mathematical functions.

In particular,
in English manual pages, do not use special-character escape
sequences to represent national language characters in
author names; instead, provide ASCII transcriptions of the
names.

Dashes and
Hyphens 
In typography there are different types of dashes of various
width: the hyphen (-), the en-dash (&ndash;), the em-dash
(&mdash;), and the mathematical minus sign (&minus;).

Hyphens are
used for adjectives; to separate the two parts of a compound
word; or to separate a word across two successive lines of
text. The hyphen does not need to be escaped:

blue-eyed 
lorry-driver

The en-dash is
used to separate the two elements of a range, or can be used
the same way as an em-dash. It should be written as
&rsquo;\(en&rsquo;:

pp. 95\(en97.

Go away \(en or else!

The em-dash can
be used to show an interruption or can be used the same way
as colons, semi-colons, or parentheses. It should be written
as &rsquo;\(em&rsquo;:

Three things
\(em apples, oranges, and bananas. 
This is not that \(em rather, this is that.

In roff(7)
documents, the minus sign is normally written as
&rsquo;\-&rsquo;. In manual pages, some style guides
recommend to also use &rsquo;\-&rsquo; if an ASCII 0x2d
&ldquo;hyphen-minus&rdquo; output glyph that can be copied
and pasted is desired in output modes supporting it, for
example in -T utf8 and -T html. But currently,
no practically relevant manual page formatter requires that
subtlety, so in manual pages, it is sufficient to write
plain &rsquo;-&rsquo; to represent hyphen, minus, and
hyphen-minus.

If a word on a
text input line contains a hyphen, a formatter may decide to
insert an output line break after the hyphen if that helps
filling the current output line, but the whole word would
overflow the line. If it is important that the word is not
broken across lines in this way, a zero-width space
(&rsquo;\&&rsquo;) can be inserted before or after the
hyphen. While mandoc(1) never breaks the output line after
hyphens adjacent to a zero-width space, after any of the
other dash- or hyphen-like characters represented by escape
sequences, or after hyphens inside words in macro arguments,
other software may not respect these rules and may break the
line even in such cases.

Some roff(7)
implementations contains dictionaries allowing to break the
line at syllable boundaries even inside words that contain
no hyphens. Such automatic hyphenation is not supported by
mandoc(1), which only breaks the line at whitespace, and
inside words only after existing hyphens.

Spaces

To separate words in normal text, for indenting and
alignment in literal context, and when none of the following
special cases apply, just use the normal space character
(&rsquo; &rsquo;).

When filling
text, output lines may be broken between words, i.e. at
space characters. To prevent a line break between two
particular words, use the unpaddable non-breaking space
escape sequence (&rsquo;\ &rsquo;) instead of the
normal space character. For example, the input string
&ldquo;number\ 1&rdquo; will be kept together as
&ldquo;number 1&rdquo; on the same output line.

On request and
macro lines, the normal space character serves as an
argument delimiter. To include whitespace into arguments,
quoting is usually the best choice; see the MACRO SYNTAX
section in roff(7). In some cases, using the non-breaking
space escape sequence (&rsquo;\ &rsquo;) may be
preferable.

To escape macro
names and to protect whitespace at the end of input lines,
the zero-width space (&rsquo;\&&rsquo;) is often useful.
For example, in mdoc(7), a normal space character can be
displayed in single quotes in either of the following
ways:

.Sq "
" 
.Sq \ \&

Quotes

On request and macro lines, the double-quote character
(&rsquo;"&rsquo;) is handled specially to allow
quoting. One way to prevent this special handling is by
using the &rsquo;\(dq&rsquo; escape sequence.

Note that on
text lines, literal double-quote characters can be used
verbatim. All other quote-like characters can be used
verbatim as well, even on request and macro lines.

Accents

In output modes supporting such special output characters,
for example -T pdf, and sometimes less consistently
in -T utf8, some roff(7) formatters convert the
following ASCII input characters to the following Unicode
special output characters:

In prose, this
automatic substitution is often desirable; but when these
characters have to be displayed as plain ASCII characters,
for example in source code samples, they require escaping to
render as follows:

Periods

The period (&rsquo;.&rsquo;) is handled specially at the
beginning of an input line, where it introduces a roff(7)
request or a macro, and when appearing alone as a macro
argument in mdoc(7). In such situations, prepend a
zero-width space (&rsquo;\&.&rsquo;) to make it behave
like normal text.

Do not use the
&rsquo;\.&rsquo; escape sequence. It does not prevent
special handling of the period.

Backslashes

To include a literal backslash (&rsquo;\&rsquo;) into the
output, use the (&rsquo;\e&rsquo;) escape sequence.

Note that
doubling it (&rsquo;\\&rsquo;) is not the right way to
output a backslash. Because mandoc(1) does not implement
full roff(7) functionality, it may work with mandoc(1), but
it may have weird effects on complete roff(7)
implementations.

SPECIAL CHARACTERS

Special
characters are encoded as &rsquo;\X&rsquo; (for a
one-character escape), &rsquo;\(XX&rsquo; (two-character),
and &rsquo;\[N]&rsquo; (N-character). For details, see the
Special Characters subsection of the roff(7)
manual.

Spaces,
non-breaking unless stated otherwise:

Lines:

Text
markers:

Legal
symbols:

Punctuation:

Quotes:

Brackets:

Arrows:

Logical:

Mathematical:

Ligatures:

Accents:

Accented
letters:

Special
letters:

Currency:

Units:

Greek
letters:

PREDEFINED STRINGS

Predefined
strings are inherited from the macro packages of historical
troff implementations. They are not recommended for
use, as they differ across implementations. Manuals using
these predefined strings are almost certainly not
portable.

Their syntax is
similar to special characters, using &rsquo;\*X&rsquo; (for
a one-character escape), &rsquo;\*(XX&rsquo;
(two-character), and &rsquo;\*[N]&rsquo; (N-character).

UNICODE CHARACTERS

The escape
sequences

\[uXXXX] and
\C'uXXXX'

are interpreted
as Unicode codepoints. The codepoint must be in the range
above U+0080 and less than U+10FFFF. For compatibility, the
hexadecimal digits &rsquo;A&rsquo; to &rsquo;F&rsquo; must
be given as uppercase characters, and points must be
zero-padded to four characters; if greater than four
characters, no zero padding is allowed. Unicode surrogates
are not allowed.

NUMBERED CHARACTERS

For backward
compatibility with existing manuals, mandoc(1) also supports
the

\N'number'
and \[charnumber

]

escape
sequences, inserting the character number from the
current character set into the output. Of course, this is
inherently non-portable and is already marked as deprecated
in the Heirloom roff manual; on top of that, the second form
is a GNU extension. For example, do not use \N'34' or
\[char34], use \(dq, or even the plain &rsquo;"&rsquo;
character where possible.

COMPATIBILITY

This section
documents compatibility between mandoc and other troff
implementations, at this time limited to GNU troff
("groff").

-

The \N'' escape sequence is limited to printable
characters; in groff, it accepts arbitrary character
numbers. 

-

In -Tascii, the \(ss, \(nm, \(nb, \(nc, \(ib,
\(ip, \(pp, \[sum], \[product], \[coproduct], \(gr, \(-h,
and \(a. special characters render differently between
mandoc and groff.

-

In -Thtml, the \(~=, \(nb, and \(nc special
characters render differently between mandoc and groff.

-

The -Tps and -Tpdf modes format like
-Tascii instead of rendering glyphs as in groff.

-

The \[radicalex], \[sqrtex], and \(ru special characters
have been omitted from mandoc either because they are poorly
documented or they have no known representation.

SEE ALSO

mandoc(1),
man(7), mdoc(7), roff(7)

AUTHORS

The
mandoc_char manual page was written by Kristaps
Dzonsons kristaps [AT] bsd.lv>.

CAVEATS

The predefined
string &rsquo;\*(Ba&rsquo; mimics the behaviour of the
&rsquo;|&rsquo; character in mdoc(7); thus, if you wish to
render a vertical bar with no side effects, use the
&rsquo;\(ba&rsquo; escape.