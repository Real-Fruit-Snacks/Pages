NAME

tethereal
&minus; Dump and analyze network traffic

SYNOPSYS

tethereal
[ &minus;a capture autostop condition ] ...
[ &minus;b number of ring buffer files [:duration] ]
[ &minus;c count ]
[ &minus;d , ]> [ &minus;D ]
[ &minus;f capture filter expression ]
[ &minus;F file format ]
[ &minus;h ]
[ &minus;i interface ]
[ &minus;l ] [ &minus;L ]
[ &minus;n ]
[ &minus;N resolving flags ]
[ &minus;o preference setting ] ...
[ &minus;p ] [ &minus;q ]
[ &minus;r infile ]
[ &minus;R display filter expression ]
[ &minus;s snaplen ]
[ &minus;S ]
[ &minus;t time stamp format ]
[ &minus;T pdml&#9130;psml&#9130;ps&#9130;text ]
[ &minus;v ] [ &minus;V ]
[ &minus;w savefile ]
[ &minus;x ]
[ &minus;y link type ]
[ &minus;z statistics-string ]
[ filter expression ]

DESCRIPTION

Tethereal
is a network protocol analyzer. It lets you capture packet
data from a live network, or read packets from a previously
saved capture file, either printing a decoded form of those
packets to the standard output or writing the packets to a
file. Tethereal&rsquo;s native capture file format is
libpcap format, which is also the format used by
tcpdump and various other tools.

Ethereal
can read / import the following file formats: 
* libpcap/WinPcap, tcpdump and various other tools using
tcpdump&rsquo;s 
capture format 
* snoop and atmsnoop 
* Shomiti/Finisar Surveyor captures 
* Novell LANalyzer captures 
* Microsoft Network Monitor captures 
* AIX &rsquo;s iptrace captures 
* Cinco Networks NetXRay captures 
* Network Associates Windows-based Sniffer captures

* Network General/Network Associates DOS-based
Sniffer (compressed or 
uncompressed) captures 
* AG Group/WildPackets 

EtherPeek/TokenPeek/AiroPeek/EtherHelp/PacketGrabber
captures 
* RADCOM &rsquo;s
WAN/LAN analyzer captures 
* Network Instruments Observer version 9 captures

* Lucent/Ascend router debug output 
* files from HP&minus;UX &rsquo;s
nettl 
* Toshiba&rsquo;s ISDN routers dump
output 
* the output from i4btrace from the
ISDN4BSD project 
* traces from the EyeSDN USB S0. 
* the output in IPLog format from the Cisco Secure
Intrusion Detection 
System 
* pppd logs (pppdump format) 
* the output from VMS &rsquo;s
TCPIPtrace/TCPtrace/
UCX$TRACE utilities 
* the text output from the DBS
Etherwatch VMS utility 
* Visual Networks&rsquo; Visual UpTime traffic
capture 
* the output from CoSine L2 debug 
* the output from Accellent&rsquo;s 5Views
LAN agents 
* Endace Measurement Systems&rsquo; ERF
format captures 
* Linux Bluez Bluetooth stack hcidump &minus;w
traces

There is no
need to tell Tethereal what type of file you are
reading; it will determine the file type by itself.
Tethereal is also capable of reading any of these
file formats if they are compressed using gzip.
Tethereal recognizes this directly from the file; the
&rsquo;.gz&rsquo; extension is not required for this
purpose.

If the
&minus;w flag is not specified, Tethereal
prints a decoded form of the packets it captures or reads;
otherwise, it writes those packets to the file specified by
that flag.

When printing a
decoded form of packets, Tethereal prints, by
default, a summary line containing the fields specified by
the preferences file (which are also the fields displayed in
the packet list pane in Ethereal), although if
it&rsquo;s printing packets as it captures them, rather than
printing packets from a saved capture file, it won&rsquo;t
print the "frame number" field. If the
&minus;V flag is specified, it prints instead a view
of the details of the packet, showing all the fields of all
protocols in the packet.

When writing
packets to a file, Tethereal, by default, writes the
file in libpcap format, and writes all of the packets
it sees to the output file. The &minus;F flag can be
used to specify the format in which to write the file. The
following output formats are supported: 
* libpcap &minus; libpcap (tcpdump, Ethereal, etc.)

* rh6_1libpcap &minus; Red Hat Linux 6.1 libpcap
(tcpdump) 
* suse6_3libpcap &minus; SuSE Linux 6.3 libpcap
(tcpdump) 
* modlibpcap &minus; modified libpcap (tcpdump) 
* nokialibpcap &minus; Nokia libpcap (tcpdump) 
* lanalyzer &minus; Novell LANalyzer 
* ngsniffer &minus; Network Associates Sniffer
(DOS&minus;based) 
* snoop &minus; Sun snoop 
* netmon1 &minus; Microsoft Network Monitor 1.x 
* netmon2 &minus; Microsoft Network Monitor 2.x 
* ngwsniffer_1_1 &minus; Network Associates Sniffer
(Windows&minus;based) 1.1 
* ngwsniffer_2_0 &minus; Network Associates Sniffer
(Windows&minus;based) 2.00x 
* visual &minus; Visual Networks traffic capture

This list is
also displayed by the &minus;h flag.

Read filters in
Tethereal, which allow you to select which packets
are to be decoded or written to a file, are very powerful;
more fields are filterable in Tethereal than in other
protocol analyzers, and the syntax you can use to create
your filters is richer. As Tethereal progresses,
expect more and more protocol fields to be allowed in read
filters.

Packet
capturing is performed with the pcap library. The capture
filter syntax follows the rules of the pcap library. This
syntax is different from the read filter syntax. A read
filter can also be specified when capturing, and only
packets that pass the read filter will be displayed or saved
to the output file; note, however, that capture filters are
much more efficient than read filters, and it may be more
difficult for Tethereal to keep up with a busy
network if a read filter is specified for a live
capture.

Compressed file
support uses (and therefore requires) the zlib library. If
the zlib library is not present, Tethereal will
compile, but will be unable to read compressed files.

A capture or
read filter can either be specified with the &minus;f
or &minus;R option, respectively, in which case the
entire filter expression must be specified as a single
argument (which means that if it contains spaces, it must be
quoted), or can be specified with command-line arguments
after the option arguments, in which case all the arguments
after the filter arguments are treated as a filter
expression. Capture filters are supported only when doing a
live capture; read filters are supported when doing a live
capture and when reading a capture file, but require
Tethereal to do more work when filtering, so you might be
more likely to lose packets under heavy load if you&rsquo;re
using a read filter. If the filter is specified with
command-line arguments after the option arguments,
it&rsquo;s a capture filter if a capture is being done
(i.e., if no &minus;r flag was specified) and a read
filter if a capture file is being read (i.e., if a
&minus;r flag was specified).

OPTIONS

&minus;a

Specify a criterion that
specifies when Tethereal is to stop writing to a
capture file. The criterion is of the form
test:value, where test is one
of: 

duration

Stop writing to a capture file
after value seconds have elapsed.

filesize

Stop writing to a capture file
after it reaches a size of value kilobytes (where a
kilobyte is 1000 bytes, not 1024 bytes).

&minus;b

If a maximum capture file size was specified, cause
Tethereal to run in "ring buffer" mode,
with the specified number of files. In "ring
buffer" mode, Tethereal will write to several
capture files. Their name is based on the number of the file
and on the creation date and time.

When the first
capture file fills up, Tethereal will switch to
writing to the next file, until it fills up the last file,
at which point it&rsquo;ll discard the data in the first
file (unless 0 is specified, in which case, the number of
files is unlimited) and start writing to that file and so
on.

If the optional
duration is specified, Tethereal will switch also to
the next file when the specified number of seconds has
elapsed even if the current file is not completely fills
up.

You can only
save files in libpcap format when using a ring
buffer.

&minus;c

Set the default number of
packets to read when capturing live data.

&minus;d

Specify that if the layer type in question (for example,
tcp.port or udp.port for a TCP
or UDP port number) has the specified
selector value, packets should be dissected as the specified
protocol. 

Example:
&minus;d tcp.port==8888,http will decode any traffic
running over TCP port 8888 as
HTTP .

&minus;D

Print a list of the interfaces
on which Tethereal can capture, and exit. For each
network interface, a number and an interface name, possibly
followed by a text description of the interface, is printed.
The interface name or the number can be supplied to the
&minus;i flag to specify an interface on which to
capture. 

This can be
useful on systems that don&rsquo;t have a command to list
them (e.g., Windows systems, or UNIX systems
lacking ifconfig \&minus;a); the number can be useful
on Windows 2000 and later systems, where the interface name
is a somewhat complex string.

Note that
"can capture" means that Tethereal was able
to open that device to do a live capture; if, on your
system, a program doing a network capture must be run from
an account with special privileges (for example, as root),
then, if Tethereal is run with the &minus;D
flag and is not run from such an account, it will not list
any interfaces.

&minus;f

Set the capture filter
expression. 

&minus;F

Set the file format of the output capture file.

&minus;h

Print the version and options and exits.

&minus;i

Set the name of the network interface or pipe to use for
live packet capture.

Network
interface names should match one of the names listed in
"tethereal &minus;D" (described above); a
number, as reported by "tethereal
&minus;D", can also be used. If you&rsquo;re using
UNIX , "netstat &minus;i" or
"ifconfig &minus;a" might also work to list
interface names, although not all versions of
UNIX support the &minus;a flag to
ifconfig.

If no interface
is specified, Tethereal searches the list of
interfaces, choosing the first non-loopback interface if
there are any non-loopback interfaces, and choosing the
first loopback interface if there are no non-loopback
interfaces; if there are no interfaces, Tethereal
reports an error and doesn&rsquo;t start the capture.

Pipe names
should be either the name of a FIFO (named
pipe) or &rsquo;&rsquo;&minus;&rsquo;&rsquo; to read data
from the standard input. Data read from pipes must be in
standard libpcap format.

&minus;l

Flush the standard output after
the information for each packet is printed. (This is not,
strictly speaking, line-buffered if &minus;V was
specified; however, it is the same as line-buffered if
&minus;V wasn&rsquo;t specified, as only one line is
printed for each packet, and, as &minus;l is normally
used when piping a live capture to a program or script, so
that output for a packet shows up as soon as the packet is
seen and dissected, it should work just as well as true
line&minus;buffering. We do this as a workaround for a
deficiency in the Microsoft Visual C ++ C
library.) 

This may be
useful when piping the output of Tethereal to another
program, as it means that the program to which the output is
piped will see the dissected data for a packet as soon as
Tethereal sees the packet and generates that output,
rather than seeing it only when the standard output buffer
containing that data fills up.

&minus;L

List the data link types
supported by the interface and exit.

&minus;n

Disable network object name resolution (such as
hostname, TCP and UDP port
names). 

&minus;N

Turn on name resolving for particular types of addresses
and port numbers, with name resolving for other types of
addresses and port numbers turned off; the argument is a
string that may contain the letters m to enable
MAC address resolution, n to enable
network address resolution, and t to enable
transport-layer port number resolution. This overrides
&minus;n if both &minus;N and &minus;n
are present. The letter C enables concurrent
(asynchronous) DNS lookups.

&minus;o

Set a preference value, overriding the default value and
any value read from a preference file. The argument to the
flag is a string of the form
prefname:value, where prefname
is the name of the preference (which is the same name that
would appear in the preference file), and value is
the value to which it should be set.

&minus;p

Don&rsquo;t put the interface into promiscuous
mode. Note that the interface might be in promiscuous mode
for some other reason; hence, &minus;p cannot be used
to ensure that the only traffic that is captured is traffic
sent to or from the machine on which Tethereal is
running, broadcast traffic, and multicast traffic to
addresses received by that machine.

&minus;q

When capturing packets, don&rsquo;t display the
continuous count of packets captured that is normally shown
when saving a capture to a file; instead, just display, at
the end of the capture, a count of packets captured. On
systems that support the SIGINFO signal, such
as various BSDs, typing your "status" character
(typically control&minus;T, although it might be set to
"disabled" by default on at least some BSDs, so
you&rsquo;d have to explicitly set it to use it) will cause
the current count to be displayed.

When reading a
capture file, don&rsquo;t print packet information; this is
useful if you&rsquo;re using a &minus;z flag to
calculate statistics and don&rsquo;t want the packet
information printed, just the statistics.

&minus;r

Read packet data from
infile. 

&minus;R

Cause the specified filter (which uses the syntax of
read filters, rather than that of capture filters) to be
applied before printing a decoded form of packets or writing
packets to a file; packets not matching the filter are
discarded rather than being printed or written.

&minus;s

Set the default snapshot length to use when capturing
live data. No more than snaplen bytes of each network
packet will be read into memory, or saved to disk.

&minus;S

Decode and display packets even while writing to
file. 

&minus;t

Set the format of the packet timestamp printed in
summary lines. The format can be one of &rsquo;r&rsquo;
(relative), &rsquo;a&rsquo; (absolute), &rsquo;ad&rsquo;
(absolute with date), or &rsquo;d&rsquo; (delta). The
relative time is the time elapsed between the first packet
and the current packet. The absolute time is the actual time
the packet was captured, with no date displayed; the
absolute date and time is the actual time and date the
packet was captured. The delta time is the time since the
previous packet was captured. The default is relative.

&minus;T

Set the format of the output when viewing packet data.
The options are:

pdml

Packet Details Markup Language,
an XML-based format for the details of a decoded packet.
This information is equivalent to the packet details printed
with the &minus;V flag.

psml

Packet Summary Markup Language,
an XML-based format for the summary information of a decoded
packet. This information is equivalent to the information
shown in the one-line summary printed by default.

ps

PostScript for a human-readable one-line summary of each
of the packets, or a multi-line view of the details of each
of the packets, depending on whether the &minus;V
flag was specified.

text

Text of a human-readable
one-line summary of each of the packets, or a multi-line
view of the details of each of the packets, depending on
whether the &minus;V flag was specified. This is the
default.

&minus;v

Print the version and exit.

&minus;V

Cause Tethereal to print a view of the details of
the packet rather than a one-line summary of the packet.

&minus;w

Write packet data to savefile or to the standard
output if savefile is "&minus;".

&minus;x

Cause Tethereal to print a hex and
ASCII dump of the packet data after printing
the summary or details.

&minus;y

Set the data link type to use while capturing packets.
The values reported by &minus;L are the values that
can be used.

&minus;z

Get Tethereal to collect various types of
statistics and display the result after finishing reading
the capture file. Use the &minus;q flag if
you&rsquo;re reading a capture file and only want the
statistics printed, not any per-packet information.

Note that the
&minus;z proto option is different &minus; it
doesn&rsquo;t cause statistics to be gathered and printed
when the capture is complete, it modifies the regular packet
summary output to include the values of fields specified
with the option. Therefore you must not use the
&minus;q option, as that option would suppress the
printing of the regular packet summary output, and must also
not use the &minus;V option, as that would cause
packet detail information rather than packet summary
information to be printed.

Currently
implemented statistics are:

&minus;z
dcerpc,rtt,uuid,major.minor[,filter]

Collect
call/reply RTT data for DCERPC
interface uuid, version major.minor.
Data collected is number of calls for each procedure,
MinRTT, MaxRTT and AvgRTT. Example: use &minus;z
dcerpc,rtt,12345778&minus;1234&minus;abcd&minus;ef00&minus;0123456789ac,1.0
to collect data for CIFS SAMR Interface. This
option can be used multiple times on the command line.

If the optional
filterstring is provided, the stats will only be calculated
on those calls that match that filter. Example: use
&minus;z
dcerpc,rtt,12345778&minus;1234&minus;abcd&minus;ef00&minus;0123456789ac,1.0,ip.addr==1.2.3.4
to collect SAMR RTT statistics for a specific
host.

&minus;z
io,phs[,filter]

Create Protocol
Hierarchy Statistics listing both number of packets and
bytes. If no filter is specified the statistics will
be calculated for all packets. If a filters is
specified statistics will be only calculated for those
packets that match the filter.

This option can
be used multiple times on the command line.

&minus;z
io,stat,interval[,filter][,filter][,filter]...

Collect
packet/bytes statistics for the capture in intervals of
interval seconds. Intervals can be specified
either as whole or fractional seconds. Interval can be
specified in ms resolution.

If no
filter is specified the statistics will be calculated
for all packets. If one or more filters are specified
statistics will be calculated for all filters and presented
with one column of statistics for each filter.

This option can
be used multiple times on the command line.

Example:
&minus;z io,stat,1,ip.addr==1.2.3.4 to generate 1
second statistics for all traffic to/from host 1.2.3.4.

Example:
&minus;z
"io,stat,0.001,smb&&ip.addr==1.2.3.4"
to generate 1ms statistics for all SMB
packets to/from host 1.2.3.4.

The examples
above all use the standard syntax for generating statistics
which only calculates the number of packets and bytes in
each interval.

io,stat
can also do much more statistics and calculate
COUNT (), SUM
(), MIN (), MAX
(), and AVG () using a slightly
different filter syntax:

  [COUNT&#9130;SUM&#9130;MIN&#9130;MAX&#9130;AVG]()

One important
thing to note here is that the field that the calculation is
based on MUST also be part of the filter
string or else the calculation will fail.

So: &minus;z
io,stat,0.010,AVG(smb.time) does not work. Use
&minus;z io,stat,0.010,AVG(smb.time)smb.time instead.
Also be aware that a field can exist multiple times inside
the same packet and will then be counted multiple times in
those packets.

COUNT
() can be used on any type which has a display
filter name. It will count how many times this particular
field is encountered in the filtered packet list.

Example:
&minus;z io,stat,0.010,COUNT(smb.sid)smb.sid This
will count the total number of SIDs seen in each 10ms
interval.

SUM
() can only be used on named fields of integer
type. This will sum together every occurence of this fields
value for each interval.

Example:
&minus;z
io,stat,0.010,SUM(frame.pkt_len)frame.pkt_len This will
report the total number of bytes seen in all the packets
within an interval.

MIN/MAX/AVG
() can only be used on named fields that are
either integers or relative time fields. This will calculate
maximum/minimum or average seen in each interval. If the
field is a relative time field the output will be presented
in seconds and three digits after the decimal point. The
resolution for time calculations is 1ms and anything smaller
will be truncated.

Example:
&minus;z
"io,stat,0.010,smb.time&&ip.addr==1.1.1.1,MIN(smb.time)smb.time&&ip.addr==1.1.1.1,MAX(smb.time)smb.time&&ip.addr==1.1.1.1,MAX(smb.time)smb.time&&ip.addr==1.1.1.1"

This will
calculate statistics for all smb response times we see
to/from host 1.1.1.1 in 10ms intervals. The output will be
displayed in 4 columns; number of packets/bytes, minimum
response time, maximum response time and average response
time.

&minus;z
conv,type[,filter]

Create a table
that lists all conversations that could be seen in the
capture. type specifies which type of conversation we
want to generate the statistics for; currently the supported
ones are

  "eth"   Ethernet
  "fc"    Fibre Channel
  "fddi"  FDDI
  "ip"    IP addresses
  "ipx"   IPX addresses
  "tcp"   TCP/IP socket pairs  Both IPv4 and IPv6 are supported
  "tr"    Token Ring
  "udp"   UDP/IP socket pairs  Both IPv4 and IPv6 are supported

If the optional
filter string is specified, only those packets that match
the filter will be used in the calculations.

The table is
presented with one line for each conversation and displays
number of packets/bytes in each direction as well as total
number of packets/bytes. The table is sorted according to
total number of bytes.

&minus;z
proto,colinfo,filter,field

Append all
field values for the packet to the Info column of the
one-line summary output. This feature can be used to append
arbitrary fields to the Info column in addition to the
normal content of that column. field is the
display-filter name of a field which value should be placed
in the Info column. filter is a filter string that
controls for which packets the field value will be presented
in the info column. field will only be presented in
the Info column for the packets which match
filter.

NOTE:
In order for Tethereal to be able to extract the
field value from the packet, field
MUST be part of the filter string. If
not, Tethereal will not be able to extract its
value.

For a simple
example to add the "nfs.fh.hash" field to the Info
column for all packets containing the
"nfs.fh.hash" field, use

&minus;z
proto,colinfo,nfs.fh.hash,nfs.fh.hash

To put
"nfs.fh.hash" in the Info column but only for
packets coming from host 1.2.3.4 use:

&minus;z
"proto,colinfo,nfs.fh.hash &&
ip.src==1.2.3.4,nfs.fh.hash"

This option can
be used multiple times on the command line.

&minus;z
rpc,rtt,program,version[,filter]

Collect
call/reply RTT data for
program/version. Data collected is number of
calls for each procedure, MinRTT, MaxRTT and AvgRTT.
Example: use &minus;z rpc,rtt,100003,3 to collect
data for NFS v3. This option can be used
multiple times on the command line.

If the optional
filterstring is provided, the stats will only be calculated
on those calls that match that filter. Example: use
&minus;z rpc,rtt,100003,3,nfs.fh.hash==0x12345678 to
collect NFS v3 RTT statistics
for a specific file.

&minus;z
rpc,programs

Collect
call/reply RTT data for all known ONC-RPC
programs/versions. Data collected is number of calls for
each protocol/version, MinRTT, MaxRTT and AvgRTT. This
option can only be used once on the command line.

&minus;z
smb,rtt[,filter]

Collect
call/reply RTT data for SMB .
Data collected is number of calls for each
SMB command, MinRTT, MaxRTT and AvgRTT.
Example: use &minus;z smb,rtt. The data will be
presented as separate tables for all normal
SMB commands, all Transaction2 commands and
all NT Transaction commands. Only those
commands that are seen in the capture will have its stats
displayed. Only the first command in a xAndX command chain
will be used in the calculation. So for common
SessionSetupAndX + TreeConnectAndX chains, only the
SessionSetupAndX call will be used in the statistics. This
is a flaw that might be fixed in the future.

This option can
be used multiple times on the command line.

If the optional
filterstring is provided, the stats will only be calculated
on those calls that match that filter. Example: use
&minus;z "smb,rtt,ip.addr==1.2.3.4" to only
collect stats for SMB packets echanged by the
host at IP address 1.2.3.4 .

&minus;z
smb,sids

When this
feature is used Tethereal will print a report with
all the discovered SID and account name
mappings. Only those SIDs where the account name is known
will be presented in the table.

For this
feature to work you will need to either to enable
"Edit/Preferences/Protocols/SMB/Snoop
SID to name mappings" in the preferences
or you can override the preferences by specifying
&minus;o "smb.sid_name_snooping:TRUE" on
the Tethereal command line.

The current
methods used by Tethereal to find the
SID&minus; >name mapping is relatively
restricted but is hoped to be expanded in the future.

&minus;z
mgcp,rtd[,filter]

Collect
requests/response RTD (Response Time Delay)
data for MGCP . This is similar to
&minus;z smb,rtt). Data collected is number of calls
for each known MGCP Type, MinRTD, MaxRTD and
AvgRTD. Additionally you get the number of duplicate
requests/responses, unresponded requests, responses ,which
don&rsquo;t match with any request. Example: use &minus;z
mgcp,rtd.

This option can
be used multiple times on the command line.

If the optional
filterstring is provided, the stats will only be calculated
on those calls that match that filter. Example: use
&minus;z "mgcp,rtd,ip.addr==1.2.3.4" to
only collect stats for MGCP packets exchanged
by the host at IP address 1.2.3.4 .

&minus;z
h225,counter[,filter]

Count ITU-T
H.225 messages and their reasons. In the first column you
get a list of H.225 messages and H.225 message reasons,
which occur in the current capture file. The number of
occurences of each message or reason is displayed in the
second column.

Example: use
&minus;z h225,counter.

This option can
be used multiple times on the command line.

If the optional
filterstring is provided, the stats will only be calculated
on those calls that match that filter. Example: use
&minus;z "h225,counter,ip.addr==1.2.3.4" to
only collect stats for H.225 packets exchanged by the host
at IP address 1.2.3.4 .

&minus;z
h225,srt[,filter]

Collect
requests/response SRT (Service Response Time)
data for ITU-T H.225 RAS . Data collected is
number of calls of each ITU-T H.225 RAS
Message Type, Minimum SRT , Maximum
SRT , Average SRT , Minimum in
Frame, and Maximum in Frame. You will also get the number of
Open Requests (Unresponded Requests), Discarded Responses
(Responses without matching request) and Duplicate Messages.
Example: use &minus;z h225,srt.

This option can
be used multiple times on the command line.

If the optional
filterstring is provided, the stats will only be calculated
on those calls that match that filter. Example: use
&minus;z "h225,srt,ip.addr==1.2.3.4" to
only collect stats for ITU-T H.225 RAS
packets exchanged by the host at IP address
1.2.3.4 .

&minus;z
sip,stat[,filter]

This option
will activate a counter for SIP messages. You
will get the number of occurences of each SIP
Method and of each SIP Status&minus;Code.
Additionally you also get the number of resent
SIP Messages (only for SIP
over UDP ).

Example: use
&minus;z sip,stat.

This option can
be used multiple times on the command line.

If the optional
filter string is provided, the stats will only be calculated
on those calls that match that filter. Example: use
&minus;z "sip,stat,ip.addr==1.2.3.4" to
only collect stats for SIP packets exchanged
by the host at IP address 1.2.3.4 .

CAPTURE FILTER SYNTAX

See manual page
of tcpdump(8).

READ FILTER SYNTAX

For a complete
table of protocol and protocol fields that are filterable in
Tethereal see ethereal&minus;filter(4).

FILES

The
ethereal.conf file, which is installed in the
etc directory under the main installation directory
(for example, /usr/local/etc) on UNIX-compatible
systems, and in the main installation directory (for
example, C:\Program Files\Ethereal) on Windows
systems, and the personal preferences file, which is
$HOME/.ethereal/preferences on UNIX-compatible
systems and %APPDATA%\Ethereal\preferences (or, if
%APPDATA% isn&rsquo;t defined,
%USERPROFILE%\Application Data\Ethereal\preferences)
on Windows systems, contain system-wide and personal
preference settings, respectively. The file contains
preference settings of the form
prefname:value, one per line, where
prefname is the name of the preference (which is the
same name that would appear in the preference file), and
value is the value to which it should be set; white
space is allowed between : and value. A
preference setting can be continued on subsequent lines by
indenting the continuation lines with white space. A
# character starts a comment that runs to the end of
the line.

The system-wide
preference file is read first, if it exists, overriding
Tethereal&rsquo;s default values; the personal
preferences file is then read, if it exists, overriding
default values and values read from the system-wide
preference file.

The disabled
protocols file, which is
$HOME/.ethereal/disabled_protos on UNIX-compatible
systems and %APPDATA%\Ethereal\disabled_protos (or,
if %APPDATA% isn&rsquo;t defined,
%USERPROFILE%\Application
Data\Ethereal\disabled_protos) on Windows systems,
contain a list of protocols that have been disabled, so that
their dissectors are never called. The file contains
protocol names, one per line, where the protocol name is the
same name that would be used in a display filter for the
protocol. A # character starts a comment that runs to
the end of the line.

The
ethers file, which is found in the /etc
directory on UNIX-compatible systems, and in the main
installation directory (for example, C:\Program
Files\Ethereal) on Windows systems, is consulted to
correlate 6&minus;byte hardware addresses to names. If an
address is not found in the ethers file, the
$HOME/.ethereal/ethers file on UNIX-compatible
systems, and the %APPDATA%\Ethereal\ethers file (or,
if %APPDATA% isn&rsquo;t defined, the
%USERPROFILE%\Application Data\Ethereal\ethers file)
on Windows systems is consulted next. Each line contains one
hardware address and name, separated by whitespace. The
digits of the hardware address are separated by either a
colon (:), a dash (&minus;), or a period (.). The following
three lines are valid lines of an ethers file:

  ff:ff:ff:ff:ff:ff          Broadcast
  c0-00-ff-ff-ff-ff          TR_broadcast
  00.00.00.00.00.00          Zero_broadcast

The
manuf file, which is installed in the etc
directory under the main installation directory (for
example, /usr/local/etc) on UNIX-compatible systems,
and in the main installation directory (for example,
C:\Program Files\Ethereal) on Windows systems,
matches the 3&minus;byte vendor portion of a 6&minus;byte
hardware address with the manufacturer&rsquo;s name; it can
also contain well-known MAC addresses and
address ranges specified with a netmask. The format of the
file is the same as the ethers file, except that
entries of the form

  00:00:0C      Cisco

can be
provided, with the 3&minus;byte OUI and the
name for a vendor, and entries of the form

  00-00-0C-07-AC/40     All-HSRP-routers

can be
specified, with a MAC address and a mask
indicating how many bits of the address must match. Trailing
zero bytes can be omitted from address ranges. That entry,
for example, will match addresses from
00&minus;00&minus;0C&minus;07&minus;AC&minus;00 through
00&minus;00&minus;0C&minus;07&minus;AC&minus;FF. The mask
need not be a multiple of 8.

The
ipxnets file, which is found in the /etc
directory on UNIX-compatible systems, and in the main
installation directory (for example, C:\Program
Files\Ethereal) on Windows systems, correlates
4&minus;byte IPX network numbers to names. If
a network number is not found in the ipxnets file,
the $HOME/.ethereal/ipxnets file on UNIX-compatible
systems, and the %APPDATA%\Ethereal\ipxnets file (or,
if %APPDATA% isn&rsquo;t defined, the
%USERPROFILE%\Application Data\Ethereal\ipxnets file)
on Windows systems, is consulted next. The format is the
same as the ethers file, except that each address if
four bytes instead of six. Additionally, the address can be
represented a single hexadecimal number, as is more common
in the IPX world, rather than four hex
octets. For example, these four lines are valid lines of an
ipxnets file.

  C0.A8.2C.00              HR
  c0-a8-1c-00              CEO
  00:00:BE:EF              IT_Server1
  110f                     FileServer3

SEE ALSO

ethereal&minus;filter(4)
ethereal(1), editcap(1), tcpdump(8),
pcap(3)

NOTES

Tethereal
is part of the Ethereal distribution. The latest
version of Ethereal can be found at
http://www.ethereal.com.

AUTHORS

Tethereal
uses the same packet dissection code that Ethereal
does, as well as using many other modules from
Ethereal; see the list of authors in the
Ethereal man page for a list of authors of that
code.