NAME

winedbg &minus;
Wine&rsquo;s debugger

SYNOPSIS

winedbg
[ --auto | --gdb [ options ] ] [
program name [ program arguments ] |
pid ]

DESCRIPTION

winedbg
is a debugger for Wine. It allows:

+ debugging native Win32
applications 
+ debugging Winelib applications. 
+ being a drop-in replacement for Dr Watson

MODES

winedbg
can be used in three modes. The first argument to the
program determines the mode winedbg will run in. 
default

Without any explicit mode, this
is standard winedbg operating mode. winedbg
will act as the front end for the user.

--auto

This mode is used when winedbg is setup in
AeDebug registry entry as the default debugger.
winedbg will then display basic information about a
crash. This is usefull for users who don&rsquo;t want to
debug a crash, but rather gather relevant information about
the crash to be sent to developers.

--gdb

winedbg will be used as a proxy for gdb.
gdb will be the front end for command handling, and
winedbg will proxy all debugging requests from
gdb to the Win32 APIs.

OPTIONS

Only the
gdb proxy mode allows some options: 
--no-start

started. Relevant information
for starting gdb are printed on screen. This is
somehow usefull when not directly using gdb but some
graphical front-ends, like ddd or kgbd.

--with-xterm

This will run gdb in its
own xterm instead of using the current Unix console for
textual display.

The rest of the
command line, when passed, is used to identify which
programs, if any, has to debugged: 
program name

This is the name of an
executable to start for a debugging session. winedbg
will actually create a process with this executable. If
programs arguments are also given, they will be used
as arguments for creating the process to be debugged.

pid

gdb will attach to the process which pid is
pid (pids refer to Win32 pids, not Unix pids). Use
the info proc winedbg command to list running
processes and their Win32 pids.

defaut

If nothing is specified, you will enter the debugger
without any run nor attached process. You&rsquo;ll have to
do the job yourself.

COMMANDS

Default
mode: 
Most of commands used in winedbg are similar to the
ones from gdb. Please refer to the gdb
documentations for some more details. See the
gdb differences section later on to get a list
of variations from gdb commands.

Misc.
commands

abort

Aborts the debugger.

quit

Exits the debugger.

attach N

Attach to a Wine-process
(N is its ID, numeric or hexadecimal). IDs can be
obtained using the info process command. Note
the info process command returns hexadecimal
values

detach

Detach from a Wine-process.

Help
commands

help

Prints some help on the
commands. 

help info

Prints some help on info
commands

Flow control
commands

cont

Continue execution until next breakpoint or
exception. 

pass

Pass the exception event up to the filter chain.

step

Continue execution until next C line of code (enters
function call)

next

Continue execution until next C line of code
(doesn&rsquo;t enter function call)

stepi

Execute next assembly instruction (enters function
call) 

nexti

Execute next assembly instruction (doesn&rsquo;t enter
function call)

finish

Excute until return of current function is reached.

cont,
step, next, stepi, nexti can be
postfixed by a number (N), meaning that the command must be
executed N times before control is returned to the user.

Breakpoints,
watchpoints 
enable N

Enables (break|watch)-point
#N

disable

Disables (break|watch)-point
#N

delete

Deletes (break|watch)-point #N

cond N

Removes any existing condition to (break|watch)-point
N 

cond N 

Adds condition
 to (break|watch)-point #N.
 will be evaluated each time the
(break|watch)-point is hit. If the result is a zero value,
the breakpoint isn&rsquo;t triggered.

break * N

Adds a breakpoint at address
N

break 

Adds a breakpoint at the
address of symbol 

break

Adds a breakpoint at the line N inside symbol
. 

break N

Adds a breakpoint at line
N of current source file.

break

Adds a breakpoint at current PC address.

watch * N

Adds a watch command (on write)
at address N (on 4 bytes).

watch 

Adds a watch command (on write)
at the address of symbol . Size depends on
size of .

info break

Lists all (break|watch)-points
(with their state).

You can use the
symbol EntryPoint to stand for the entry point of the
Dll.

When setting a
(break|watch)-point by , if the symbol
cannot be found (for example, the symbol is contained in a
not yet loaded module), winedbg will recall the name
of the symbol and will try to set the breakpoint each time a
new module is loaded (until it succeeds).

Stack
manipulation

bt

Print calling stack of current thread.

bt N

Print calling stack of thread of ID N. Note: this
doesn&rsquo;t change the position of the current frame as
manipulated by the up & dn commands).

up

Goes up one frame in current thread&rsquo;s stack

up N

Goes up N frames in current thread&rsquo;s
stack 

dn

Goes down one frame in current thread&rsquo;s stack

dn N

Goes down N frames in current thread&rsquo;s
stack 

frame

Sets N as the current frame for current
thread&rsquo;s stack.

info locals

Prints information on local
variables for current function frame.

Directory
& source file manipulation 
show dir

Prints the list of dir:s where
source files are looked for.

dir 

Adds  to
the list of dir:s where to look for source files

dir

Deletes the list of dir:s where to look for source
files 

symbolfile 

Loads external symbol
definition symbolfile 

symbolfile  N

Loads external symbol
definition symbolfile  (applying an
offset of N to addresses)

list

Lists 10 source lines forwards from current
position. 

list -

Lists 10 source lines backwards from current
position 

list N

Lists 10 source lines from line #N in current
file 

list :N

Lists 10 source lines from line
#N in file 

list 

Lists 10 source lines of
function 

list * N

Lists 10 source lines from
address N

You can specify
the end target (to change the 10 lines value) using the
&rsquo;,&rsquo; separator. For example: 
list 123, 234

lists source lines from line
123 up to line 234 in current file

list foo.c:1,56

lists source lines from line 1
up to 56 in file foo.c

Displaying

A display is an
expression that&rsquo;s evaluated and printed after the 
execution of any winedbg&rsquo;s command. 
display 
info display

Lists the active displays

display 

Adds a display for expression
expr>

display /fmt 

Adds a display for expression
. Printing evaluated 
 is done using the given format (see
print command 
for more on formats)

del display N 
undisplay N

Deletes display #N

Disassembly

disas

Disassemble from current position

disas 

Disassemble from address

disas ,

Disassembles code between
addresses specified by the two :s

Memory (reading, writing, typing)

x 

Examines memory at
 address

x /fmt 

Examines memory at
 address using format /fmt

print 

Prints the value of
 (possibly using its type)

print /fmt 

Prints the value of
 (possibly using its type)

set  = 

Writes the value of
 in  variable.

whatis 

Prints the C type of expression

/fmt

is either / or
/.

can be:

s

an ASCII string

u

an Unicode UTF16 string

i

instructions (disassemble)

x

32 bit unsigned hexadecimal integer

d

32 bit signed decimal integer

w

16 bit unsigned hexadecimal integer

c

character (only printable 0x20-0x7f are actually
printed) 

b

8 bit unsigned hexadecimal integer

g

Win32 GUID

Expressions

Expressions in
Wine Debugger are mostly written in a C form. However, 
there are a few discrepancies:

Identifiers can
take a &rsquo;!&rsquo; in their names. This allows mainly to

specify a module where to look the module from:
USER32!CreateWindowExA.

In cast
operation, when specifying a structure or an union, you must

use the struct or union key word (even if your program uses
a typedef).

When specifying
an identifier , if several symbols with

this name exist, the debugger will prompt for the symbol you
want to 
use. Pick up the one you want from its number.

Information
on Wine&rsquo;s internals 
info class

Lists all Windows&rsquo; class
registered in Wine

info class 

Prints information on
Windows&rsquo;s class 

info share

Lists all the dynamic libraries
loaded in the debugged program 
(including .so files, NE and PE DLLs)

info share N

Prints information on module at
address N

info regs

Prints the value of the CPU
registers

info segment

Lists all allocated segments
(i386 only)

info segment

Prints information on segment
N (i386 only)

info stack

Prints the values on top of the
stack

info map

Lists all virtual mappings used
by the debugged program

info map N

Lists all virtual mappings used
by the program of pid N

info wnd

Displays the window hierarchy
starting from the desktop window

info wnd N

Prints information of Window of
handle N

info process

Lists all w-processes in Wine
session

info thread

Lists all w-threads in Wine
session

info exception

Lists the exception frames
(starting from current stack frame)

It is possible
to turn on and off Wine&rsquo;s debug messages as you are

debugging using the set command. 
set + warn win

Turns on warn on
&rsquo;win&rsquo; channel

set + win

Turns on warn/fixme/err/trace
on &rsquo;win&rsquo; channel

set - win

Turns off warn/fixme/err/trace
on &rsquo;win&rsquo; channel

set - fixme

Turns off the
&rsquo;fixme&rsquo; class on all channels

Gdb
mode: 
See the gdb documentation for all the gdb
commands.

However, a few
Wine&rsquo;s extension are available, through the
monitor command: 
monitor wnd

Lists all window in the Wine
session

monitor

Lists all processes in the Wine
session

monitor

Displays memory mapping of
debugged process

Auto
mode: 
Since no user input is possible, no commands are
available.

ENVIRONMENT

WINE_GDB

When used in gdb proxy
mode, WINE_GDB specifies the name (and the path) of
the executable to be used for gdb.
"gdb" is used by default.

FILES

No specific
files are used (yet).

BUGS

A lot.

AUTHORS

The first
version was written by Eric Youngdale.

See Wine
developer&rsquo;s list for the rest of contributors.

SEE ALSO

winedbg&rsquo;s
README file 
The Winelib User Guide 
The Wine Developers Guide