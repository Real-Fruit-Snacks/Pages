NAME

git-archimport
&minus; Import an Arch repository into Git

SYNOPSIS

git
archimport [&minus;h] [&minus;v] [&minus;o] [&minus;a]
[&minus;f] [&minus;T] [&minus;D depth] [&minus;t tempdir]

[:] ...

DESCRIPTION

Imports a
project from one or more Arch repositories. It will follow
branches and repositories within the namespaces defined by
the  parameters supplied. If it cannot
find the remote branch a merge comes from it will just
import it as a regular commit. If it can find it, it will
mark it as a merge whenever possible (see discussion
below).

The script
expects you to provide the key roots where it can start the
import from an initial import or tag type of
Arch commit. It will follow and import new branches within
the provided roots.

It expects to
be dealing with one project only. If it sees branches that
have different roots, it will refuse to run. In that case,
edit your  parameters to define
clearly the scope of the import.

git
archimport uses tla extensively in the background
to access the Arch repository. Make sure you have a recent
version of tla available in the path. tla must
know about the repositories you pass to git
archimport.

For the initial
import, git archimport expects to find itself in an
empty directory. To follow the development of a project that
uses Arch, rerun git archimport with the same
parameters as the initial import to perform incremental
imports.

While git
archimport will try to create sensible branch names for
the archives that it imports, it is also possible to specify
Git branch names manually. To do so, write a Git branch name
after each  parameter, separated by a
colon. This way, you can shorten the Arch branch names and
convert Arch jargon to Git jargon, for example mapping a
"PROJECT&minus;&minus;devo&minus;&minus;VERSION"
branch to "master".

Associating
multiple Arch branches to one Git branch is possible; the
result will make the most sense only if no commits are made
to the first branch, after the second branch is created.
Still, this is useful to convert Arch repositories that had
been rotated periodically.

MERGES

Patch merge
data from Arch is used to mark merges in Git as well. Git
does not care much about tracking patches, and only
considers a merge when a branch incorporates all the commits
since the point they forked. The end result is that Git will
have a good idea of how far branches have diverged. So the
import process does lose some patch&minus;trading
metadata.

Fortunately,
when you try and merge branches imported from Arch, Git will
find a good merge base, and it has a good chance of
identifying patches that have been traded
out&minus;of&minus;sequence between the branches.

OPTIONS

&minus;h

Display usage.

&minus;v

Verbose output.

&minus;T

Many tags. Will create a tag
for every commit, reflecting the commit name in the Arch
repository.

&minus;f

Use the fast patchset import
strategy. This can be significantly faster for large trees,
but cannot handle directory renames or permissions changes.
The default strategy is slow and safe.

&minus;o

Use this for compatibility with
old&minus;style branch names used by earlier versions of
git archimport. Old&minus;style branch names were
category&minus;&minus;branch, whereas new&minus;style branch
names are
archive,category&minus;&minus;branch&minus;&minus;version.
In both cases, names given on the command&minus;line will
override the automatically&minus;generated ones.

&minus;D

Follow merge ancestry and
attempt to import trees that have been merged from. Specify
a depth greater than 1 if patch logs have been pruned.

&minus;a

Attempt to auto&minus;register
archives at
http://mirrors.sourcecontrol.net
This is particularly useful with the
&minus;D option.

&minus;t

Override
the default tempdir.

Archive/branch
identifier in a format that tla log
understands.

GIT

Part
of the git(1) suite