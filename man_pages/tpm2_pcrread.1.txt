NAME

tpm2_pcrread(1)
- List PCR values.

SYNOPSIS

tpm2_pcrread
[OPTIONS] PCR_LIST_OR_ALG

DESCRIPTION

tpm2_pcrread(1)
- Displays PCR values. Without any arguments,
tpm2_pcrread(1) outputs all PCRs and their hash
banks. One can use specify the hash algorithm or a pcr list
as an argument to filter the output.

To only output
PCR banks with a given algorithm, specify the hashing
algorithm as the argument. Algorithms should follow the
&ldquo;formatting standards&rdquo;, see section
&ldquo;Algorithm Specifiers&rdquo;. Also, see section
&ldquo;Supported Hash Algorithms&rdquo; for a list of
supported hash algorithms.

To output a
list of PCR banks (sha1, sha256, etc) and ids (0, 1, 2 etc)
specify a PCR selection list as the argument as specified
via section &ldquo;PCR Bank Specifiers&rdquo;.

Also read
NOTES section below.

Output is
written in a YAML format to stdout, with each algorithm
followed by a PCR index and its value. As a simple example
assume just sha1 and sha256 support and only 1 PCR. The
output would be:

$ tpm2_pcrread sha1:0+sha256:0
sha1 :
  0  : 0000000000000000000000000000000000000003
sha256 :
  0  : 0000000000000000000000000000000000000000000000000000000000000003

OPTIONS

&bull;

-o,
--output=FILE: 

The output file
to write the PCR values in binary format, optional.

&bull;

--cphash=FILE

File path to
record the hash of the command parameters. This is commonly
termed as cpHash. NOTE: When this option is selected, The
tool will not actually execute the command, it simply
returns a cpHash.

&bull;

-F,
--pcrs_format=FORMAT: 

Format
selection for the binary blob in the PCR output file.
&rsquo;values&rsquo; will output a binary blob of the PCR
values. &rsquo;serialized&rsquo; will output a binary blob
of the PCR values in the form of serialized data structure
in little endian format. Optional. Default is
&rsquo;values&rsquo;.

COMMON OPTIONS

This collection
of options are common to many programs and provide
information that many users may expect.

&bull;

-h,
--help=[man|no-man]: Display the tools manpage. By
default, it attempts to invoke the manpager for the tool,
however, on failure will output a short tool summary. This
is the same behavior if the &ldquo;man&rdquo; option
argument is specified, however if explicit &ldquo;man&rdquo;
is requested, the tool will provide errors from man on
stderr. If the &ldquo;no-man&rdquo; option if specified, or
the manpager fails, the short options will be output to
stdout. 

To successfully
use the manpages feature requires the manpages to be
installed or on MANPATH, See man(1) for more
details.

&bull;

-v, --version:
Display version information for this tool, supported tctis
and exit.

&bull;

-V, --verbose: Increase the information
that the tool prints to the console during its execution.
When using this option the file and line number are
printed. 

&bull;

-Q, --quiet: Silence normal tool output to
stdout. 

&bull;

-Z, --enable-errata: Enable the
application of errata fixups. Useful if an errata fixup
needs to be applied to commands sent to the TPM. Defining
the environment TPM2TOOLS_ENABLE_ERRATA is equivalent.

&bull;

-R, --autoflush: Enable autoflush for
transient objects created by the command. If a parent object
is loaded from a context file also the transient parent
object will be flushed. Autoflush can also be activated if
the environment variable TPM2TOOLS_AUTOFLUSH is is set to
yes or true.

TCTI Configuration

The TCTI or
&ldquo;Transmission Interface&rdquo; is the communication
mechanism with the TPM. TCTIs can be changed for
communication with TPMs across different mediums.

To control the
TCTI, the tools respect:

1.

The command line option
-T or --tcti

2.

The environment variable: TPM2TOOLS_TCTI.

Note:
The command line option always overrides the environment
variable.

The current
known TCTIs are:

&bull;

tabrmd - The resource manager,
called tabrmd (https://github.com/tpm2-software/tpm2-abrmd).
Note that tabrmd and abrmd as a tcti name are
synonymous. 

&bull;

mssim - Typically used for communicating to the TPM
software simulator.

&bull;

device - Used when talking directly to a TPM device
file. 

&bull;

none - Do not initalize a connection with the TPM. Some
tools allow for off-tpm options and thus support not using a
TCTI. Tools that do not support it will error when attempted
to be used without a TCTI connection. Does not support
ANY options and MUST BE presented as the exact
text of &ldquo;none&rdquo;.

The arguments
to either the command line option or the environment
variable are in the form:

:

Specifying an
empty string for either the  or
 results in the default
being used for that portion respectively.

TCTI
Defaults 
When a TCTI is not specified, the default TCTI is searched
for using dlopen(3) semantics. The tools will search
for tabrmd, device and mssim TCTIs
IN THAT ORDER and USE THE FIRST ONE FOUND. You
can query what TCTI will be chosen as the default by using
the -v option to print the version information. The
&ldquo;default-tcti&rdquo; key-value pair will indicate
which of the aforementioned TCTIs is the default.

Custom
TCTIs 
Any TCTI that implements the dynamic TCTI interface can be
loaded. The tools internally use dlopen(3), and the
raw tcti-name value is used for the lookup. Thus,
this could be a path to the shared library, or a library
name as understood by dlopen(3) semantics.

TCTI OPTIONS

This collection
of options are used to configure the various known TCTI
modules available:

&bull;

device: For the device
TCTI, the TPM character device file for use by the device
TCTI can be specified. The default is /dev/tpm0.

Example: -T
device:/dev/tpm0 or export
TPM2TOOLS_TCTI=&ldquo;device:/dev/tpm0&rdquo;

&bull;

mssim: For the mssim
TCTI, the domain name or IP address and port number used by
the simulator can be specified. The default are 127.0.0.1
and 2321.

Example: -T
mssim:host=localhost,port=2321 or export
TPM2TOOLS_TCTI=&ldquo;mssim:host=localhost,port=2321&rdquo;

&bull;

abrmd: For the abrmd
TCTI, the configuration string format is a series of simple
key value pairs separated by a &rsquo;,&rsquo; character.
Each key and value string are separated by a &rsquo;=&rsquo;
character. 

&bull;

TCTI abrmd supports two
keys: 

1.

&rsquo;bus_name&rsquo; : The
name of the tabrmd service on the bus (a string).

2.

&rsquo;bus_type&rsquo; : The type of the dbus instance
(a string) limited to &rsquo;session&rsquo; and
&rsquo;system&rsquo;. 

Specify the
tabrmd tcti name and a config string of
bus_name=com.example.FooBar:

\--tcti=tabrmd:bus_name=com.example.FooBar

Specify the
default (abrmd) tcti and a config string of
bus_type=session:

\--tcti:bus_type=session

NOTE:
abrmd and tabrmd are synonymous.

PCR bank
specifiers

Supported Hash Algorithms

Supported hash
algorithms are:

&bull;

0x4 or sha1 for
TPM_ALG_SHA1 

&bull;

0xB or sha256 for TPM_ALG_SHA256
(default) 

&bull;

0xC or sha384 for
TPM_ALG_SHA384 

&bull;

0xD or sha512 for
TPM_ALG_SHA512 

&bull;

0x12 or sm3_256 for
TPM_ALG_SM3_256 

NOTE:
Your TPM may not support all algorithms.

Algorithm Specifiers

Options that
take algorithms support &ldquo;nice-names&rdquo;.

There are two
major algorithm specification string classes, simple and
complex. Only certain algorithms will be accepted by the
TPM, based on usage and conditions.

Simple
specifiers 
These are strings with no additional specification data.
When creating objects, non-specified portions of an object
are assumed to defaults. You can find the list of known
&ldquo;Simple Specifiers&rdquo; below.

Asymmetric

&bull;

rsa

&bull;

ecc

Symmetric

&bull;

aes

&bull;

camellia

&bull;

sm4

Hashing
Algorithms

&bull;

sha1

&bull;

sha256

&bull;

sha384

&bull;

sha512

&bull;

sm3_256

&bull;

sha3_256

&bull;

sha3_384

&bull;

sha3_512

Keyed
Hash

&bull;

hmac

&bull;

xor

Signing
Schemes

&bull;

rsassa

&bull;

rsapss

&bull;

ecdsa

&bull;

ecdaa

&bull;

ecschnorr

&bull;

sm2

Asymmetric
Encryption Schemes

&bull;

oaep

&bull;

rsaes

&bull;

ecdh

Modes

&bull;

ctr

&bull;

ofb

&bull;

cbc

&bull;

cfb

&bull;

ecb

Misc

&bull;

null

Complex
Specifiers 
Objects, when specified for creation by the TPM, have
numerous algorithms to populate in the public data. Things
like type, scheme and asymmetric details, key size, etc.
Below is the general format for specifying this data:
::

Type
Specifiers 
This portion of the complex algorithm specifier is required.
The remaining scheme and symmetric details will default
based on the type specified and the type of the object being
created.

&bull;

aes - Default AES: aes128

&bull;

aes128 - 128 bit AES with optional
mode
(ctr|ofb|cbc|cfb|ecb). If
mode is not specified, defaults to null.

&bull;

aes192 - Same as
aes128, except for a 192 bit key
size. 

&bull;

aes256 - Same as
aes128, except for a 256 bit key
size. 

&bull;

sm4 - Default SM4: sm4128

&bull;

sm4128 or sm4_128  - 128 bit SM4
with optional mode
(ctr|ofb|cbc|cfb|ecb). If
mode is not specified, defaults to null.

&bull;

ecc - Elliptical Curve, defaults to ecc256.

&bull;

ecc192 or ecc_nist_p192 - 192 bit ECC NIST curve

&bull;

ecc224 or ecc_nist_p224 - 224 bit ECC NIST curve

&bull;

ecc256 or ecc_nist_p256 - 256 bit ECC NIST curve

&bull;

ecc384 or ecc_nist_p384 - 384 bit ECC NIST curve

&bull;

ecc521 or ecc_nist_p521 - 521 bit ECC NIST curve

&bull;

ecc_sm2 or ecc_sm2_p256 - 256 bit SM2 curve

&bull;

rsa - Default RSA: rsa2048

&bull;

rsa1024 - RSA with 1024 bit keysize.

&bull;

rsa2048 - RSA with 2048 bit keysize.

&bull;

rsa3072 - RSA with 3072 bit keysize.

&bull;

rsa4096 - RSA with 4096 bit keysize.

Scheme
Specifiers 
Next, is an optional field, it can be skipped.

Schemes are
usually Signing Schemes or Asymmetric Encryption
Schemes. Most signing schemes take a hash algorithm
directly following the signing scheme. If the hash algorithm
is missing, it defaults to sha256. Some take no
arguments, and some take multiple arguments.

Hash
Optional Scheme Specifiers 
These scheme specifiers are followed by a dash and a valid
hash algorithm, For example: oaep-sha256.

&bull;

oaep

&bull;

ecdh

&bull;

rsassa

&bull;

rsapss

&bull;

ecdsa

&bull;

ecschnorr

&bull;

sm2

Multiple
Option Scheme Specifiers 
This scheme specifier is followed by a count (max size
UINT16) then followed by a dash(-) and a valid hash
algorithm. * ecdaa For example, ecdaa4-sha256. If no count
is specified, it defaults to 4.

No Option
Scheme Specifiers 
This scheme specifier takes NO arguments. * rsaes

Symmetric
Details Specifiers 
This field is optional, and defaults based on the
type of object being created and it&rsquo;s
attributes. Generally, any valid Symmetric specifier
from the Type Specifiers list should work. If not
specified, an asymmetric objects symmetric details defaults
to aes128cfb.

Examples

Create an rsa2048 key with an rsaes asymmetric encryption
scheme 
tpm2_create -C parent.ctx -G rsa2048:rsaes -u key.pub -r
key.priv

Create an
ecc256 key with an ecdaa signing scheme with a count of 4
and sha384 hash 
/tpm2_create -C parent.ctx -G ecc256:ecdaa4-sha384 -u
key.pub -r key.priv

EXAMPLES

Display
all PCR values
tpm2_pcrread

Display the
PCR values with a specified bank
tpm2_pcrread sha1

Display the
PCR values with specified banks and store in a file

tpm2_pcrread -o pcrs sha1:16,17,18+sha256:16,17,18

Display the
supported PCR bank algorithms and exit
tpm2_pcrread

NOTES

The maximum
number of PCR that can be dumped at once is associated with
the maximum length of a bank.

On most TPMs,
it means that this tool can dump up to 24 PCRs at once.

Returns

Tools can
return any of the following codes:

&bull;

0 - Success.

&bull;

1 - General non-specific error.

&bull;

2 - Options handling error.

&bull;

3 - Authentication error.

&bull;

4 - TCTI related error.

&bull;

5 - Non supported scheme. Applicable to
tpm2_testparams. 

BUGS

Github Issues
(https://github.com/tpm2-software/tpm2-tools/issues)

HELP

See the Mailing
List
(https://lists.linuxfoundation.org/mailman/listinfo/tpm2)