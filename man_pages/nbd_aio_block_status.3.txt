NAME

nbd_aio_block_status
- send block status command, with 32-bit callback

SYNOPSIS

#include

typedef struct { 
int (*callback) (void *user_data, 
const char *metacontext, 
uint64_t offset, uint32_t *entries, 
size_t nr_entries, int *error); 
void *user_data; 
void (*free) (void *user_data); 
} nbd_extent_callback; 
typedef struct { 
int (*callback) (void *user_data, int *error); 
void *user_data; 
void (*free) (void *user_data); 
} nbd_completion_callback; 
int64_t nbd_aio_block_status ( 
struct nbd_handle *h, uint64_t count, 
uint64_t offset, 
nbd_extent_callback extent_callback, 
nbd_completion_callback completion_callback, 
uint32_t flags 
);

DESCRIPTION

Send the block
status command to the NBD server.

To check if the
command completed, call nbd_aio_command_completed(3).
Or supply the optional "completion_callback" which
will be invoked as described in "Completion
callbacks" in libnbd(3).

Other
parameters behave as documented in
nbd_block_status(3).

This function
is inherently limited to 32-bit values. If the server
replies with a larger extent, the length of that extent will
be truncated to just below 32 bits and any further extents
from the server will be ignored. If the server replies with
a status value larger than 32 bits (only possible when
extended headers are in use), the callback function will be
passed an "EOVERFLOW" error. To get the full
extent information from a server that supports 64-bit
extents, you must use nbd_aio_block_status_64(3).

By default,
libnbd will reject attempts to use this function with
parameters that are likely to result in server failure, such
as requesting an unknown command flag. The
nbd_set_strict_mode(3) function can be used to alter
which scenarios should await a server reply rather than
failing fast.

RETURN VALUE

This call
returns the 64 bit cookie of the command. The cookie is ≥
1. Cookies are unique (per libnbd handle, not globally).

ERRORS

On error -1 is
returned.

Refer to
"ERROR HANDLING" in libnbd(3) for how to
get further details of the error.

The following
parameters must not be NULL: "h". For more
information see "Non-NULL parameters" in
libnbd(3).

HANDLE STATE

nbd_aio_block_status
can be called when the handle is in the following state:

┌─────────────────────────────────────┬─────────────────────────┐

│ Handle created, before connecting │ ❌
error │ 
│ Connecting │ ❌ error │ 
│ Connecting & handshaking (opt_mode) │
❌ error │ 
│ Connected to the server │ ✅ allowed
│ 
│ Connection shut down │ ❌ error │

│ Handle dead │ ❌ error │ 

└─────────────────────────────────────┴─────────────────────────┘

VERSION

This function
first appeared in libnbd 1.0.

If you need to
test if this function is available at compile time check if
the following macro is defined:

#define
LIBNBD_HAVE_NBD_AIO_BLOCK_STATUS 1

SEE ALSO

nbd_aio_block_status_64(3),
nbd_aio_command_completed(3),
nbd_block_status(3), nbd_can_meta_context(3),
nbd_create(3), nbd_set_strict_mode(3),
"Issuing asynchronous commands" in
libnbd(3), libnbd(3).

AUTHORS

Eric Blake

Richard W.M.
Jones

COPYRIGHT

Copyright Red
Hat

LICENSE

This library is
free software; you can redistribute it and/or modify it
under the terms of the GNU Lesser General Public License as
published by the Free Software Foundation; either version 2
of the License, or (at your option) any later version.

This library is
distributed in the hope that it will be useful, but WITHOUT
ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
GNU Lesser General Public License for more details.

You should have
received a copy of the GNU Lesser General Public License
along with this library; if not, write to the Free Software
Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston,
MA 02110-1301 USA