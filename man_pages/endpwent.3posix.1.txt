ENDPWENT(3POSIX)           POSIX Programmer's Manual          ENDPWENT(3POSIX)

PROLOG
       This  manual  page is part of the POSIX Programmer's Manual.  The Linux
       implementation of this interface may differ (consult the  corresponding
       Linux  manual page for details of Linux behavior), or the interface may
       not be implemented on Linux.

NAME
       endpwent, getpwent, setpwent — user database functions

SYNOPSIS
       #include <pwd.h>

       void endpwent(void);
       struct passwd *getpwent(void);
       void setpwent(void);

DESCRIPTION
       These functions shall retrieve information about users.

       The getpwent() function shall return a pointer to a structure  contain‐
       ing  the broken-out fields of an entry in the user database. Each entry
       in the user database contains a passwd structure. If the user  database
       is not already open, getpwent() shall open it and return a pointer to a
       passwd structure containing the first entry  in  the  database.  There‐
       after,  it  shall return a pointer to a passwd structure containing the
       next entry in the user database. Successive calls can be used to search
       the entire user database.

       If  an  end-of-file  or  an error is encountered on reading, getpwent()
       shall return a null pointer.

       An implementation that provides extended security controls  may  impose
       further implementation-defined restrictions on accessing the user data‐
       base. In particular, the system may deny the existence of some  or  all
       of  the  user  database  entries  associated  with users other than the
       caller.

       The setpwent() function shall rewind the user database so that the next
       getpwent() call returns the first entry, allowing repeated searches.

       The endpwent() function shall close the user database.

       The setpwent() and endpwent() functions shall not change the setting of
       errno if successful.

       On error, the setpwent() and endpwent() functions shall  set  errno  to
       indicate the error.

       Since  no value is returned by the setpwent() and endpwent() functions,
       an application wishing to check for error situations should  set  errno
       to 0, then call the function, then check errno.

       These functions need not be thread-safe.

RETURN VALUE
       On successful completion, getpwent() shall return a pointer to a passwd
       structure. On end-of-file, getpwent() shall return a null  pointer  and
       shall  not change the setting of errno.  On error, getpwent() shall re‐
       turn a null pointer and errno shall be set to indicate the error.

       The application shall not modify the  structure  to  which  the  return
       value  points,  nor any storage areas pointed to by pointers within the
       structure. The returned pointer, and  pointers  within  the  structure,
       might  be  invalidated  or  the structure or the storage areas might be
       overwritten by a subsequent call to getpwuid(),  getpwnam(),  or  getp‐
       went().  The returned pointer, and pointers within the structure, might
       also be invalidated if the calling thread is terminated.

ERRORS
       These functions may fail if:

       EINTR  A signal was caught during the operation.

       EIO    An I/O error has occurred.

       In addition, getpwent() and setpwent() may fail if:

       EMFILE All file descriptors available  to  the  process  are  currently
              open.

       ENFILE The  maximum  allowable number of files is currently open in the
              system.

       The following sections are informative.

EXAMPLES
   Searching the User Database
       The following example uses the getpwent() function  to  get  successive
       entries in the user database, returning a pointer to a passwd structure
       that contains information about  each  user.  The  call  to  endpwent()
       closes the user database and cleans up.

           #include <pwd.h>
           #include <stdio.h>

           void printname(uid_t uid)
           {
               struct passwd *pwd;

               setpwent();
               while((pwd = getpwent()) != NULL) {
                   if (pwd->pw_uid == uid) {
                       printf("name=%s\n",pwd->pw_name);
                       break;
                   }
               }
               endpwent();
           }

APPLICATION USAGE
       These  functions  are provided due to their historical usage.  Applica‐
       tions should avoid dependencies on fields  in  the  password  database,
       whether the database is a single file, or where in the file system name
       space the database resides. Applications should use getpwuid() whenever
       possible because it avoids these dependencies.

RATIONALE
       None.

FUTURE DIRECTIONS
       None.

SEE ALSO
       endgrent(), getlogin(), getpwnam(), getpwuid()

       The Base Definitions volume of POSIX.1‐2017, <pwd.h>

COPYRIGHT
       Portions  of  this text are reprinted and reproduced in electronic form
       from IEEE Std 1003.1-2017, Standard for Information Technology --  Por‐
       table  Operating System Interface (POSIX), The Open Group Base Specifi‐
       cations Issue 7, 2018 Edition, Copyright (C) 2018 by the  Institute  of
       Electrical  and  Electronics Engineers, Inc and The Open Group.  In the
       event of any discrepancy between this version and the original IEEE and
       The  Open Group Standard, the original IEEE and The Open Group Standard
       is the referee document. The original Standard can be  obtained  online
       at http://www.opengroup.org/unix/online.html .

       Any  typographical  or  formatting  errors that appear in this page are
       most likely to have been introduced during the conversion of the source
       files  to  man page format. To report such errors, see https://www.ker‐
       nel.org/doc/man-pages/reporting_bugs.html .

IEEE/The Open Group                  2017                     ENDPWENT(3POSIX)
