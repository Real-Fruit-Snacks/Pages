NAME

lircd.conf -
lirc main configuration file

DESCRIPTION

The file has
two purposes: to provide timing information to the driver so
it can decode the data to button presses, and to provide a
mapping from button presses to key symbols used by
lircd(8).

The basic
structure is a list of remote blocks. Whitespace and line
breaks are used as delimiters.

If the comment
character (#) appears as the first character on a line the
rest of the line is ignored.

REMOTE BLOCKS

Remote blocks
are either normal or raw.

Normal remote
blocks begin with begin remote and ends with end
remote. The first part of the block describes the basic
properties of the remote, see REMOTE DESCRIPTION SECTION.
Following this is a codes section, which is delimited by
begin codes and end codes.

Each line in a
codes section contains the name of a button on the remote
followed by a hexadecimal data value matching the data part
of the IR frame (see REMOTE DESCRIPTION SECTION). You may
not assign the same name to two buttons in the same remote
section.

Raw remote
blocks are identical to normal blocks besides the codes
section which is a list of button descriptions enclosed by
begin raw_codes and end raw_codes.

A raw button
description begins with the parameter name followed
by the name of the button. The button description ends with
the next button description or the end of the raw_codes
block. The lines in between is a list of decimal numbers
describing the signal sent by that button. The first number
indicates the duration of the first pulse in microseconds.
The second number indicates the duration of the space which
follows it. Pulse and space durations alternate for as long
as is necessary. The last duration should represent a
pulse.

REMOTE DESCRIPTION SECTION

Each line in
this section contains a parameter followed by the value or
values that should be assigned to that parameter. Parameters
are optional unless otherwise stated.

All values are
decimal integers that are either dimensionless or have units
of microseconds unless otherwise stated. Hexadecimal numbers
should be prefixed by 0x. If the remote does not have a
particular "feature," then the line may be
omitted. The button code is sent just after the pre signal
and just before the post signal.

Some parameters
describe the bits in the IR protocol. The frame is normally
defined like

|header|plead|pre
data|pre|data|post|post data|ptrail|foot|gap|

where most
parameters defaults to 0. Some parameters change the overall
frame layout e. g., the repeat parameter. 
include ””

Include the given path using
normal include semantics. If the path is relative,
it’s interpreted relative to the main lircd.conf file.
 must be enclosed in double quotes. It can
contain a glob(3) pattern in which case all matching files
are included.

manual_sort

Normally, lircd tries to sort
multiple remotes so the one which decodes fastest are used
first. Setting manual_sort to 1 in any remote disables this
and uses the remotes in the order they are listed in
lircd.conf or as the alphanumerically sorted filenames in
lircd.conf.d.

name 

The unique name assigned to the
remote control (may not contain whitespace). Within a single
file all names must be unique. Parameter is mandatory.

suppress_repeat

Suppress a given number of
repeats for all buttons in this remote. Defaults to 0, which
means that no repeats are suppressed. Note that lircrc has a
corresponding repeat parameter which can be used to
suppress repeats for specific button/client
combinations.

flags
...

Flags are special text strings
which describe various properties of the remote and
determine the semantics of some of the following fields.
Multiple flags should be separated by the pipe(|) symbol.
See FLAGS.

driver 

For lirccode drivers which does
not have timing information the optional driver attribute
names the driver which is required to use this remote.

bits 

The number of data bits in the
hexadecimal codes which describe each button (decimal
integer).

eps 

The relative error tolerance
for received signals in percent. By default, irrecord set
this to 30 (i. e., 30%).

aeps 

The absolute error tolerance
for received signals (microseconds). The default is the
hardcoded driver dependent resolution value. By default
irrecord sets this to 100.

header 

The initial pulse and space
sent (microseconds).

three 

Only used by RC-MM remotes

two 

Only used by RC-MM remotes

one 

The pulse and space lengths
representing a one.

zero 

The pulse and space lengths
representing a zero.

ptrail 

A trailing pulse, immediately
following the post_data.

plead 

A leading pulse, immediately
after the header.

foot 

A pulse and space, immediately
following the trailing pulse.

repeat 

A pulse and space that replaces
everything between leading pulse and the trailing pulse,
whenever a signal is repeated. The foot is not sent, and the
header is not sent unless the REPEAT_HEADER flag is
present.

pre_data_bits 

The number of bits in the
pre_data code.

pre_data 

Hexadecimal code indicating the
sequence of ones and zeros immediately following the leading
pulse.

post_data_bits 

The number of bits in the
post_data code.

post_data 

Hexadecimal code indicating the
sequence of ones and zeros immediately following the post
signal.

pre 

A pulse and space immediately
following the pre_data, used as delimiter between pre
data and data.

post 

A pulse and space immediately
following the button code.

gap 

A (typically long) space which
follows the trailing pulse.

repeat_gap 

A gap immediately following the
trailing pulse, and preceding a repetition of the same code
that’s due to a the same press of the button.

min_repeat 

The minimum times a signal is
repeated when sent. Note that 0 means the signal is sent
only once. Not used when receiving.

toggle_bit 

A bit of the pre_data, code, or
post_data that is toggled between one and zero each time a
button is pressed. This parameter is obsoleted by
toggle_bit_mask and should be used in new configs.

toggle_bit_mask

Bits which are toggled between
one and zero each time a button is pressed. The mask is
applied to the concatenated value of pre data - data -
post_data.

repeat_mask

Mask defines which bits are
inverted for repeats.

frequency

Remote carrier frequency,
defaults to 38000.

duty_cycle 

The percentage of time during a
pulse that infrared light is being sent. This is an integer
between 1-100 inclusive. default is 50.

FLAGS

Flags are
values set in the flags parameter.

RC5

The remote uses the RC5 protocol.

RC6

The remote uses the RC6 protocol.

RCMM

The remote uses the RC-MM
protocol.

SHIFT_ENC

Obsolete flag, now a synonym
for RC5. The position of the pulse (before or after the
space) determines whether the bit is a one or a zero.

SPACE_ENC

A one and a zero can be
distinguished by the length of the spaces, used by the NEC
protocol and others.

REVERSE

Reverses the bit order of the
pre_data, the post_data and the codes (e.g., 0x123 becomes
0xC48). If this flag is present, the least significant bit
is sent first.

NO_HEAD_REP

The header is not sent when a
signal (the button is held down) is repeated even though
there is no special repeat code.

NO_FOOT_REP

The foot is not sent when a
signal is repeated (the button is held down) even though
there is no special repeat code .

CONST_LENGTH

The total signal length is
always constant. The gap length now represents the length of
the entire signal, and the actual gap at the end of the
signal is adjusted accordingly.

RAW_CODES

The codes are in raw
format.

REPEAT_HEADER

Send the header when the signal
is repeated even though the remote has a special repeat
code.

DISCLAIMER

LIRC was
designed to collect IR data and save it in a private,
compact, yet human readable format with the purpose of being
able to re-transmit (or re-recognize) these signals. It was
not designed with the goal of providing a well documented
and tested configuration file format that could be used
e.g., to generate arbitrary IR signals or to convert them to
other formats. The configuration file should thus not be
considered a public interface to LIRC.

This manpage
should be understood with this in mind. It was authored by
reading the code of LIRC, and does not constitute an
authoritative specification of the behavior of LIRC and its
configuration file. Also, some less commonly used flags and
parameters are not documented.

SEE ALSO

lircd(8) 
irrecord(1) 
http://en.wikipedia.org/wiki/RC-5 
 http://www.sbprojects.com/knowledge/ir/