NAME

udisks &minus;
udisks command line tool

SYNOPSIS

udisks
[OPTIONS] 

DESCRIPTION

udisks
is a simple command line client for the udisks(7)
system bus service.

OPTIONS

&minus;&minus;dump

Dump all information about all
devices. Please include this when filing bugs.

&minus;&minus;enumerate

Lists all object paths of
devices know to the daemon.

&minus;&minus;enumerate&minus;device&minus;files

Lists all device files of
devices know to the daemon.

&minus;&minus;monitor

Connect to the daemon and print
a line every time an event happens.

&minus;&minus;monitor&minus;detail

Like
&minus;&minus;monitor but prints the full details of
the device whenever an event happens.

&minus;&minus;show&minus;info
device_file

Shows information about
device_file.

&minus;&minus;inhibit&minus;polling
device_file
[&minus;&minus; program arg ...]

Inhibits polling on
device_file. If no program is given, polling is
inhibited until Ctrl+C is pressed. Otherwise the program is
spawned and the polling is only inhibited until the program
terminates.

&minus;&minus;poll&minus;for&minus;media
device_file

Polls device_file to
perform media detection.

&minus;&minus;inhibit&minus;all&minus;polling
[&minus;&minus; program arg ...]

Inhibits polling on all
devices. If no program is given, polling is inhibited until
Ctrl+C is pressed. Otherwise the program is spawned and the
polling is only inhibited until the program terminates.

&minus;&minus;mount
device_file
[&minus;&minus;mount&minus;fstype fstype]
[&minus;&minus;mount&minus;options options]

Mounts the device represented
by device_file using the file system fstype
and a comma&minus;separated list of options.

&minus;&minus;unmount
device_file
[&minus;&minus;unmount&minus;options options]

Unmounts the device represented
by device_file using a comma&minus;separated list of
options.

&minus;&minus;detach
device_file
[&minus;&minus;detach&minus;options options]

Detaches (e.g. powering down
the physical port the device is connected to) the device
represented by device_file using a
comma&minus;separated list of options.

&minus;&minus;ata&minus;smart&minus;refresh
device_file
[&minus;&minus;ata&minus;smart&minus;wakeup]

Refreshes ATA SMART data for
device_file. If the disk is sleeping it will not be
woken up unless
&minus;&minus;ata&minus;smart&minus;wakeup is passed.
will be used.

&minus;&minus;ata&minus;smart&minus;refresh
device_file
&minus;&minus;ata&minus;smart&minus;simulate
blob

Read ATA SMART data from
blob for device_file. This can only be done by
the super user and is typically used for testing that
clients relying on the ATA SMART data provided by udisks
behave correctly. The libatasmart git repository at
http://git.0pointer.de/?p=libatasmart.git;a=summary
contains a collection of blobs from
failing disks.

&minus;&minus;inhibit
[&minus;&minus; program arg ...]

Inhibits
clients from invoking methods on the daemon that require
authorization (all methods will return the
org.freedesktop.UDisks.Error.Inhibited error) if the caller
is not the super user. This is typically used by OS
installers and other programs that expects full control of
the system, specifically to avoid automounting devices. Only
the super user can do this.

If
no program is given, the daemon is inhibited until Ctrl+C is
pressed. Otherwise the program is spawned and the daemon is
only inhibited until the program terminates.

&minus;&minus;set&minus;spindown
device_file
&minus;&minus;spindown&minus;timeout seconds
[&minus;&minus; program arg ...]

Configures
disk spindown timeout on device_file to
seconds. See the section called &ldquo;SPINNING DOWN
DISKS&rdquo; for important information before using this
option.

If
no program is given, the spindown time will be used until
Ctrl+C is pressed. Otherwise the program is spawned and the
the spindown timeout will only be used until the program
terminates.

&minus;&minus;set&minus;spindown&minus;all
&minus;&minus;spindown&minus;timeout seconds
[&minus;&minus; program arg ...]

Configures
disk spindown timeout on all disks that can be spun down to
seconds. See the section called &ldquo;SPINNING DOWN
DISKS&rdquo; for important information before using this
option.

If
no program is given, the spindown time will be used until
Ctrl+C is pressed. Otherwise the program is spawned and the
the spindown timeout will only be used until the program
terminates.

&minus;&minus;help

Show help
options.

SPINNING DOWN DISKS

Caution
should be exercised when configuring disk spin down
timeouts.

Note
that every time a disk is spun down, the
&ldquo;start&minus;stop&minus;count&rdquo; ATA SMART
attribute will increase by 1 and most disks are only good
for a limited number (typically 50,000 but it varies by
manufacturer and model). In addition, the drive may take as
long as 30 seconds to respond to subsequent disk access
&ndash; most drives are typically faster, see the
&ldquo;spin&minus;up&minus;time&rdquo; ATA SMART
attribute.

On
the other hand, cautious use (e.g. using conservative
timeouts) of the ability to spin down disks, can be a good
way to trade power consumption (typically 8 vs 1 Watts for
3.5" drives) and heat emission for a slightly higher
latency.

AUTHOR

Written
by David Zeuthen david [AT] fubar.dk with a lot of help from many
others.

BUGS

Please
send bug reports to either the distribution bug tracker or
the upstream bug tracker at
http://bugs.freedesktop.org/enter_bug.cgi?product=udisks.

SEE ALSO

udisks-daemon(8),
udisks(7),