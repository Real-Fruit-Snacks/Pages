NAME

rmformat
&minus; removable rewritable media format utility

SYNOPSIS

rmformat
[-DeHpUv] [-b label] [-c
blockno] [-Fquick | long | force ] [-R
enable | disable ] [-s filename] [-w
enable | disable] [-W enable | disable]
[devname]

rmformat
-V read | write devname

DESCRIPTION

The
rmformat utility is used to format, label, partition,
and perform other miscellaneous functions on removable,
rewritable media that include floppy drives, IOMEGA Zip/Jaz
products, and the PCMCIA memory and ata cards. This
utility can also be used for the verification and surface
analysis and for repair of the bad sectors found during
verification if the drive or the driver supports bad block
management.

rmformat
provides functionality to read/write protect the media with
or without a password. The password protection enabling or
disabling is possible only with selective rewritable media
such as the IOMEGA Zip/Jaz products.

After
formatting, rmformat writes the label, which covers
the full capacity of the media as one slice on floppy and
PCMCIA memory cards to maintain compatibility with
the behavior of fdformat. On Zip/Jaz devices, the
driver exports one slice covering the full capacity of the
disk as default. rmformat does not write the label on
Zip/Jaz media, unless explicitly requested. The partition
information can be changed with the help of other options
provided by rmformat.

OPTIONS

The following
options are supported: 
-b label

Labels the media with a SUNOS
label. A SUNOS volume label name is restricted to 8
characters. For writing a DOS Volume label, the user
should use mkfs_pcfs(1M).

-c blockno

Corrects and repairs the given
block. This correct and repair option may not be applicable
to all devices supported by rmformat, as some devices
may have a drive with bad block management capability and
others may have this option implemented in the driver. If
the drive or driver supports bad block management, a best
effort is made to rectify the bad block. If the bad block
still cannot be rectified, a message is displayed to
indicate the failure to repair. The block number can be
provided in decimal, octal, or hexadecimal format.

The normal
floppy and PCMCIA memory and ata cards do not support
bad block management.

-D

Formats a 720KB (3.5 inch) double density diskette. This
is the default for double density type drives. This option
is needed if the drive is a high or extended-density
type. 

-e

Ejects the media upon completion. This feature may not
be available if the drive does not support motorized
eject. 

-F quick | long |
force

Formats the media.

The
quick option starts a format without certification or
format with limited certification of certain tracks on the
media.

The long
option starts a complete format. For some devices this might
include the certification of the whole media by the drive
itself.

The
force option to format is provided to start a long
format without user confirmation before the format is
started. For drives which have a password protection
mechanism, it clears the password while formatting. This
feature is useful when a password is no longer available. On
those media which do not have such password protection,
force starts a long format.

In legacy media
such as floppy drives, all options start a long format
depending on the mode (Extended Density mode, High Density
mode, or Double Density mode) with which the floppy drive
operates by default. On PCMCIA memory cards, all
options start a long format.

-H

Formats a 1.44 MB (3.5 inch) high density diskette. This
is the default for high density type drives. It is needed if
the drive is the Extended Density type.

-p

Prints the protection status of the media. This option
prints information whether the media is write, read, or
password protected.

-R enable | disable

Enables read/write protection
with a password or disables the password read/write
protection. This always works in interactive mode, as the
password is requested from the user in an interactive manner
to maintain security.

A password
length of 32 bytes (maximum) is allowed for the IOMEGA
products that support this feature. This option is
applicable only for IOMEGA products. IOMEGA products do not
allow read/write protection without a password. On the
devices which do not have such software read/write protect
facility, warnings indicating the non-availability of this
feature are provided.

-s filename

Enables the user to lay out the
partition information in the SUNOS label.

The user should
provide a file as input with information about each slice in
a format providing byte offset, size required, tags, and
flags, as follows:

slices:
n = offset, size [, flags,
tags]

where n
is the slice number, offset is the byte offset at
which the slice n starts, and size is the
required size for slice n. Both offset and
size must be a multiple of 512 bytes. These numbers
can be represented as decimal, hexadecimal, or octal
numbers. No floating point numbers are accepted. Details
about maximum number of slices can be obtained from the
System Administration Guide: Basic Administration.

To specify the
size or offset in kilobytes, megabytes, or
gigabytes, add KB, MB, GB,
respectively. A number without a suffix is assumed to be a
byte offset. The flags are represented as follows:

wm =
read-write, mountable 
wu = read-write, unmountable 
ru = read-only, unmountable

The tags are
represented as follows: unassigned, boot,
root, swap, usr, backup,
stand, var, home,
alternates.

The tags and
flags can be omitted from the four tuple when finer control
on those values is not required. It is required to omit both
or include both. If the tags and flags are omitted from the
four tuple for a particular slice, a default value for each
is assumed. The default value for flags is wm and for
tags is unassigned.

Either full tag
names can be provided or an abbreviation for the tags can be
used. The abbreviations can be the first two or more letters
from the standard tag names. rmformat is case
insensitive in handling the defined tags & flags.

Slice
specifications are separated by :

For
example:

slices: 0 = 0,
30MB, "wm", "home" : 
1 = 30MB, 51MB : 
2 = 0, 100MB, "wm", "backup" : 
6 = 81MB, 19MB

rmformat
does the necessary checking to detect any overlapping
partitions or illegal requests to addresses beyond the
capacity of the media under consideration. There can be only
one slice information entry for each slice n. If
multiple slice information entries for the same slice
n is provided, an approriate error message is
displayed. The slice 2 be the backup slice covering
the whole disk capacity. The pound sign character, #,
can be used to describe a line of comments in the input
file. If the line starts with #, then rmformat
ignores all the characters following # until the end
of the line.

Partitioning
some of the media with very small capacity is permitted, but
be cautious in using this option on such devices.

-U

Performs umount on any file systems and then
formats. See mount(1M). This option unmounts all the
mounted slices and issues a long format on the device
requested. 

-V read | write

Verifies each block of media
after format. The write verification is a destructive
mechanism. The user is queried for confirmation before the
verification is started. The output of this option is a list
of block numbers, which are identified as bad.

The read
verification only verifies the blocks and report the blocks
which are prone to errors.

The list of
block numbers displayed can be used with the -c
option for repairing.

-w enable | disable

Enables or disables the write
protection on media. On devices that do not have a software
write protect facility, a message indicating
non-availability of this feature is displayed.

-W enable | disable

Enables or disables write
protection with password. This option always works in
interactive mode, as a password is requested from the user
to maintain security.

A maximum
password length of 32 bytes is allowed for IOMEGA products
that support this feature. On devices that do not have the
write protection with password, the software displays
appropriate messages indicating the non-availability of such
features.

OPERANDS

The following
operands are supported: 
devname

devname can be provided
as absolute device pathname or relative pathname for the
device from the current working directory or the nickname as
exported by the System Volume manager. See
vold(1M).

For floppy
device /dev/rdiskette0 (for system without volume
management) or floppy0 (system with volume
management) can be used. To use the first drive, specify
/dev/rdiskette1 (for system without volume
management), or floppy1 (system with volume
management) to use the second drive.

For system
without volume management running, user can also provide the
absolute device pathname as
/dev/rdsk/c?t?d?s? or the
appropriate relative device pathname from the current
working directory.

EXAMPLES

Example 1:
Formatting a diskette

example$
rmformat -F quick /dev/rdiskette

Formatting will erase all the data on disk.
Do you want to continue? (y/n)y

Example 2:
Formatting a Zip drive

example$
rmformat -F quick /vol/dev/aliases/zip0

Formatting will erase all the data on disk.
Do you want to continue? (y/n)y

Example 3:
Formatting a diskette for a UFS file system

The following
example formats a diskette and creates a UFS file
system:

example$
rmformat -F quick /vol/dev/aliases/floppy0

Formatting will erase all the data on disk.
Do you want to continue? (y/n)y
example$ su
# /usr/sbin/newfs /vol/dev/aliases/floppy0
newfs: construct a new file system /dev/rdiskette: (y/n)? y
/dev/rdiskette: 2880 sectors in 80 cylinders of 2 tracks, 18 sectors
         1.4MB in 5 cyl groups (16 c/g, 0.28MB/g, 128 i/g)
 super-block backups (for fsck -F ufs -o b=#) at:
  32, 640, 1184, 1792, 2336,
#

Example 4:
Formatting removable media for a PCFS file system

The following
example shows how to create an alternate fdisk
partition:

example$
rmformat -F quick /dev/rdsk/c0t4d0s2:c

Formatting will erase all the data on disk.
Do you want to continue? (y/n)y
example$ su
# fdisk /dev/rdsk/c0t4d0s2:c
# mkfs -F pcfs /dev/rdsk/c0t4d0s2:c
Construct a new FAT file system on /dev/rdsk/c0t4d0s2:c: (y/n)? y
#

The following
example describes how to create a PCFS file system
without an fdisk partition:

example$
rmformat -F quick /dev/rdiskette

Formatting will erase all the data on disk.
Do you want to continue? (y/n)y
example$ su
# mkfs -F pcfs -o nofdisk,size=2 /dev/rdiskette
Construct a new FAT file system on /dev/rdiskette: (y/n)? y
#

Example 5:
Enabling or disabling read or write protection

The following
example shows how to enable write protection and set a
password on a Zip drive:

example$
rmformat -W enable /vol/dev/aliases/zip0 
Please enter password (32 chars maximum): xxx

Please reenter password: xxx

The following
example shows how to disable write protection and remove the
password on a Zip drive:

example$
rmformat -W disable /vol/dev/aliases/zip0 
Please enter password (32 chars maximum):
xxx

The following
example shows how to enable read protection and set a
password on a Zip drive:

example$
rmformat -R enable /vol/dev/aliases/zip0 
Please enter password (32 chars maximum): xxx

Please reenter password: xxx

The following
example shows how to disable read protection and remove the
password on a Zip drive:

example$
rmformat -R disable /vol/dev/aliases/zip0 
Please enter password (32 chars maximum):
xxx

FILES

/vol/dev/diskette0

Directory providing block
device access for the media in floppy drive 0.

/vol/dev/rdiskette0

Directory providing character
device access for the media in floppy drive 0.

/vol/dev/aliases

Directory providing symbolic
links to the character devices for the different media under
the control of volume management using appropriate
alias.

/vol/dev/aliases/floppy0

Symbolic link to the character
device for the media in floppy drive 0.

/vol/dev/aliases/zip0

Symbolic link to the character
device for the media in Zip drive 0.

/vol/dev/aliases/jaz0

Symbolic link to the character
device for the media in Jaz drive 0.

/dev/rdiskette

Symbolic link providing
character device access for the media in the primary floppy
drive, usually drive 0.

/vol/dev/dsk

Directory providing block
device access for the PCMCIA memory and ata cards and
removable media devices.

/vol/dev/rdsk

Directory providing character
device access for the PCMCIA memory and ata cards and
removable media devices.

/vol/dev/aliases/pcmemS

Symbolic link to the character
device for the PCMCIA memory card in socket S, where
S represents a PCMCIA socket number.

/vol/dev/aliases/rmdisk0

Symbolic link to the generic
removable media device that is not a Zip, Jaz,
CD-ROM, floppy, DVD-ROM, PCMCIA memory
card, and so forth.

/dev/rdsk

Directory providing character
device access for the PCMCIA memory and ata cards and
other removable devices.

/dev/dsk

Directory providing block
device access for the PCMCIA memory and ata cards and
other removable media devices.

ATTRIBUTES

See
attributes(5) for descriptions of the following
attributes:

SEE ALSO

cpio(1),
eject(1), fdformat(1), tar(1),
volcancel(1), volcheck(1),
volmissing(1), volrmmount(1),
format(1M), mkfs_pcfs(1M), mount(1M),
newfs(1M), prtvtoc(1M), rmmount(1M),
rpc.smserved(1M), vold(1M),
rmmount.conf(4), vold.conf(4),
attributes(5), pcfs(7FS), udfs(7FS)

NOTES

A rewritable
media or PCMCIA memory card or PCMCIA ata card
containing a ufs file system created on a SPARC-based
system (using newfs(1M)) is not identical to a
rewritable media or PCMCIA memory card containing a
ufs file system created on an IA based system. Do not
interchange any removable media containing ufs
between these platforms; use cpio(1) or tar(1)
to transfer files on diskettes or memory cards between them.
For interchangeable filesystems refer to pcfs(7FS)
and udfs(7FS).

BUGS

Currently, bad
sector mapping is not supported on floppy diskettes or
PCMCIA memory cards. Therefore, a diskette or memory
card is unusable if rmformat finds an error (bad
sector).