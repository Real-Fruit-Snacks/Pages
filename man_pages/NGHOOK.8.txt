NGHOOK(8) BSD System Manager&rsquo;s Manual
NGHOOK(8)

NAME

nghook &mdash; connect to
a netgraph(4) node

SYNOPSIS

nghook
[&minus;adlnSs] [&minus;m msg]
path [hookname] 
nghook &minus;e [&minus;n]
[&minus;m msg] path hookname
program [args ...]

DESCRIPTION

The nghook utility
creates a ng_socket(4) socket type node and connects it to
hook hookname of the node found at path. If
hookname is omitted,
&rsquo;&rsquo;debug&rsquo;&rsquo; is assumed.

If the
&minus;e option is given, the third argument is
interpreted as the path to a program, and this program is
executed with the remaining arguments as its arguments.
Before executing, the program Netgraph messages (specified
by the &minus;m option) are sent to the node. The
program is executed with its standard input (unless closed
by &minus;n) and output connected to the hook.

If the
&minus;e option is not given, all data written to
standard input is sent to the node, and all data received
from the node is relayed to standard output. Messages
specified with &minus;m are sent to the node before
the loop is entered. The nghook utility exits when
EOF is detected on standard input in this case.

The options are
as follows:

&minus;a

Output each
packet read in human-readable decoded ASCII form instead of
raw binary.

&minus;d

Increase the
debugging verbosity level.

&minus;e

Execute the
program specified by the third argument.

&minus;l

Loops all
received data back to the hook in addition to writing it to
standard output.

&minus;m msg

Before
executing the program (in &minus;e mode) send the
given ASCII control message to the node. This option may be
given more than once.

&minus;n

Do not attempt
to read any data from standard input. The nghook
utility will continue reading from the node until stopped by
a signal.

&minus;S

Use file
descriptor 0 for output instead of the default 1.

&minus;s

Use file
descriptor 1 for input instead of the default 0.

BUGS

Although all input is read in
unbuffered mode, there is no way to control the
packetization of the input.

If the node
sends a response to a message (specified by
&minus;m), this response is lost.

SEE ALSO

netgraph(3), netgraph(4),
ngctl(8)

HISTORY

The netgraph system was
designed and first implemented at Whistle Communications,
Inc. in a version of FreeBSD 2.2 customized for the
Whistle InterJet.

AUTHORS

Archie Cobbs
archie [AT] whistle.com>

BSD
October 24, 2003 BSD